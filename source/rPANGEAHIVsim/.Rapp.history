ttdists1[[1]]
str(ttdists1[[1]])
names(ttdists1)
tinfo
tinfo[, unique(SC)]
submitted.info
subset(submitted.info, SC=='150701_REGIONAL_TRAIN1' & IDX%in%ttdists[[1]]$INDS)
subset(submitted.info, SC=='150701_REGIONAL_TRAIN1' & IDX%in%ttdists1[[1]]$INDS)
setnames(submitted.info, c('RF','NRF','NQD','kc0','kc1','kc_x','kc_y','rf_x','rf_y'), c('SB_RF','SB_NRF','SB_NQD','LDS_KC_L0','LDS_KC_L1','LDS_KC_L0_MDSx','LDS_KC_L0_MDSy','LDS_RF_MDSx','LDS_RF_MDSy'))
submitted.info
outfile	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151203.rda'#
	save(strs, ttrs, tinfo, submitted.info, sclu.info, ttdists1, RFttdists, file=outfile)
save(strs, strs_lsd_brl, strs_lsd_date, ttrs, tinfo, submitted.info, sclu.info, ttdists1, RFttdists, file=outfile)
submitted.info
set(submitted.info, NULL, c('SB_RF','SB_NRF'), NULL)
file	<- "~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151119_SRFQD.rda"#
	load(file)#
	load('~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151203_CCnov26.rda')#
	submitted.info	<- copy(myinfo)#
	load("~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151203_CCinfowithTTdists.rda")#
	# loads myinfo ttdists1 RFttdists#
	submitted.info	<- copy(myinfo)#
	setnames(submitted.info, c('RF','NRF','NQD','kc0','kc1','kc_x','kc_y','rf_x','rf_y'), c('SB_RF','SB_NRF','SB_NQD','LDS_KC_L0','LDS_KC_L1','LDS_KC_L0_MDSx','LDS_KC_L0_MDSy','LDS_RF_MDSx','LDS_RF_MDSy'))
submitted.info
tinfo
submitted.info[, unique(TIME_IDX_T)]
length(strs)
length(strs_lsd_date)
which(!sapply(strs_lsd_date, is.binary.tree))
file			<- "~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151119_SRFQD.rda"#
	load(file)#
	load('~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151203_CCnov26.rda')#
	submitted.info	<- copy(myinfo)#
	load("~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151203_CCinfowithTTdists.rda")#
	# loads myinfo ttdists1 RFttdists#
	submitted.info	<- copy(myinfo)#
	setnames(submitted.info, c('RF','NRF','NQD','kc0','kc1','kc_x','kc_y','rf_x','rf_y'), c('SB_RF','SB_NRF','SB_NQD','LSD_KC_L0','LSD_KC_L1','LSD_KC_L0_MDSx','LSD_KC_L0_MDSy','LSD_RF_MDSx','LSD_RF_MDSy'))
treedist.robinsonfould.wrapper<- function(submitted.info, ttrs, strs)#
{#
	setkey(submitted.info, IDX)#
	#tmp				<- subset(submitted.info, IDX==321)[1,]#
	#IDX<- 321;	TIME_IDX_T<-1#
	tmp				<- submitted.info[, {#
				cat('\nAt IDX', IDX)#
				stree		<- unroot(strs[[IDX]])#
				otree		<- unroot(multi2di(ttrs[[TIME_IDX_T]]))				#
				if(!is.binary.tree(stree))#
				{#
					cat('\nFound non-binary tree at IDX',IDX)#
					stree	<- multi2di(stree)#
				}#
				#print(stree)#
				#print(otree)#
				z			<- setdiff(otree$tip.label, stree$tip.label)#
				stopifnot( length(z)==abs(diff(c(TAXAN, TAXAN_T))) )#
				if(length(z))#
					otree	<- unroot(drop.tip(otree, z))				#
				#https://groups.google.com/forum/#!topic/raxml/JgvxgknTeqw#
				#normalize with 2n-6		#
				rf			<- RF.dist(otree, stree, check.labels=TRUE)#
				list(RF=rf, NRF=rf/(2*Ntip(otree)-6))#
			}, by='IDX']#
	tmp#
}
tmp				<- treedist.robinsonfould.wrapper(submitted.info, ttrs, strs_lsd_date)
??RF.dist
require(phangorn)
tmp				<- treedist.robinsonfould.wrapper(submitted.info, ttrs, strs_lsd_date)
tmp
setnames(tmp, c('RF','NRF'), c('LSD_RF','LSD_NRF'))
merge(submitted.info, tmp, by='IDX')
submitted.info	<- merge(submitted.info, tmp, by='IDX')
tmp				<- treedist.robinsonfouldclusters.wrapper(submitted.info, ttrs, strs_lsd_date, tinfo)
treedist.robinsonfouldclusters.wrapper<- function(submitted.info, ttrs, strs, tinfo)#
{#
	require(phangorn)#
	#tmp		<- subset(submitted.info, MODEL=='Model: Regional')[1,]	#
	#IDX<- 1; TIME_IDX_T<-12		#
	setkey(tinfo, IDX_T)#
	tmp		<- subset(submitted.info, MODEL=='R')[, {#
				cat('\nAt IDX', IDX)#
				stree		<- unroot(strs[[IDX]])#
				otree		<- unroot(multi2di(ttrs[[TIME_IDX_T]]))				#
				if(!is.binary.tree(stree))#
				{#
					cat('\nFound non-binary tree at IDX',IDX)#
					stree	<- multi2di(stree)#
				}#
				z			<- TIME_IDX_T#
				z			<- subset(tinfo, CLU_N>3 & IDX_T==z)#
				z			<- merge(z, data.table(TAXA=stree$tip.label, IN_STREE=1), by='TAXA', all.x=1)#
				z			<- merge(z, z[, list(CLU_NS= length(which(IN_STREE==1))), by='IDCLU'], by='IDCLU')#
				z			<- subset(z, CLU_NS>3)#
				if(nrow(z))#
				{#
					#IDCLU	<- 6#
					#TAXA	<- subset(z, IDCLU==6)[, TAXA]#
					ans		<- z[, {								#
								sclu	<- unroot(drop.tip(stree, setdiff(stree$tip.label,TAXA)))#
								oclu	<- unroot(drop.tip(otree, union( setdiff(otree$tip.label, stree$tip.label), setdiff(otree$tip.label,TAXA))))#
								rf		<- RF.dist(oclu, sclu, check.labels=TRUE)#
								list(TAXA_NC=Ntip(oclu), RFC=rf, NRFC=rf/(2*Ntip(oclu)-6))#
							}, by='IDCLU']	#
				}#
				if(!nrow(z))#
					ans		<- data.table(IDCLU=NA_integer_, TAXA_NC=NA_integer_, RFC=NA_integer_, NRFC=NA_real_)#
				ans			#
			}, by='IDX']#
	tmp#
}
tmp				<- treedist.robinsonfouldclusters.wrapper(submitted.info, ttrs, strs_lsd_date, tinfo)
tmp
submitted.info
subset(submitted.info, MODEL=='R')
IDX<- 1; TIME_IDX_T<-12
stree		<- unroot(strs_lsd_date[[IDX]])#
				otree		<- unroot(multi2di(ttrs[[TIME_IDX_T]]))
stree
otree
z			<- TIME_IDX_T#
				z			<- subset(tinfo, CLU_N>3 & IDX_T==z)#
				z			<- merge(z, data.table(TAXA=stree$tip.label, IN_STREE=1), by='TAXA', all.x=1)#
				z			<- merge(z, z[, list(CLU_NS= length(which(IN_STREE==1))), by='IDCLU'], by='IDCLU')#
				z			<- subset(z, CLU_NS>3)
z
tinfo
tinfo[, unique(IDX_T)]
tfiles
indir	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/freeze_July15'#
	tfiles	<- list.files(indir, pattern='newick$', full.names=TRUE)#
	tfiles	<- data.table( FILE_T= tfiles[ grepl('SUBSTTREE', tfiles) | grepl('Vill_99', tfiles) | grepl('Vill.*DATEDTREE', tfiles) ] )#
	tfiles[, SC:= toupper(gsub('_SUBSTTREE|_DATEDTREE','',gsub('.newick','',basename(FILE_T))))]#
	tmp		<- rbind( subset(tfiles, SC=='VILL_99_APR15'), subset(tfiles, SC=='VILL_99_APR15'), subset(tfiles, SC=='VILL_99_APR15') )#
	set(tmp, NULL, 'SC', c('150701_VILL_SCENARIO-C','150701_VILL_SCENARIO-D','150701_VILL_SCENARIO-E'))#
	tfiles	<- rbind(tfiles, tmp)#
	tmp		<- list.files(indir, pattern='newick$', full.names=TRUE)#
	tmp		<- data.table( FILE_T= tmp[ grepl('Reg.*DATEDTREE', tmp) ] )#
	tmp[, SC:= toupper(gsub('_SUBSTTREE|_DATEDTREE','',gsub('.newick','',basename(FILE_T))))]#
	tfiles	<- rbind(tfiles, tmp)#
	tfiles[, BRL_T:= 'time']	#
	set(tfiles, tfiles[, which(grepl('REG',SC) & grepl('SUBST',FILE_T))], 'BRL_T', 'subst')	#
	ttrs	<- lapply(tfiles[, FILE_T], function(x)	read.tree(file=x) )#
	names(ttrs)	<- tfiles[, SC]	#
	for(z in c('VILL_99_APR15','150701_VILL_SCENARIO-C','150701_VILL_SCENARIO-D','150701_VILL_SCENARIO-E'))#
		ttrs[[z]]	<- root(ttrs[[z]], node=Ntip(ttrs[[z]])+2, resolve.root=1)	#
	tfiles[, IDX_T:=seq_along(ttrs)]#
	tfiles[, TAXAN_T:= sapply(ttrs, Ntip)]
tfiles
tinfo	<- merge(tfiles, do.call('rbind',lapply(seq_along(ttrs), function(i) data.table(TAXA=ttrs[[i]]$tip.label, IDX_T=i))), by='IDX_T')	#
	tinfo[, IDPOP:=NA_character_]#
	tmp		<- tinfo[, which(grepl('REGIONAL',SC))]#
	set(tinfo, tmp, 'IDPOP', tinfo[tmp,regmatches(TAXA, regexpr('IDPOP_[0-9]+',TAXA))])#
	tmp		<- tinfo[, which(!grepl('REGIONAL',SC))]#
	set(tinfo, tmp, 'IDPOP', tinfo[tmp, regmatches(TAXA, regexpr('HOUSE[0-9]+-[0-9]+|House[0-9]+-[0-9]+',TAXA))])		#
	stopifnot(subset(tinfo, grepl('VILL',SC))[, length(which(substring(TAXA,1,10)!=substring(IDPOP,1,10)))]==0)	#
	stopifnot( tinfo[, length(which(is.na(IDPOP)))==0] )	#
	set(tinfo, NULL, 'IDPOP', tinfo[,toupper(IDPOP)])#
	set(tinfo, NULL, 'TAXA', tinfo[,toupper(TAXA)])#
	#	read cluster membership from DATEDCLUTREES	#
	tmp		<- list.files(indir, pattern='DATEDCLUTREES', full.names=TRUE)#
	tmp		<- data.table( 	FILE_CLU_T= tmp, #
							SC= toupper(gsub('_DATEDCLUTREES','',gsub('.newick','',basename(tmp)))),#
							BRL_T= 'time') #
	tfiles	<- merge(tfiles, tmp, by=c('SC','BRL_T'), all=1)	#
	tmp		<- subset(tfiles, !is.na(FILE_CLU_T))[, {#
				z		<- read.tree(FILE_CLU_T)#
				do.call('rbind',lapply(seq_along(z), function(i) data.table(IDCLU=i, TAXA=z[[i]]$tip.label)))				#
			}, by=c('SC','BRL_T')]	#
	tinfo	<- merge(tinfo, tmp, by=c('SC','BRL_T','TAXA'), all=1)#
	tmp		<- subset(tinfo, !is.na(IDCLU))[, list(CLU_N= length(IDPOP)), by=c('SC','BRL_T','IDCLU')]#
	tinfo	<- merge(tinfo, tmp, by=c('SC','BRL_T','IDCLU'), all=1)#
	#	read sequences and determine %gappiness#
	tmp		<- list.files(indir, pattern='fa$|fasta$', full.names=TRUE)#
	tmp		<- data.table( FILE_SEQ_T= tmp, SC= toupper(gsub('_SIMULATED','',gsub('.fa','',basename(tmp)))))#
	z		<- subset(tmp, SC=='VILL_99_APR15')#
	set(z, NULL, 'SC', '150701_VILL_SCENARIO-C')#
	tmp		<- rbind( tmp, z )	#
	tfiles	<- merge(tfiles, tmp, by='SC', all=1)#
	tmp		<- subset(tfiles, !is.na(FILE_SEQ_T))[, {#
				z		<- read.dna(FILE_SEQ_T, format='fasta')	#
				ans		<- sapply(seq_len(nrow(z)), function(i) base.freq(z[i,], all=1))#
				ans		<- apply(ans[c('n','-','?'),], 2, sum)#
				list(TAXA=rownames(z), GPS=ans)				#
			}, by=c('SC','BRL_T')]#
	tinfo	<- merge(tinfo, tmp, by=c('SC','BRL_T','TAXA'), all.x=1)
tinfo
tinfo[, unique(IDX_T)]
IDX<- 1; TIME_IDX_T<-12
cat('\nAt IDX', IDX)#
				stree		<- unroot(strs_lsd_date[[IDX]])#
				otree		<- unroot(multi2di(ttrs[[TIME_IDX_T]]))				#
				if(!is.binary.tree(stree))#
				{#
					cat('\nFound non-binary tree at IDX',IDX)#
					stree	<- multi2di(stree)#
				}#
				z			<- TIME_IDX_T#
				z			<- subset(tinfo, CLU_N>3 & IDX_T==z)#
				z			<- merge(z, data.table(TAXA=stree$tip.label, IN_STREE=1), by='TAXA', all.x=1)#
				z			<- merge(z, z[, list(CLU_NS= length(which(IN_STREE==1))), by='IDCLU'], by='IDCLU')#
				z			<- subset(z, CLU_NS>3)
z
if(nrow(z))#
				{#
					#IDCLU	<- 6#
					#TAXA	<- subset(z, IDCLU==6)[, TAXA]#
					ans		<- z[, {								#
								sclu	<- unroot(drop.tip(stree, setdiff(stree$tip.label,TAXA)))#
								oclu	<- unroot(drop.tip(otree, union( setdiff(otree$tip.label, stree$tip.label), setdiff(otree$tip.label,TAXA))))#
								rf		<- RF.dist(oclu, sclu, check.labels=TRUE)#
								list(TAXA_NC=Ntip(oclu), RFC=rf, NRFC=rf/(2*Ntip(oclu)-6))#
							}, by='IDCLU']	#
				}
ans
tmp				<- treedist.robinsonfouldclusters.wrapper(submitted.info, ttrs, strs_lsd_date, tinfo)
tmp
setnames(tmp, c('RFC','NRFC'), c('LSD_RFC','LSD_NRFC'))
tmp
sclu.info
setnames(sclu.info, c('NRFC','NQDC'), c('SB_NRFC','SB_NQDC'))
tmp
merge(sclu.info, subset(tmp, select=c(IDX, IDCLU, LSD_NRFC)), by=c('IDX','IDCLU'))
sclu.info		<- merge(sclu.info, subset(tmp, select=c(IDX, IDCLU, LSD_NRFC)), by=c('IDX','IDCLU'))
outfile	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim/201507_TreeReconstruction/evaluation/submitted_151203.rda'#
	save(strs, strs_lsd_brl, strs_lsd_date, ttrs, tinfo, submitted.info, sclu.info, ttdists1, RFttdists, file=outfile)
sa		<- copy(submitted.info)#
	sc		<- copy(sclu.info)#
	set(sa, NULL, 'MODEL', sa[, factor(MODEL, levels=c('V','R'),labels=c('Model: Village','Model: Regional'))])#
	set(sa, sa[, which(SC=="VILL_99_APR15")],'SC',"150701_VILL_SCENARIO-C")	#
	set(sa, NULL, 'SC', sa[, factor(SC,	levels=c("150701_REGIONAL_TRAIN1", "150701_REGIONAL_TRAIN2", "150701_REGIONAL_TRAIN3", "150701_REGIONAL_TRAIN4","150701_REGIONAL_TRAIN5","150701_VILL_SCENARIO-A","150701_VILL_SCENARIO-B","150701_VILL_SCENARIO-C","150701_VILL_SCENARIO-D","150701_VILL_SCENARIO-E"), #
							labels=c('sc 1','sc 2','sc 3','sc 4','sc 5','sc A','sc B','sc C','sc D','sc E'))])#
	set(sa, NULL, 'GAPS', sa[, factor(GAPS, levels=c('none','low','high'),labels=c('Gaps: none','Gaps: low','Gaps: high'))])#
	set(sa, NULL, 'BEST', sa[, factor(BEST, levels=c('Y','N'),labels=c('best tree','replicate tree'))])									#
	set(sa, NULL, 'GENE', sa[, factor(GENE, levels=c('POL','GAG+POL+ENV'),labels=c('pol','gag+pol+env'))])	#
	set(sa, NULL, 'TEAM', sa[, factor(TEAM, levels=sa[, sort(unique(TEAM))],labels=sa[, sort(unique(TEAM))])])#
	set(sa, NULL, 'EXT', sa[, factor(EXT, levels=c('~0pc','5pc'),labels=c('~ 0%/year','5%/year'))])#
	set(sa, NULL, 'ACUTE', sa[, factor(ACUTE, levels=c('low','high'),labels=c('10%','40%'))])#
	set(sa, NULL, 'ART', sa[, factor(ART, levels=c('none','fast'),labels=c('none','fast'))])#
	sa		<- subset(sa, OTHER=='N')#
	tmp		<- subset(tinfo, !is.na(IDCLU))[, list(CLU_N=CLU_N[1], MXGPS_CLU= max(GPS), MDGPS_CLU=median(GPS)), by=c('SC','IDCLU')]#
	sc		<- merge(sc, tmp, by=c('SC','IDCLU'))	#
	set(sc, NULL, 'MODEL', sc[, factor(MODEL, levels=c('V','R'),labels=c('Model: Village','Model: Regional'))])#
	set(sc, sc[, which(SC=="VILL_99_APR15")],'SC',"150701_VILL_SCENARIO-C")	#
	set(sc, NULL, 'SC', sc[, factor(SC,	levels=c("150701_REGIONAL_TRAIN1", "150701_REGIONAL_TRAIN2", "150701_REGIONAL_TRAIN3", "150701_REGIONAL_TRAIN4","150701_REGIONAL_TRAIN5","150701_VILL_SCENARIO-A","150701_VILL_SCENARIO-B","150701_VILL_SCENARIO-C","150701_VILL_SCENARIO-D","150701_VILL_SCENARIO-E"), #
							labels=c('sc 1','sc 2','sc 3','sc 4','sc 5','sc A','sc B','sc C','sc D','sc E'))])#
	set(sc, NULL, 'GAPS', sc[, factor(GAPS, levels=c('none','low','high'),labels=c('Gaps: none','Gaps: low','Gaps: high'))])#
	set(sc, NULL, 'BEST', sc[, factor(BEST, levels=c('Y','N'),labels=c('best tree','replicate tree'))])									#
	set(sc, NULL, 'GENE', sc[, factor(GENE, levels=c('POL','GAG+POL+ENV'),labels=c('pol','gag+pol+env'))])	#
	set(sc, NULL, 'TEAM', sc[, factor(TEAM, levels=sc[, sort(unique(TEAM))],labels=sc[, sort(unique(TEAM))])])#
	set(sc, NULL, 'EXT', sc[, factor(EXT, levels=c('~0pc','5pc'),labels=c('~ 0%/year','5%/year'))])#
	set(sc, NULL, 'ART', sc[, factor(ART, levels=c('none','fast'),labels=c('none','fast'))])#
	sc		<- subset(sc, OTHER=='N')
stopifnot(sc[, !any(is.na(NRFC))], sc[, !any(is.na(NQDC))])#
	scp		<- sc[, list( NRF=mean(NRFC, na.rm=TRUE), NQD=mean(NQDC, na.rm=TRUE) ), by=c('SC','GENE','TEAM','BEST','IDX','FILE','GAPS','MODEL','TAXAN','TAXAN_T','ROOTED','SEQCOV','ART','ACUTE','EXT','OTHER','TIME_IDX_T','SUB_IDX_T')]#
	if('BILL'%in%colnames(sc))#
	{#
		tmp		<- sc[, list( BILL=mean(BILL, na.rm=TRUE) ), by=c('SC','GENE','TEAM','BEST','IDX','FILE','GAPS','MODEL','TAXAN','TAXAN_T','ROOTED','SEQCOV','ART','ACUTE','EXT','OTHER','TIME_IDX_T','SUB_IDX_T')]#
		scp		<- merge(scp, tmp, by=c('SC','GENE','TEAM','BEST','IDX','FILE','GAPS','MODEL','TAXAN','TAXAN_T','ROOTED','SEQCOV','ART','ACUTE','EXT','OTHER','TIME_IDX_T','SUB_IDX_T') )		#
	}
sc
scp		<- sc[, list( SB_NRF=mean(SB_NRFC, na.rm=TRUE), SB_NQD=mean(SB_NQDC, na.rm=TRUE) ), by=c('SC','GENE','TEAM','BEST','IDX','FILE','GAPS','MODEL','TAXAN','TAXAN_T','ROOTED','SEQCOV','ART','ACUTE','EXT','OTHER','TIME_IDX_T','SUB_IDX_T')]
scp
sc
if('LSD_NRFC'%in%colnames(sc))#
	{#
		tmp		<- sc[, list( LSD_NRF=mean(LSD_NRFC, na.rm=TRUE) ), by=c('SC','GENE','TEAM','BEST','IDX','FILE','GAPS','MODEL','TAXAN','TAXAN_T','ROOTED','SEQCOV','ART','ACUTE','EXT','OTHER','TIME_IDX_T','SUB_IDX_T')]#
		scp		<- merge(scp, tmp, by=c('SC','GENE','TEAM','BEST','IDX','FILE','GAPS','MODEL','TAXAN','TAXAN_T','ROOTED','SEQCOV','ART','ACUTE','EXT','OTHER','TIME_IDX_T','SUB_IDX_T') )		#
	}
scp
sm		<- rbind( subset(sa, grepl('Village',MODEL)), scp, fill=TRUE, use.names=TRUE)
sm
timetag
ggplot( subset(sm, TEAM!='MetaPIGA'), aes(y=SB_NRF, x=SC, shape=TEAM, fill=GENE, colour=GENE, size=BEST) ) + #
				geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
				scale_size_manual(values=c(3, 1)) +#
				scale_shape_manual(values=c(21,23,24)) +#
				scale_fill_brewer(palette='Paired') +#
				scale_colour_brewer(palette='Paired') +#
				facet_wrap(MODEL~GAPS, scales='free_x') +	#
				labs(x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='part of genome', colour='part of genome') +#
				theme_bw()
ggplot( subset(sm, TEAM!='MetaPIGA'), aes(y=SB_NRF, x=SC, shape=TEAM, fill=GENE, colour=GENE, size=BEST) ) + #
				geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
				scale_size_manual(values=c(3, 1)) +#
				scale_shape_manual(values=c(21,23,24)) +#
				scale_fill_brewer(palette='Paired') +#
				scale_colour_brewer(palette='Paired') +#
				facet_wrap(MODEL~GAPS, scales='free_x') +	#
				labs(x='\nsimulated data set', y='Robinson-Fould of estimated trees with subst/site branches\n(standardized)\n', size='', shape='Method', fill='part of genome', colour='part of genome') +#
				theme_bw()
ggplot( subset(sm, TEAM!='MetaPIGA'), aes(y=SB_NRF, x=SC, shape=TEAM, fill=GENE, colour=GENE, size=BEST) ) + #
				geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
				scale_size_manual(values=c(3, 1)) +#
				scale_shape_manual(values=c(21,23,24)) +#
				scale_fill_brewer(palette='Paired') +#
				scale_colour_brewer(palette='Paired') +#
				facet_wrap(MODEL~GAPS, scales='free_x') +	#
				labs(x='\nsimulated data set', y='Robinson-Fould distance\nof estimated trees with subst/site branches\n(standardized)\n', size='', shape='Method', fill='part of genome', colour='part of genome') +#
				theme_bw()
ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_RF_SUBST_polvsall_by_gaps.pdf',sep=''))
ggplot( subset(sm, TEAM!='MetaPIGA'), aes(y=LSD_NRF, x=SC, shape=TEAM, fill=GENE, colour=GENE, size=BEST) ) + #
				geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
				scale_size_manual(values=c(3, 1)) +#
				scale_shape_manual(values=c(21,23,24)) +#
				scale_fill_brewer(palette='Paired') +#
				scale_colour_brewer(palette='Paired') +#
				facet_wrap(MODEL~GAPS, scales='free_x') +	#
				labs(x='\nsimulated data set', y='Robinson-Fould distance\nof estimated trees with dated branches\n(standardized)\n', size='', shape='Method', fill='part of genome', colour='part of genome') +#
				theme_bw() #
		ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_RF_DATED_polvsall_by_gaps.pdf',sep=''))
sa
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(y=LSD_KC_L1/TAXAN/TAXAN, x=SC) ) + 			#
				geom_boxplot(aes(colour=GENE), fill='transparent', size=0.5, outlier.shape=NA, alpha=0.3) +#
				geom_jitter(aes(shape=TEAM, fill=GENE, colour=GENE, size=BEST), position = position_jitter(height=.001, width=0.2)) +#
				scale_size_manual(values=c(3, 1)) +#
				scale_shape_manual(values=c(21,23,24)) +#
				scale_fill_brewer(palette='Paired') +#
				scale_colour_brewer(palette='Paired') +#
				facet_wrap(MODEL~GAPS, scales='free_x') +	#
				labs(x='\nsimulated data set', y='Kendall-Colijn\nof estimated trees with dated branches\n(lambda=1, /TX^2)\n', size='', shape='Method', fill='part of genome', colour='part of genome') +#
				theme_bw() #
		ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_KC1_DATED_polvsall_by_gaps.pdf',sep=''))
strs.new			<- strs#
	ttrs.new			<- ttrs#
	tinfo.new			<- copy(tinfo)#
	submitted.info.new	<- copy(submitted.info)#
	sclu.info.new		<- copy(sclu.info)
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC) ) + 			#
				geom_boxplot(aes(colour=GENE), fill='transparent', size=0.5, outlier.shape=NA, alpha=0.3) +#
				geom_jitter(aes(shape=TEAM, fill=GENE, colour=GENE, size=BEST), position = position_jitter(height=.001, width=0.2)) +#
				scale_size_manual(values=c(3, 1)) +#
				scale_shape_manual(values=c(21,23,24)) +#
				scale_fill_brewer(palette='Paired') +#
				scale_colour_brewer(palette='Paired') +#
				facet_wrap(MODEL~GAPS, scales='free_x') +	#
				labs(x='\nsimulated data set', y='Kendall-Colijn\nof estimated trees with subst/site branches\n(lambda=0, /TX^2)\n', size='', shape='Method', fill='part of genome', colour='part of genome') +#
				theme_bw() #
		ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_KC0_SUBST_polvsall_by_gaps.pdf',sep=''))
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0/TAXAN/TAXAN, y=LSD_KC_L0/TAXAN/TAXAN, colour=SC) ) + geom_point()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L0, colour=SC) ) + geom_point()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1, colour=SC) ) + geom_point()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1, colour=SC) ) + #
			geom_point() + geom_abline(slope=1, intercept=0) +#
			facet_wrap(MODEL~GAPS, scales='free_x') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +#
			geom_jitter(aes(shape=TEAM, fill=SC, colour=GENE, size=BEST), position = position_jitter(height=.001, width=0.2)) +#
			geom_point() + geom_abline(slope=1, intercept=0) +#
			scale_fill_brewer(palette='Paired') +#
			facet_wrap(MODEL~GAPS, scales='free_x') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +#
			geom_jitter(aes(shape=TEAM, fill=SC, size=BEST), position = position_jitter(height=.001, width=0.2)) +#
			geom_point() + geom_abline(slope=1, intercept=0) +#
			scale_fill_brewer(palette='Paired') +#
			facet_wrap(MODEL~GAPS, scales='free_x') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, fill=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_fill_brewer(palette='Paired') +#
			facet_wrap(MODEL~GAPS, scales='free_x') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, colour=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_colour_brewer(palette='Paired') + scale_size_manual(values=c(3, 1)) + scale_shape_manual(values=c(21,23,24)) +#
			facet_wrap(MODEL~GAPS, scales='free_x') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, colour=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_colour_brewer(palette='Paired') + scale_size_manual(values=c(3, 1)) + scale_shape_manual(values=c(21,23,24)) +#
			facet_wrap(MODEL~GAPS) +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, colour=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_colour_brewer(palette='Paired') + scale_size_manual(values=c(3, 1)) + scale_shape_manual(values=c(21,23,24)) +#
			facet_grid(MODEL~GAPS) +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, colour=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_colour_brewer(palette='Paired') + scale_size_manual(values=c(3, 1)) + scale_shape_manual(values=c(21,23,24)) +#
			facet_grid(MODEL~GAPS) +#
			labs(x='Kendall-Colijn\nof estimated trees with subst/site branches\n(lambda=1, branch lengths)\n', y='Kendall-Colijn\nof estimated trees with subst/site branches\n(lambda=0, topology)\n', size='', shape='Method', colour='simulated data set') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, colour=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_colour_brewer(palette='Paired') + scale_size_manual(values=c(3, 1)) + scale_shape_manual(values=c(21,23,24)) +#
			facet_grid(MODEL~GAPS) +#
			labs(y='Kendall-Colijn\nof estimated trees with subst/site branches\n(lambda=1, branch lengths)\n', x='Kendall-Colijn\nof estimated trees with subst/site branches\n(lambda=0, topology)\n', size='', shape='Method', colour='simulated data set') +#
			theme_bw()
ggplot( subset(sa, TEAM!='MetaPIGA'), aes(x=LSD_KC_L0, y=LSD_KC_L1) ) +			#
			geom_point(aes(shape=TEAM, colour=SC, size=BEST)) + geom_abline(slope=1, intercept=0) +#
			scale_colour_brewer(palette='Paired') + scale_size_manual(values=c(3, 1)) + scale_shape_manual(values=c(21,23,24)) +#
			facet_grid(MODEL~GAPS) +#
			labs(y='Kendall-Colijn\nof estimated trees with dated branches\n(lambda=1, branch lengths)\n', x='Kendall-Colijn\nof estimated trees with dated branches\n(lambda=0, topology)\n', size='', shape='Method', colour='simulated data set') +#
			theme_bw()
submitted.info
ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_KC0_KC1_correlation.pdf',sep=''))
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=NRF, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			#scale_fill_brewer(palette='Paired') +#
			#scale_colour_brewer(palette='Paired') +#
			facet_wrap(GENE~GAPS, scales='free_x', ncol=3) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=SB_NRF, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			#scale_fill_brewer(palette='Paired') +#
			#scale_colour_brewer(palette='Paired') +#
			facet_wrap(GENE~GAPS, scales='free_x', ncol=3) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			#scale_fill_brewer(palette='Paired') +#
			#scale_colour_brewer(palette='Paired') +#
			facet_wrap(GENE~GAPS, scales='free_x', ncol=3) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			#scale_fill_brewer(palette='Paired') +#
			#scale_colour_brewer(palette='Paired') +#
			facet_grid(GENE~GAPS, ncol=3) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			#scale_fill_brewer(palette='Paired') +#
			#scale_colour_brewer(palette='Paired') +#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2(low=muted("red"), high=muted("blue")) +#
			#scale_fill_brewer(palette='Paired') +			#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2(space="Lab") +#
			#scale_fill_brewer(palette='Paired') +			#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
??muted
require(scales)
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2(low=muted("red"), high=muted("blue")) +#
			scale_fill_gradient2(low=muted("red"), high=muted("blue")) +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2(low=muted("red"), high=muted("blue")) +								#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
sa[, range(TAXAN)]
subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA')[, range(TAXAN)]
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2() +#
			scale_fill_gradient2() +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2() +#
			scale_fill_hue() +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradient2() +#
			scale_fill_gradientn(colours = rainbow(7)) +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradientn(colours = rainbow(7)) +#
			scale_fill_gradientn(colours = rainbow(7)) +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\n(standardized)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_KC_L0/TAXAN/TAXAN, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradientn(colours = rainbow(7)) +#
			scale_fill_gradientn(colours = rainbow(7)) +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Kendall-Colijn\nof estimated trees with dated branches\n(lambda=0, topology)\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw() 	#
	ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_KC0_polvsall_Village_by_TAXAN.pdf',sep=''))
ggplot( subset(sa, MODEL=="Model: Village" & TEAM!='MetaPIGA'), aes(y=LSD_NRF, x=SC, shape=TEAM, fill=TAXAN, colour=TAXAN, size=BEST) ) + #
			geom_jitter(position = position_jitter(height=.001, width=0.2)) +			#
			scale_size_manual(values=c(3, 1)) +#
			scale_shape_manual(values=c(21,23,24)) +#
			scale_colour_gradientn(colours = rainbow(7)) +#
			scale_fill_gradientn(colours = rainbow(7)) +						#
			facet_grid(GENE~GAPS) +	#
			labs(title="Model: Village\n", x='\nsimulated data set', y='Robinson-Fould\nof estimated trees with dated branches\n', size='', shape='Method', fill='Taxa in subm tree', colour='Taxa in subm tree') +#
			theme_bw()
ggsave(w=10, h=6, file=paste(edir,'/',timetag,'_RF_polvsall_Village_by_TAXAN.pdf',sep=''))
sa
submitted.info
sa
subset(sa, SC=='sc 5')
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx, y=LSD_RF_MDSy)) + geom_point()
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx/(2*TAXAN-6), y=LSD_RF_MDSy/(2*TAXAN-6))) + geom_point(aes(shape=TEAM, size=BEST)) +#
			scale_shape_manual(values=c(21,23,24)) + scale_size_manual(values=c(3, 1)) +#
			theme_bw()
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx/(2*TAXAN-6), y=LSD_RF_MDSy/(2*TAXAN-6))) + geom_point(aes(shape=TEAM, fill=GENE, colour=GENE, size=BEST)) +#
			scale_shape_manual(values=c(21,23,24)) + scale_size_manual(values=c(3, 1)) +#
			scale_fill_brewer(palette='Paired') + scale_colour_brewer(palette='Paired') +#
			theme_bw()
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx/(2*TAXAN-6), y=LSD_RF_MDSy/(2*TAXAN-6))) + geom_point(aes(colour=TEAM, shape=GENE, size=BEST)) +#
			scale_shape_manual(values=c(1,2)) + scale_size_manual(values=c(3, 1)) +#
			scale_fill_brewer(palette='Paired') + scale_colour_brewer(palette='Set1') +#
			theme_bw()
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx/(2*TAXAN-6), y=LSD_RF_MDSy/(2*TAXAN-6))) + #
			geom_point(aes(colour=TEAM, shape=GENE, size=BEST)) +#
			geom_point(x=0, y=0, colour='black') +#
			scale_shape_manual(values=c(1,2)) + scale_size_manual(values=c(3, 1)) +#
			scale_fill_brewer(palette='Paired') + scale_colour_brewer(palette='Set1') +#
			theme_bw()
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx/(2*TAXAN-6), y=LSD_RF_MDSy/(2*TAXAN-6))) + #
			geom_point(aes(colour=TEAM, shape=GENE, size=BEST)) +#
			geom_point(x=0, y=0, colour='black') +#
			scale_shape_manual(values=c(17,18)) + scale_size_manual(values=c(3, 1)) +#
			scale_fill_brewer(palette='Paired') + scale_colour_brewer(palette='Set1') +#
			theme_bw()
ggplot(subset(sa, SC=='sc 5'), aes(x=LSD_RF_MDSx/(2*TAXAN-6), y=LSD_RF_MDSy/(2*TAXAN-6))) + #
			geom_point(aes(colour=TEAM, shape=GENE, size=BEST)) +#
			geom_point(x=0, y=0, colour='black') +#
			scale_shape_manual(values=c(17,18)) + scale_size_manual(values=c(3, 1)) +#
			scale_fill_brewer(palette='Paired') + scale_colour_brewer(palette='Set1') +#
			labs(x='', y='') +#
			theme_bw()
dfa
dfo
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
	set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))#
	#dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii:= log(OBJ_ii)-log(INC_t)]#
	#dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v:= OBJ_v-ACS_t]#
	#dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi:= OBJ_vi-ACE_t]#
	#dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	dfo			<- subset(dfo, !is.na(RESID))#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')
dfa
460*0.01
require(ape)
read.tree("~/Dropbox (Infectious Disease)/2016_LondonMSM/ExaML_trees/subUKogC_noDRM_examlbs50.newick")
?stepAIC
??stepAIC
setwd("/Users/Oliver/git/HPTN071sim/source/rPANGEAHIVsim"); source("misc/rPANGEAHIV.startme.R")
require(RColorBrewer)#
	dfa		<- project.PANGEA.TEST.pipeline.Aug2015.evaluate.read()#
	#	check for updated submissions, and keep #
	dfa		<- project.PANGEA.TEST.pipeline.Aug2015.keep.most.recent.submission(dfa, format='%d.%m.%Y')#
	#	save submissions#
	outdir	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_08_results/results'#
	save(dfa, file=paste(outdir,'/submissions.R',sep=''))#
	load(paste(outdir,'/submissions.R',sep=''))
require(RColorBrewer)#
	dfa		<- project.PANGEA.TEST.pipeline.Aug2015.evaluate.read()
read.example.201502<- function()#
{#
	file	<- '~/Dropbox\ (Infectious\ Disease)/PANGEAHIVsim/201502/PANGEAHIVsim_Submission_Example.csv'#
	file	<- '/Users/Oliver/Downloads/reg5_results0.csv'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_05_results/PANGEAHIVsim_Submission_ColijnV2.csv'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_05_results/cambImp_regional_mh15.csv'	#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_05_results/PANGEAHIVsim_Submission_Vancouver.csv'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_05_results/PANGEAHIVsim_Submission_BD.csv'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_05_results/PANGEAHIVsim_Submission_ETHZurich_2.csvERROR'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_05_results/PANGEAHIVsim_Submission_ETHZurich.csv'#
	ans2	<- read.submission.Feb2015(file, verbose=0)#
}#
#
read.example.201505<- function()#
{#
	file	<- '~/Dropbox\ (Infectious\ Disease)/PANGEAHIVsim/201502/PANGEAHIVsim_Submission_May2015_Example.csv'#
	ans2	<- read.submission.May2015(file, verbose=0)#
}#
#
read.example.201508<- function()#
{#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_08_results/previous_got_updated/PANGEAHIVsim_Submission_ETHZurich_201508.csv'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_08_results/PANGEAHIVsim_Submission_RegSeqs_Colijn.csv'#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_08_results/PANGEAHIVsim_Submission_ETHZurich_20150818.csv'#
	ans2	<- read.submission.Aug2015(file, verbose=0)#
	file	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_08_results/PANGEAHIVsim_Submission_Vancouver_Aug2015.csv'#
	ans2	<- read.submission.May2015(file, verbose=0)#
}#
#
read.submission.Aug2015<- function(file, verbose=1, warn.all=0, reset.OBJiv.conservative=1)#
{#
	require(data.table)#
	cat('\nThis is read.submission version 15-08-12.')#
	if(verbose)#
	{#
		cat('\nReminder of objectives\n(use verbose=0 to suppress this message)')#
		cat('\nOBJ_i\tDuring the evaluation period, was incidence stable, declining or increasing?\n\t\tAnswer: "stable", "declining", "increasing", or "NA"')#
		cat('\nOBJ_ii\tWhat is the annual % incidence in the last year of the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_iii\tComparing the last year of the evaluation period to the year preceding the evaluation period, what is the ratio in annual % incidence?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_iv\tWas the proportion of transmissions that originated from individuals in early HIV infection in the year preceding the evaluation period below 10%, between 10-30%, or above 30%?\n\t\tAnswer: "<10%", "10-30%", ">30%" or "NA"')#
		cat('\nOBJ_v\tWhat is the proportion of transmissions that originated from individuals in early HIV infection in the year preceding the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_vi\tWhat is the proportion of transmissions that originated from individuals in early HIV infection in the last year of the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\n\nPlease use:\nscenario names SIM_SCENARIO that correspond to the available file names\nUSED_GENES\teither "pol" or "all"')#
	}#
	cat('\nSkip first 22 rows that should contain comment rows starting with #.')#
	cat(paste('\nreading', file))#
	df	<- read.csv(file, stringsAsFactors=FALSE, comment.char="#", blank.lines.skip=TRUE, skip=22)#
	df	<- as.data.table(df)	#
	#	check column names#
	df.colnm	<- c( "TEAM", "SUBMISSION_DATE", "SIM_SCENARIO", "USED_GENES", "OBJ_i", "OBJ_ii", "OBJ_iii", "OBJ_iv", "OBJ_v", "OBJ_vi", "ESTIMATE" )#
	tmp			<- setdiff( df.colnm, names(df) )#
	if(length(tmp))#
		stop(paste('Found missing columns, ', paste(tmp, collapse=','), sep=''))#
	tmp			<- setdiff( names(df), df.colnm )#
	if(length(tmp))#
		warning(paste('Ignore extra columns, ', paste(tmp, collapse=','), sep=''))#
	df			<- df[, df.colnm, with=0]#
	##
	#	check columns#
	##
	#	check TEAM#
	if(df[, length(unique(TEAM))>1])#
		stop('Found more than one TEAM name.')#
	#	check SUBMISSION_DATE#
	if(df[, length(unique(SUBMISSION_DATE))>1])#
		stop('Found more than one SUBMISSION_DATE.')#
	#	check SIM_SCENARIO#
	df.sc		<- data.table(SIM_SCENARIO= c( 	paste('Vill_',sprintf("%02d",0:12),'_Feb2015_5yr',sep=''), #
					paste('Vill_',sprintf("%02d",c(0:1,4,6:7,9:12)),'_Feb2015',sep=''),#
					paste('Vill_',sprintf("%02d",c(2:3,5,8)),'_Feb2015_3yr',sep=''),#
					paste('150129_PANGEAsim_Regional_FirstObj_sc',LETTERS[seq(1,4)],'_SIMULATED_SEQ',sep=''),#
					paste('REGIONAL_sc',LETTERS[seq(1,20)],sep=''),#
					paste('150129_PANGEAsim_Regional_SecondObj_sc',LETTERS[seq(5,20)],'_SIMULATED_DATEDTREE',sep='')												#
			)) #
	tmp			<- unique( setdiff( df[, SIM_SCENARIO], df.sc[, SIM_SCENARIO] ) )#
	if(length(tmp))#
		stop(paste('Found invalid scenarios',paste(tmp,collapse=',')))#
	#	if scenarios are coded as REGIONAL, transform back to original SCENARIO code#
	tmp			<- df[, which(grepl('REGIONAL_sc[A-D]', SIM_SCENARIO))]	#
	if(length(tmp))#
	{#
		if(verbose)#
			cat('Found SIM_SCENARIO REGIONAL_sc[A-D]. Re-code as 150129_PANGEAsim_Regional_FirstObj_sc[A-D]_SIMULATED_SEQ. n=', length(tmp))#
		set(df, tmp, 'SIM_SCENARIO', df[tmp,paste(gsub('REGIONAL_','150129_PANGEAsim_Regional_FirstObj_',SIM_SCENARIO),'_SIMULATED_SEQ',sep='')])#
	}#
	tmp			<- df[, which(grepl('REGIONAL_sc[E-T]', SIM_SCENARIO))]	#
	if(length(tmp))#
	{#
		if(verbose)#
			cat('Found SIM_SCENARIO REGIONAL_sc[E-T]. Re-code as 150129_PANGEAsim_Regional_SecondObj_sc[E-T]_SIMULATED_DATEDTREE. n=', length(tmp))#
		set(df, tmp, 'SIM_SCENARIO', df[tmp,paste(gsub('REGIONAL_','150129_PANGEAsim_Regional_SecondObj_',SIM_SCENARIO),'_SIMULATED_DATEDTREE',sep='')])#
	}	#
	df			<- merge(df, df.sc, by='SIM_SCENARIO')		#
	#	check USED_GENES#
	set(df, NULL, 'USED_GENES', df[, tolower(gsub('\\s','',as.character(USED_GENES)))])#
	tmp			<- df[, which( !USED_GENES%in%c('pol','all') )]#
	if(length(tmp))#
		stop(paste('Found invalid USED_GENES', paste(df[tmp,USED_GENES], collapse=',')))#
	tmp			<- df[, which( is.na(USED_GENES) )]#
	if(length(tmp))#
		stop(paste('Found missing USED_GENES in rows', paste(tmp, collapse=',')))	#
	#	check OBJ_i#
	set(df, NULL, 'OBJ_i', df[, tolower(gsub('\\s','',as.character(OBJ_i)))])#
	set(df, df[, which(OBJ_i=='declining')], 'OBJ_i', 'decreasing')#
	tmp			<- df[, which( !is.na(OBJ_i) & !OBJ_i%in%c('stable','increasing','decreasing') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_i', paste(df[tmp,OBJ_i], collapse=',')))#
	tmp			<- df[, which( is.na(OBJ_i) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_i in rows', paste(tmp, collapse=',')))#
	##
	#	check OBJ_iv and update OBJ_iv: consider <15% 15-30% >30% rather than <10% etc if still old coding#
	##
	set(df, NULL, 'OBJ_iv', df[, tolower(gsub('\\s','',as.character(OBJ_iv)))])#
	tmp			<- df[, which( OBJ_iv%in%c('<10%','10-30%','10%-30%') )]#
	if(length(tmp))#
	{#
		if(verbose)#
			cat(paste('Found old coding to OBJ_iv', paste(df[tmp,OBJ_iv], collapse=',')))#
		tmp2		<- df[, which(is.na(OBJ_iv))]#
		stopifnot( df[, !any(!is.na(OBJ_iv) & is.na(OBJ_v))] )#
		set(df, df[, which(!is.na(OBJ_v))], 'OBJ_iv', NA_character_)#
		#	if OBJ_iv missing and OBJ_v provided, set automatically#
		tmp			<- df[, which(is.na(OBJ_iv) & !is.na(OBJ_v))]#
		if(length(tmp))#
			set(df, tmp, 'OBJ_iv', df[tmp, cut(OBJ_v, breaks=c(-Inf,0.15,0.3,Inf), labels=c('<15%','15%-30%','>30%'))])#
		set(df, tmp2, 'OBJ_iv', NA_character_)		#
	}#
	if(!length(tmp))#
		reset.OBJiv.conservative	<- 0		#nothing reset#
	tmp			<- df[, which( !is.na(OBJ_iv) & !OBJ_iv%in%c('<15%','15-30%','15%-30%','>30%') )]	#
	if(length(tmp))#
		stop(paste('Found invalid answers to OBJ_iv', paste(df[tmp,OBJ_iv], collapse=',')))#
	#	set OBJ_iv 15-30% to 15%-30%#
	tmp			<- df[, which( OBJ_iv=='15-30%' )]#
	set(df, tmp, 'OBJ_iv', '15%-30%')#
	tmp			<- df[, which( is.na(OBJ_iv) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_iv in rows', paste(tmp, collapse=',')))			#
	#	check OBJ_ii OBJ_v OBJ_vi#
	for(x in c('OBJ_ii','OBJ_v','OBJ_vi'))#
	{		#
		tmp	<- which(df[[x]]>1 | df[[x]]<0)#
		if(length(tmp))#
			stop(paste('Expect value in [0-1]. Found invalid numerical entry for',x,'in rows',paste(tmp, collapse=',')))#
		tmp	<- which(is.na(df[[x]]))#
		if(verbose & length(tmp))#
			cat(paste('\nFound missing value for',x,'in rows',paste(tmp, collapse=',')))#
	}#
	#	check OBJ_ii OBJ_iii OBJ_v OBJ_vi#
	for(x in c('OBJ_iii'))#
	{		#
		tmp	<- which(df[[x]]<=0)#
		if(length(tmp))#
			stop(paste('Expect value in [0-1]. Found invalid numerical entry for',x,'in rows',paste(tmp, collapse=',')))#
		tmp	<- which(is.na(df[[x]]))#
		if(verbose & length(tmp))#
			cat(paste('\nFound missing value for',x,'in rows',paste(tmp, collapse=',')))#
	}#
	#	check for duplicates#
	tmp			<- df[, list(CH= length(OBJ_i)), by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE')]#
	tmp			<- subset(tmp, CH!=1)#
	if(nrow(tmp))#
	{#
		print(tmp)#
		stop('Found duplicate submissions')#
	}#
	##
	#	check consistency of OBJ_i and OBJ_iii#
	##
	tmp			<- df[, which(OBJ_i=='stable' & abs(1-OBJ_iii)>0.1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i stable and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))#
	tmp			<- df[, which(OBJ_i=='increasing' & OBJ_iii<1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i increasing and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))#
	tmp			<- df[, which(OBJ_i=='decreasing' & OBJ_iii>1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i decreasing and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))	#
	#	check ESTIMATE#
	set(df, NULL, 'ESTIMATE', df[, tolower(gsub('\\s','',as.character(ESTIMATE)))])#
	tmp			<- df[, which( !ESTIMATE%in%c('central','lower95%','upper95%') )]#
	if(length(tmp))#
		stop(paste('Expect either "central", "lower95%", "upper95%". Found invalid ESTIMATE in rows', paste(tmp, collapse=',')))#
	tmp			<- df[, which( is.na(ESTIMATE) )]#
	if(length(tmp))#
		stop(paste('Found missing ESTIMATE in rows', paste(tmp, collapse=',')))		#
	##
	#	check if at least one estimate provided per row#
	##
	tmp			<- subset(df, ESTIMATE=='central')[, {#
				list(CH= all(is.na(c(OBJ_i, OBJ_ii, OBJ_iii, OBJ_iv, OBJ_v, OBJ_vi))))#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES')]#
	tmp			<- tmp[, which(CH)]#
	if(length(tmp))#
		stop('Found rows with no submitted answer, ',paste(tmp, collapse=','))#
	##
	#	remove NA rows confidence intervals#
	##
	tmp			<- df[, {#
				list(CH= all(is.na(c(OBJ_i, OBJ_ii, OBJ_iii, OBJ_iv, OBJ_v, OBJ_vi))))#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE')]#
	if(any(tmp[,CH]))#
	{#
		cat(paste('\nFound rows with no estimate. Removing rows',paste(tmp[,which(CH)], collapse=',')))#
		df		<- merge(df, subset(tmp, CH==FALSE), by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE'))#
		df[, CH:=NULL]#
	}#
	##
	#	check if central estimate provided#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | 'central'%in%ESTIMATE[ !is.na(x) ] )			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with no central answer for',x)#
	##
	#	check if lower and upper estimate when one is not missing#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | !'lower95%'%in%ESTIMATE[ !is.na(x) ]  |  ('lower95%'%in%ESTIMATE[ !is.na(x) ]&'upper95%'%in%ESTIMATE[ !is.na(x) ])	)			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with lower95% but no upper95%, or vice versa',x)#
	##
	#	check that lower < upper estimate when not missing#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | !'lower95%'%in%ESTIMATE[ !is.na(x) ]  |  ('lower95%'%in%ESTIMATE[ !is.na(x) ]&'upper95%'%in%ESTIMATE[ !is.na(x) ]&x[ESTIMATE=='lower95%']<=x[ESTIMATE=='upper95%'])	)			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi')]#
	for(x in c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with lower95% > upper95%',x)	#
	##
	#	check first objective for regional simulations#
	##
	df.sc		<- data.table(SIM_SCENARIO= paste('150129_PANGEAsim_Regional_FirstObj_sc',LETTERS[seq(1,4)],'_SIMULATED_SEQ',sep='') ) #
	tmp			<- unique( setdiff( df.sc[, SIM_SCENARIO], df[, SIM_SCENARIO] ) )#
	if(warn.all & length(tmp))#
		warning(paste('Found missing scenarios for first objective?',paste(tmp,collapse=',')))#
	##
	#	check second objective for regional simulations#
	##
	df.sc		<- data.table(SIM_SCENARIO= paste('150129_PANGEAsim_Regional_SecondObj_sc',LETTERS[seq(5,20)],'_SIMULATED_DATEDTREE',sep='') ) #
	tmp			<- unique( setdiff( df.sc[, SIM_SCENARIO], df[, SIM_SCENARIO] ) )#
	if(warn.all & length(tmp) & length(tmp)<nrow(df.sc))#
		warning(paste('Found only a subset of submissions for second objective? Not submitted:',paste(tmp,collapse=',')))	#
	##
	cat('\nPassed checks.\n')#
	##
	#	re-format#
	##
	for(x in c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi'))#
	{		#
		set(df, NULL, x, as.character(df[[x]]))#
	}#
	df	<- melt(df, measure.vars=which(grepl('OBJ',names(df))), variable.name="OBJ")#
	set(df, NULL, 'ESTIMATE', df[, gsub('%','',ESTIMATE)])#
	df	<- dcast.data.table(df, TEAM+SUBMISSION_DATE+SIM_SCENARIO+USED_GENES+OBJ~ESTIMATE,  value.var='value')#
	df	<- subset( df, !is.na(central) )	#
	#	be conservative on %Acute OBJ_i: set to NA if CIs overlap#
	if(reset.OBJiv.conservative & all(c('upper95','lower95')%in%colnames(df)))#
	{#
		df	<- merge(df, subset(df, OBJ=='OBJ_v'), by=c('TEAM','SUBMISSION_DATE','SIM_SCENARIO','USED_GENES'), all.x=1)#
		tmp	<- c( df[, which(OBJ.x=='OBJ_iv' & central.x=='<15%' & upper95.y>0.15)],#
				df[, which(OBJ.x=='OBJ_iv' & central.x=='15%-30%' & (upper95.y>0.3 | lower95.y<0.15))],#
				df[, which(OBJ.x=='OBJ_iv' & central.x=='>30%' & lower95.y<0.3)] )#
		cat(paste('\nSetting OBJ_iv to NA because confidence intervals of OBJ_v overlap boundaries, n=', length(tmp)))  #
		set(df, tmp, 'central.x', NA_character_)	#
		set(df, NULL, c('OBJ.y','central.y','upper95.y','lower95.y'), NULL)#
		setnames(df, c('OBJ.x','central.x','lower95.x','upper95.x'), c('OBJ','central','lower95','upper95'))	#
	}#
	setkey(df,  TEAM, SUBMISSION_DATE, SIM_SCENARIO, USED_GENES)#
	cat(paste('\nFound submissions for unique scenarios, n=', df[, length(unique(SIM_SCENARIO))]))#
	cat(paste('\nFound submissions for unique USED_GENES, n=', df[, length(unique(USED_GENES))]))#
	cat(paste('\nFound submissions for unique SIM_SCENARIO x USED_GENES, n=', nrow(unique(df))))#
	cat(paste('\nFound submissions for unique objectives, n=', df[, length(unique(OBJ))]))#
	cat(paste('\nFound total estimates, n=', nrow(df)))#
	if(!any('lower95'==names(df)))#
		df[, lower95:=NA_real_]#
	if(!any('upper95'==names(df)))#
		df[, upper95:=NA_real_]	#
	cat(paste('\nFound total estimates with confidence intervals, n=', nrow(subset(df, !is.na(lower95)))))#
	##
	df#
}#
#
read.submission.Feb2015<- function(file, verbose=1, warn.all=0, reset.OBJiv.conservative=1)#
{#
	require(data.table)#
	cat('\nThis is read.submission version 15-05-10.')#
	if(verbose)#
	{#
		cat('\nReminder of objectives\n(use verbose=0 to suppress this message)')#
		cat('\nOBJ_i\tDuring the evaluation period, was incidence stable, declining or increasing?\n\t\tAnswer: "stable", "declining", "increasing", or "NA"')#
		cat('\nOBJ_ii\tWhat is the annual % incidence in the last year of the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_iii\tComparing the last year of the evaluation period to the year preceding the evaluation period, what is the ratio in annual % incidence?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_iv\tWas the proportion of transmissions that originated from individuals in early HIV infection in the year preceding the evaluation period below 10%, between 10-30%, or above 30%?\n\t\tAnswer: "<10%", "10-30%", ">30%" or "NA"')#
		cat('\nOBJ_v\tWhat is the proportion of transmissions that originated from individuals in early HIV infection in the year preceding the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_vi\tWhat is the proportion of transmissions that originated from individuals in early HIV infection in the last year of the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\n\nPlease use:\nscenario names SIM_SCENARIO that correspond to the available file names\nUSED_GENES\teither "pol" or "all"')#
	}#
	cat('\nSkip first 22 rows that should contain comment rows starting with #.')#
	cat(paste('\nreading', file))#
	df	<- read.csv(file, stringsAsFactors=FALSE, comment.char="#", blank.lines.skip=TRUE, skip=22)#
	df	<- as.data.table(df)	#
	#	check column names#
	df.colnm	<- c( "TEAM", "SUBMISSION_DATE", "SIM_SCENARIO", "USED_GENES", "OBJ_i", "OBJ_ii", "OBJ_iii", "OBJ_iv", "OBJ_v", "OBJ_vi", "ESTIMATE" )#
	tmp			<- setdiff( df.colnm, names(df) )#
	if(length(tmp))#
		stop(paste('Found missing columns, ', paste(tmp, collapse=','), sep=''))#
	tmp			<- setdiff( names(df), df.colnm )#
	if(length(tmp))#
		warning(paste('Ignore extra columns, ', paste(tmp, collapse=','), sep=''))#
	df			<- df[, df.colnm, with=0]#
	##
	#	check columns#
	##
	#	check TEAM#
	if(df[, length(unique(TEAM))>1])#
		stop('Found more than one TEAM name.')#
	#	check SUBMISSION_DATE#
	if(df[, length(unique(SUBMISSION_DATE))>1])#
		stop('Found more than one SUBMISSION_DATE.')#
	#	check SIM_SCENARIO#
	df.sc		<- data.table(SIM_SCENARIO= c( 	paste('Vill_',sprintf("%02d",0:12),'_Feb2015_5yr',sep=''), #
					paste('Vill_',sprintf("%02d",c(0:1,4,6:7,9:12)),'_Feb2015',sep=''),#
					paste('Vill_',sprintf("%02d",c(2:3,5,8)),'_Feb2015_3yr',sep=''),#
					paste('150129_PANGEAsim_Regional_FirstObj_sc',LETTERS[seq(1,4)],'_SIMULATED_SEQ',sep=''),#
					paste('150129_PANGEAsim_Regional_SecondObj_sc',LETTERS[seq(5,20)],'_SIMULATED_DATEDTREE',sep='')												#
			)) #
	tmp			<- unique( setdiff( df[, SIM_SCENARIO], df.sc[, SIM_SCENARIO] ) )#
	if(length(tmp))#
		stop(paste('Found invalid scenarios',paste(tmp,collapse=',')))#
	df			<- merge(df, df.sc, by='SIM_SCENARIO')		#
	#	check USED_GENES#
	set(df, NULL, 'USED_GENES', df[, tolower(gsub('\\s','',as.character(USED_GENES)))])#
	tmp			<- df[, which( !USED_GENES%in%c('pol','all') )]#
	if(length(tmp))#
		stop(paste('Found invalid USED_GENES', paste(df[tmp,USED_GENES], collapse=',')))#
	tmp			<- df[, which( is.na(USED_GENES) )]#
	if(length(tmp))#
		stop(paste('Found missing USED_GENES in rows', paste(tmp, collapse=',')))	#
	#	check OBJ_i#
	set(df, NULL, 'OBJ_i', df[, tolower(gsub('\\s','',as.character(OBJ_i)))])#
	set(df, df[, which(OBJ_i=='declining')], 'OBJ_i', 'decreasing')#
	tmp			<- df[, which( !is.na(OBJ_i) & !OBJ_i%in%c('stable','increasing','decreasing') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_i', paste(df[tmp,OBJ_i], collapse=',')))#
	tmp			<- df[, which( is.na(OBJ_i) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_i in rows', paste(tmp, collapse=',')))		#
	#	check OBJ_iv#
	set(df, NULL, 'OBJ_iv', df[, tolower(gsub('\\s','',as.character(OBJ_iv)))])#
	tmp			<- df[, which( !is.na(OBJ_iv) & !OBJ_iv%in%c('<10%','10-30%','10%-30%','>30%') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_iv', paste(df[tmp,OBJ_iv], collapse=',')))#
	tmp			<- df[, which( OBJ_iv=='10-30%' )]#
	set(df, tmp, 'OBJ_iv', '10%-30%')#
	tmp			<- df[, which( is.na(OBJ_iv) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_iv in rows', paste(tmp, collapse=',')))			#
	#	check OBJ_ii OBJ_v OBJ_vi#
	for(x in c('OBJ_ii','OBJ_v','OBJ_vi'))#
	{		#
		tmp	<- which(df[[x]]>1 | df[[x]]<0)#
		if(length(tmp))#
			stop(paste('Expect value in [0-1]. Found invalid numerical entry for',x,'in rows',paste(tmp, collapse=',')))#
		tmp	<- which(is.na(df[[x]]))#
		if(verbose & length(tmp))#
			cat(paste('\nFound missing value for',x,'in rows',paste(tmp, collapse=',')))#
	}#
	#	check OBJ_ii OBJ_iii OBJ_v OBJ_vi#
	for(x in c('OBJ_iii'))#
	{		#
		tmp	<- which(df[[x]]<=0)#
		if(length(tmp))#
			stop(paste('Expect value in [0-1]. Found invalid numerical entry for',x,'in rows',paste(tmp, collapse=',')))#
		tmp	<- which(is.na(df[[x]]))#
		if(verbose & length(tmp))#
			cat(paste('\nFound missing value for',x,'in rows',paste(tmp, collapse=',')))#
	}#
	#	check for duplicates#
	tmp			<- df[, list(CH= length(OBJ_i)), by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE')]#
	tmp			<- subset(tmp, CH!=1)#
	if(nrow(tmp))#
	{#
		print(tmp)#
		stop('Found duplicate submissions')#
	}#
	##
	#	check consistency of OBJ_i and OBJ_iii#
	##
	tmp			<- df[, which(OBJ_i=='stable' & abs(1-OBJ_iii)>0.1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i stable and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))#
	tmp			<- df[, which(OBJ_i=='increasing' & OBJ_iii<1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i increasing and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))#
	tmp			<- df[, which(OBJ_i=='decreasing' & OBJ_iii>1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i decreasing and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))	#
	##
	#	updated OBJ_iv: consider <15% 15-30% >30%#
	##
	tmp2		<- df[, which(is.na(OBJ_iv))]#
	stopifnot( df[, !any(!is.na(OBJ_iv) & is.na(OBJ_v))] )#
	set(df, df[, which(!is.na(OBJ_v))], 'OBJ_iv', NA_character_)#
	#	if OBJ_iv missing and OBJ_v provided, set automatically#
	tmp			<- df[, which(is.na(OBJ_iv) & !is.na(OBJ_v))]#
	if(length(tmp))#
		set(df, tmp, 'OBJ_iv', df[tmp, cut(OBJ_v, breaks=c(-Inf,0.15,0.3,Inf), labels=c('<15%','15%-30%','>30%'))])#
	set(df, tmp2, 'OBJ_iv', NA_character_)#
	#	check ESTIMATE#
	set(df, NULL, 'ESTIMATE', df[, tolower(gsub('\\s','',as.character(ESTIMATE)))])#
	tmp			<- df[, which( !ESTIMATE%in%c('central','lower95%','upper95%') )]#
	if(length(tmp))#
		stop(paste('Expect either "central", "lower95%", "upper95%". Found invalid ESTIMATE in rows', paste(tmp, collapse=',')))#
	tmp			<- df[, which( is.na(ESTIMATE) )]#
	if(length(tmp))#
		stop(paste('Found missing ESTIMATE in rows', paste(tmp, collapse=',')))		#
	##
	#	check if at least one estimate provided per row#
	##
	tmp			<- subset(df, ESTIMATE=='central')[, {#
				list(CH= all(is.na(c(OBJ_i, OBJ_ii, OBJ_iii, OBJ_iv, OBJ_v, OBJ_vi))))#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES')]#
	tmp			<- tmp[, which(CH)]#
	if(length(tmp))#
		stop('Found rows with no submitted answer, ',paste(tmp, collapse=','))#
	##
	#	remove NA rows confidence intervals#
	##
	tmp			<- df[, {#
				list(CH= all(is.na(c(OBJ_i, OBJ_ii, OBJ_iii, OBJ_iv, OBJ_v, OBJ_vi))))#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE')]#
	if(any(tmp[,CH]))#
	{#
		cat(paste('\nFound rows with no estimate. Removing rows',paste(tmp[,which(CH)], collapse=',')))#
		df		<- merge(df, subset(tmp, CH==FALSE), by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE'))#
		df[, CH:=NULL]#
	}#
	##
	#	check if central estimate provided#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | 'central'%in%ESTIMATE[ !is.na(x) ] )			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with no central answer for',x)#
	##
	#	check if lower and upper estimate when one is not missing#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | !'lower95%'%in%ESTIMATE[ !is.na(x) ]  |  ('lower95%'%in%ESTIMATE[ !is.na(x) ]&'upper95%'%in%ESTIMATE[ !is.na(x) ])	)			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with lower95% but no upper95%, or vice versa',x)#
	##
	#	check that lower < upper estimate when not missing#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | !'lower95%'%in%ESTIMATE[ !is.na(x) ]  |  ('lower95%'%in%ESTIMATE[ !is.na(x) ]&'upper95%'%in%ESTIMATE[ !is.na(x) ]&x[ESTIMATE=='lower95%']<=x[ESTIMATE=='upper95%'])	)			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi')]#
	for(x in c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with lower95% > upper95%',x)	#
	##
	#	check first objective for regional simulations#
	##
	df.sc		<- data.table(SIM_SCENARIO= paste('150129_PANGEAsim_Regional_FirstObj_sc',LETTERS[seq(1,4)],'_SIMULATED_SEQ',sep='') ) #
	tmp			<- unique( setdiff( df.sc[, SIM_SCENARIO], df[, SIM_SCENARIO] ) )#
	if(warn.all & length(tmp))#
		warning(paste('Found missing scenarios for first objective?',paste(tmp,collapse=',')))#
	##
	#	check second objective for regional simulations#
	##
	df.sc		<- data.table(SIM_SCENARIO= paste('150129_PANGEAsim_Regional_SecondObj_sc',LETTERS[seq(5,20)],'_SIMULATED_DATEDTREE',sep='') ) #
	tmp			<- unique( setdiff( df.sc[, SIM_SCENARIO], df[, SIM_SCENARIO] ) )#
	if(warn.all & length(tmp) & length(tmp)<nrow(df.sc))#
		warning(paste('Found only a subset of submissions for second objective? Not submitted:',paste(tmp,collapse=',')))	#
	##
	cat('\nPassed checks.\n')#
	##
	#	re-format#
	##
	for(x in c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi'))#
	{		#
		set(df, NULL, x, as.character(df[[x]]))#
	}#
	df	<- melt(df, measure.vars=which(grepl('OBJ',names(df))), variable.name="OBJ")#
	set(df, NULL, 'ESTIMATE', df[, gsub('%','',ESTIMATE)])#
	df	<- dcast.data.table(df, TEAM+SUBMISSION_DATE+SIM_SCENARIO+USED_GENES+OBJ~ESTIMATE,  value.var='value')#
	df	<- subset( df, !is.na(central) )	#
	#	be conservative on %Acute OBJ_i: set to NA if CIs overlap#
	if(reset.OBJiv.conservative & all(c('upper95','lower95')%in%colnames(df)))#
	{#
		df	<- merge(df, subset(df, OBJ=='OBJ_v'), by=c('TEAM','SUBMISSION_DATE','SIM_SCENARIO','USED_GENES'), all.x=1)#
		tmp	<- c( df[, which(OBJ.x=='OBJ_iv' & central.x=='<15%' & upper95.y>0.15)],#
				df[, which(OBJ.x=='OBJ_iv' & central.x=='15%-30%' & (upper95.y>0.3 | lower95.y<0.15))],#
				df[, which(OBJ.x=='OBJ_iv' & central.x=='>30%' & lower95.y<0.3)] )#
		cat(paste('\nSetting OBJ_iv to NA because confidence intervals of OBJ_v overlap boundaries, n=', length(tmp)))  #
		set(df, tmp, 'central.x', NA_character_)	#
		set(df, NULL, c('OBJ.y','central.y','upper95.y','lower95.y'), NULL)#
		setnames(df, c('OBJ.x','central.x','lower95.x','upper95.x'), c('OBJ','central','lower95','upper95'))	#
	}#
	setkey(df,  TEAM, SUBMISSION_DATE, SIM_SCENARIO, USED_GENES)#
	cat(paste('\nFound submissions for unique scenarios, n=', df[, length(unique(SIM_SCENARIO))]))#
	cat(paste('\nFound submissions for unique USED_GENES, n=', df[, length(unique(USED_GENES))]))#
	cat(paste('\nFound submissions for unique SIM_SCENARIO x USED_GENES, n=', nrow(unique(df))))#
	cat(paste('\nFound submissions for unique objectives, n=', df[, length(unique(OBJ))]))#
	cat(paste('\nFound total estimates, n=', nrow(df)))#
	if(!any('lower95'==names(df)))#
		df[, lower95:=NA_real_]#
	if(!any('upper95'==names(df)))#
		df[, upper95:=NA_real_]	#
	cat(paste('\nFound total estimates with confidence intervals, n=', nrow(subset(df, !is.na(lower95)))))#
	##
	df#
}#
#
read.submission.May2015<- function(file, verbose=1, warn.all=0)#
{#
	require(data.table)#
	cat('\nThis is read.submission version 15-08-12.')#
	if(verbose)#
	{#
		cat('\nReminder of objectives\n(use verbose=0 to suppress this message)')#
		cat('\nOBJ_i\tDuring the evaluation period, was incidence stable, declining or increasing?\n\t\tAnswer: "stable", "declining", "increasing", or "NA"')#
		cat('\nOBJ_ii\tWhat is the annual % incidence in the last year of the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_iii\tComparing the last year of the evaluation period to the year preceding the evaluation period, what is the ratio in annual % incidence?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_iv\tWas the proportion of transmissions that originated from individuals in early HIV infection in the year preceding the evaluation period below 10%, between 10-30%, or above 30%?\n\t\tAnswer: "<10%", "10-30%", ">30%" or "NA"')#
		cat('\nOBJ_v\tWhat is the proportion of transmissions that originated from individuals in early HIV infection in the year preceding the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\nOBJ_vi\tWhat is the proportion of transmissions that originated from individuals in early HIV infection in the last year of the evaluation period?\n\t\tAnswer: numerical or "NA"')#
		cat('\n\nPlease use:\nscenario names SIM_SCENARIO that correspond to the available file names\nUSED_GENES\teither "pol" or "all"')#
		cat('\nSkip first 22 rows that should contain comment rows starting with #.')#
	}	#
	cat(paste('\nreading', file))#
	df	<- read.csv(file, stringsAsFactors=FALSE, comment.char="#", blank.lines.skip=TRUE, skip=22)#
	df	<- as.data.table(df)	#
	#	check column names#
	df.colnm	<- c( "TEAM", "SUBMISSION_DATE", "SIM_SCENARIO", "USED_GENES", "OBJ_i", "OBJ_ii", "OBJ_iii", "OBJ_iv_3m", "OBJ_v_3m", "OBJ_vi_3m", "OBJ_iv_6m", "OBJ_v_6m", "OBJ_vi_6m", "OBJ_iv_12m", "OBJ_v_12m", "OBJ_vi_12m", "ESTIMATE" )#
	tmp			<- setdiff( df.colnm, names(df) )#
	if(length(tmp))#
		stop(paste('Found missing columns, ', paste(tmp, collapse=','), sep=''))#
	tmp			<- setdiff( names(df), df.colnm )#
	if(length(tmp))#
		warning(paste('Ignore extra columns, ', paste(tmp, collapse=','), sep=''))#
	df			<- df[, df.colnm, with=0]#
	##
	#	check columns#
	##
	#	check TEAM#
	if(df[, length(unique(TEAM))>1])#
		stop('Found more than one TEAM name.')#
	#	check SUBMISSION_DATE#
	if(df[, length(unique(SUBMISSION_DATE))>1])#
		stop('Found more than one SUBMISSION_DATE.')#
	#	check SIM_SCENARIO#
	df.sc		<- data.table(SIM_SCENARIO= c( 	paste('Vill_',sprintf("%02d",0:12),'_Feb2015_5yr',sep=''), #
												paste('Vill_',sprintf("%02d",c(0:1,4,6:7,9:12)),'_Feb2015',sep=''),#
												paste('Vill_',sprintf("%02d",c(2:3,5,8)),'_Feb2015_3yr',sep=''),#
												paste('150129_PANGEAsim_Regional_FirstObj_sc',LETTERS[seq(1,4)],'_SIMULATED_SEQ',sep=''),#
												paste('150129_PANGEAsim_Regional_SecondObj_sc',LETTERS[seq(5,20)],'_SIMULATED_DATEDTREE',sep='')												#
												)) #
	tmp			<- unique( setdiff( df[, SIM_SCENARIO], df.sc[, SIM_SCENARIO] ) )#
	if(length(tmp))#
		stop(paste('Found invalid scenarios',paste(tmp,collapse=',')))#
	df			<- merge(df, df.sc, by='SIM_SCENARIO')		#
	#	check USED_GENES#
	set(df, NULL, 'USED_GENES', df[, tolower(gsub('\\s','',as.character(USED_GENES)))])#
	tmp			<- df[, which( !USED_GENES%in%c('pol','all') )]#
	if(length(tmp))#
		stop(paste('Found invalid USED_GENES', paste(df[tmp,USED_GENES], collapse=',')))#
	tmp			<- df[, which( is.na(USED_GENES) )]#
	if(length(tmp))#
		stop(paste('Found missing USED_GENES in rows', paste(tmp, collapse=',')))	#
	#	check OBJ_i#
	set(df, NULL, 'OBJ_i', df[, tolower(gsub('\\s','',as.character(OBJ_i)))])#
	set(df, df[, which(OBJ_i=='declining')], 'OBJ_i', 'decreasing')#
	tmp			<- df[, which( !is.na(OBJ_i) & !OBJ_i%in%c('stable','increasing','decreasing') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_i', paste(df[tmp,OBJ_i], collapse=',')))#
	tmp			<- df[, which( is.na(OBJ_i) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_i in rows', paste(tmp, collapse=',')))		#
	#	check OBJ_iv_3m#
	set(df, NULL, 'OBJ_iv_3m', df[, tolower(gsub('\\s','',as.character(OBJ_iv_3m)))])#
	tmp			<- df[, which( !is.na(OBJ_iv_3m) & !OBJ_iv_3m%in%c('<15%','15-30%','15%-30%','>30%') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_iv_3m', paste(df[tmp,OBJ_iv_3m], collapse=',')))#
	#	check OBJ_iv_6m#
	set(df, NULL, 'OBJ_iv_6m', df[, tolower(gsub('\\s','',as.character(OBJ_iv_6m)))])#
	tmp			<- df[, which( !is.na(OBJ_iv_6m) & !OBJ_iv_6m%in%c('<15%','15-30%','15%-30%','>30%') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_iv_6m', paste(df[tmp,OBJ_iv_6m], collapse=',')))#
	#	check OBJ_iv_12m#
	set(df, NULL, 'OBJ_iv_12m', df[, tolower(gsub('\\s','',as.character(OBJ_iv_12m)))])#
	tmp			<- df[, which( !is.na(OBJ_iv_12m) & !OBJ_iv_12m%in%c('<15%','15-30%','15%-30%','>30%') )]#
	if(length(tmp))#
		stop(paste('Found invalid answer to OBJ_iv_12m', paste(df[tmp,OBJ_iv_12m], collapse=',')))#
	#	#
	set(df, df[, which( OBJ_iv_3m=='15-30%' )], 'OBJ_iv_3m', '15%-30%')#
	set(df, df[, which( OBJ_iv_6m=='15-30%' )], 'OBJ_iv_6m', '15%-30%')#
	set(df, df[, which( OBJ_iv_12m=='15-30%' )], 'OBJ_iv_12m', '15%-30%')#
	tmp			<- df[, which( is.na(OBJ_iv_3m) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_iv_3m in rows', paste(tmp, collapse=',')))#
	tmp			<- df[, which( is.na(OBJ_iv_6m) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_iv_6m in rows', paste(tmp, collapse=',')))			#
	tmp			<- df[, which( is.na(OBJ_iv_12m) )]#
	if(length(tmp))#
		cat(paste('\nFound missing answer to OBJ_iv_12m in rows', paste(tmp, collapse=',')))			#
	#	check OBJ_ii OBJ_v_Xm OBJ_vi_Xm#
	for(x in c('OBJ_ii','OBJ_v_3m','OBJ_vi_3m','OBJ_v_6m','OBJ_vi_6m','OBJ_v_12m','OBJ_vi_12m'))#
	{		#
		tmp	<- which(df[[x]]>1 | df[[x]]<0)#
		if(length(tmp))#
			stop(paste('Expect value in [0-1]. Found invalid numerical entry for',x,'in rows',paste(tmp, collapse=',')))#
		tmp	<- which(is.na(df[[x]]))#
		if(verbose & length(tmp))#
			cat(paste('\nFound missing value for',x,'in rows',paste(tmp, collapse=',')))#
	}#
	#	check OBJ_ii OBJ_iii OBJ_v OBJ_vi#
	for(x in c('OBJ_iii'))#
	{		#
		tmp	<- which(df[[x]]<=0)#
		if(length(tmp))#
			stop(paste('Expect value in [0-1]. Found invalid numerical entry for',x,'in rows',paste(tmp, collapse=',')))#
		tmp	<- which(is.na(df[[x]]))#
		if(verbose & length(tmp))#
			cat(paste('\nFound missing value for',x,'in rows',paste(tmp, collapse=',')))#
	}#
	#	check for duplicates#
	tmp			<- df[, list(CH= length(OBJ_i)), by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE')]#
	tmp			<- subset(tmp, CH!=1)#
	if(nrow(tmp))#
	{#
		print(tmp)#
		stop('Found duplicate submissions')#
	}#
	##
	#	check consistency of OBJ_i and OBJ_iii#
	##
	tmp			<- df[, which(OBJ_i=='stable' & abs(1-OBJ_iii)>0.1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i stable and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))#
	tmp			<- df[, which(OBJ_i=='increasing' & OBJ_iii<1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i increasing and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))#
	tmp			<- df[, which(OBJ_i=='decreasing' & OBJ_iii>1)]#
	if(length(tmp))#
		warning(paste('\nPlease check: Potential conflict between OBJ_i decreasing and OBJ_iii for scenario',paste(df[tmp,SIM_SCENARIO], collapse=', ')))	#
	##
	#	updated OBJ_iv: consider <15% 15-30% >30%#
	##
	#tmp2		<- df[, which(is.na(OBJ_iv))]#
	#stopifnot( df[, !any(!is.na(OBJ_iv) & is.na(OBJ_v))] )#
	#set(df, df[, which(!is.na(OBJ_v))], 'OBJ_iv', NA_character_)#
	#	if OBJ_iv missing and OBJ_v provided, set automatically#
	#tmp			<- df[, which(is.na(OBJ_iv) & !is.na(OBJ_v))]#
	#if(length(tmp))#
	#	set(df, tmp, 'OBJ_iv', df[tmp, cut(OBJ_v, breaks=c(-Inf,0.15,0.3,Inf), labels=c('<15%','15%-30%','>30%'))])#
	#set(df, tmp2, 'OBJ_iv', NA_character_)#
	#	check ESTIMATE#
	set(df, NULL, 'ESTIMATE', df[, tolower(gsub('\\s','',as.character(ESTIMATE)))])#
	tmp			<- df[, which( !ESTIMATE%in%c('central','lower95%','upper95%') )]#
	if(length(tmp))#
		stop(paste('Expect either "central", "lower95%", "upper95%". Found invalid ESTIMATE in rows', paste(tmp, collapse=',')))#
	tmp			<- df[, which( is.na(ESTIMATE) )]#
	if(length(tmp))#
		stop(paste('Found missing ESTIMATE in rows', paste(tmp, collapse=',')))		#
	##
	#	check if at least one estimate provided per row#
	##
	tmp			<- subset(df, ESTIMATE=='central')[, {#
							list(CH= all(is.na(c(OBJ_i, OBJ_ii, OBJ_iii, OBJ_iv_3m, OBJ_v_3m, OBJ_vi_3m, OBJ_iv_6m, OBJ_v_6m, OBJ_vi_6m, OBJ_iv_12m, OBJ_v_12m, OBJ_vi_12m))))#
						}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES')]#
	tmp			<- tmp[, which(CH)]#
	if(length(tmp))#
		stop('Found rows with no submitted answer, ',paste(tmp, collapse=','))#
	##
	#	remove NA rows confidence intervals#
	##
	tmp			<- df[, {#
							list(CH= all(is.na(c(OBJ_i, OBJ_ii, OBJ_iii, OBJ_iv_3m, OBJ_v_3m, OBJ_vi_3m, OBJ_iv_6m, OBJ_v_6m, OBJ_vi_6m, OBJ_iv_12m, OBJ_v_12m, OBJ_vi_12m))))#
						}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE')]#
	if(any(tmp[,CH]))#
	{#
		cat(paste('\nFound rows with no estimate. Removing rows',paste(tmp[,which(CH)], collapse=',')))#
		df		<- merge(df, subset(tmp, CH==FALSE), by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES','ESTIMATE'))#
		df[, CH:=NULL]#
	}#
	##
	#	check if central estimate provided#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | 'central'%in%ESTIMATE[ !is.na(x) ] )			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv_3m','OBJ_v_3m','OBJ_vi_3m','OBJ_iv_6m','OBJ_v_6m','OBJ_vi_6m','OBJ_iv_12m','OBJ_v_12m','OBJ_vi_12m')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv_3m','OBJ_v_3m','OBJ_vi_3m','OBJ_iv_6m','OBJ_v_6m','OBJ_vi_6m','OBJ_iv_12m','OBJ_v_12m','OBJ_vi_12m'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with no central answer for',x)#
	##
	#	check if lower and upper estimate when one is not missing#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | !'lower95%'%in%ESTIMATE[ !is.na(x) ]  |  ('lower95%'%in%ESTIMATE[ !is.na(x) ]&'upper95%'%in%ESTIMATE[ !is.na(x) ])	)			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv_3m','OBJ_v_3m','OBJ_vi_3m','OBJ_iv_6m','OBJ_v_6m','OBJ_vi_6m','OBJ_iv_12m','OBJ_v_12m','OBJ_vi_12m')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv_3m','OBJ_v_3m','OBJ_vi_3m','OBJ_iv_6m','OBJ_v_6m','OBJ_vi_6m','OBJ_iv_12m','OBJ_v_12m','OBJ_vi_12m'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with lower95% but no upper95%, or vice versa',x)#
	##
	#	check that lower < upper estimate when not missing#
	##
	tmp			<- df[, {#
				lapply( .SD, function(x) all(is.na(ESTIMATE[ x ])) | !'lower95%'%in%ESTIMATE[ !is.na(x) ]  |  ('lower95%'%in%ESTIMATE[ !is.na(x) ]&'upper95%'%in%ESTIMATE[ !is.na(x) ]&x[ESTIMATE=='lower95%']<=x[ESTIMATE=='upper95%'])	)			#
			}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES'), .SDcols=c('ESTIMATE','OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv_3m','OBJ_v_3m','OBJ_vi_3m','OBJ_iv_6m','OBJ_v_6m','OBJ_vi_6m','OBJ_iv_12m','OBJ_v_12m','OBJ_vi_12m')]#
	for(x in c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv_3m','OBJ_v_3m','OBJ_vi_3m','OBJ_iv_6m','OBJ_v_6m','OBJ_vi_6m','OBJ_iv_12m','OBJ_v_12m','OBJ_vi_12m'))#
		if(!all(tmp[[x]]))#
			stop('Found scenarios with lower95% > upper95%',x)#
	##
	#	check that 3m<6m#
	##
	tmp			<- df[, which(!is.na(OBJ_v_3m) & !is.na(OBJ_v_6m) & ESTIMATE=='central')]#
	if(length(tmp))#
		invisible(df[tmp,][,{#
					if(OBJ_v_3m>OBJ_v_6m)#
						stop( '\nFound OBJ_v_3m>OBJ_v_6m', paste(TEAM, SIM_SCENARIO, SUBMISSION_DATE, USED_GENES, collapse=''))#
				}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES')])#
	##
	#	check that 6m<12m#
	##
	tmp			<- df[, which(!is.na(OBJ_v_6m) & !is.na(OBJ_v_12m) & ESTIMATE=='central')]#
	if(length(tmp))#
		invisible(df[tmp,][,{#
							if(OBJ_v_6m>OBJ_v_12m)#
								stop( '\nFound OBJ_v_6m>OBJ_v_12m', paste(TEAM, SIM_SCENARIO, SUBMISSION_DATE, USED_GENES, collapse=''))#
						}, by=c('TEAM','SIM_SCENARIO','SUBMISSION_DATE','USED_GENES')])#
	##
	#	check first objective for regional simulations#
	##
	df.sc		<- data.table(SIM_SCENARIO= paste('150129_PANGEAsim_Regional_FirstObj_sc',LETTERS[seq(1,4)],'_SIMULATED_SEQ',sep='') ) #
	tmp			<- unique( setdiff( df.sc[, SIM_SCENARIO], df[, SIM_SCENARIO] ) )#
	if(warn.all & length(tmp))#
		warning(paste('Found missing scenarios for first objective?',paste(tmp,collapse=',')))#
	##
	#	check second objective for regional simulations#
	##
	df.sc		<- data.table(SIM_SCENARIO= paste('150129_PANGEAsim_Regional_SecondObj_sc',LETTERS[seq(5,20)],'_SIMULATED_DATEDTREE',sep='') ) #
	tmp			<- unique( setdiff( df.sc[, SIM_SCENARIO], df[, SIM_SCENARIO] ) )#
	if(warn.all & length(tmp) & length(tmp)<nrow(df.sc))#
		warning(paste('Found only a subset of submissions for second objective? Not submitted:',paste(tmp,collapse=',')))	#
	##
	cat('\nPassed checks.\n')#
	##
	#	re-format#
	##
	for(x in c('OBJ_ii','OBJ_iii','OBJ_v_3m','OBJ_vi_3m','OBJ_v_6m','OBJ_vi_6m','OBJ_v_12m','OBJ_vi_12m'))#
	{		#
		set(df, NULL, x, as.character(df[[x]]))#
	}#
	#	set 'OBJ_v_3m' to 'OBJ_v' etc#
	tmp	<- colnames(df)[ grepl('3m', colnames(df))]#
	setnames(df, tmp, gsub('_*3m','',tmp))#
	df	<- data.table:::melt.data.table(df, measure.vars=which(grepl('OBJ',names(df))), variable.name="OBJ")#
	set(df, NULL, 'ESTIMATE', df[, gsub('%','',ESTIMATE)])#
	df	<- dcast.data.table(df, TEAM+SUBMISSION_DATE+SIM_SCENARIO+USED_GENES+OBJ~ESTIMATE,  value.var='value')#
	df	<- subset( df, !is.na(central) )	#
	setkey(df,  TEAM, SUBMISSION_DATE, SIM_SCENARIO, USED_GENES)#
	cat(paste('\nFound submissions for unique scenarios, n=', df[, length(unique(SIM_SCENARIO))]))#
	cat(paste('\nFound submissions for unique USED_GENES, n=', df[, length(unique(USED_GENES))]))#
	cat(paste('\nFound submissions for unique SIM_SCENARIO x USED_GENES, n=', nrow(unique(df))))#
	cat(paste('\nFound submissions for unique objectives, n=', df[, length(unique(OBJ))]))#
	cat(paste('\nFound total estimates, n=', nrow(df)))#
	if(!any('lower95'==names(df)))#
		df[, lower95:=NA_real_]#
	if(!any('upper95'==names(df)))#
		df[, upper95:=NA_real_]	#
	cat(paste('\nFound total estimates with confidence intervals, n=', nrow(subset(df, !is.na(lower95)))))#
	##
	df#
}
require(RColorBrewer)#
	dfa		<- project.PANGEA.TEST.pipeline.Aug2015.evaluate.read()#
	#	check for updated submissions, and keep #
	dfa		<- project.PANGEA.TEST.pipeline.Aug2015.keep.most.recent.submission(dfa, format='%d.%m.%Y')
outdir	<- '~/Dropbox (Infectious Disease)/PANGEAHIVsim_internal/documents/external/2015_08_results/results'#
	save(dfa, file=paste(outdir,'/submissions.R',sep=''))#
	load(paste(outdir,'/submissions.R',sep=''))#
	#	add objective legend#
	dfa		<- merge(dfa, data.table(USED_GENES=c('pol','all'), USED_GENES_L=c('pol gene','pol+gag+env\ngenome') ), by='USED_GENES')#
	set(dfa, NULL, 'TEAM', dfa[, factor(TEAM)])#
	tmp		<- data.table( 	OBJ=	c('OBJ_i','OBJ_ii','OBJ_iii','OBJ_iv','OBJ_v','OBJ_vi'),#
			OBJ_L=	c('Incidence\nTrend', '%Incidence', 'Incidence\nreduction', '%Acute Ctgr\n(baseline)', '%Acute\n(baseline)', '%Acute\n(endpoint)'))#
	set(tmp, NULL, 'OBJ_L2', tmp[, factor(OBJ_L, levels=OBJ_L, labels=OBJ_L)])#
	set(tmp, NULL, 'OBJ_L', tmp[, factor(OBJ_L, levels=rev(OBJ_L), labels=rev(OBJ_L))])#
	dfa		<- merge(dfa, tmp, by='OBJ')#
	#	add data legend#
	dfa[, DATA_T2:='NA_character_']#
	set(dfa, dfa[, which(DATA_T=='seq')], 'DATA_T2', 'using\nsequences')#
	set(dfa, dfa[, which(DATA_T=='phy')], 'DATA_T2', 'using\ntrue tree')#
	set(dfa, NULL, 'DATA_T2', dfa[, factor(DATA_T2, levels=rev(c('using\nsequences','using\ntrue tree')), labels=rev(c('using\nsequences','using\ntrue tree')))])		#
	#	add scenario type#
	set(dfa, NULL, 'DATA_T', dfa[, factor(DATA_T, levels=c('seq','phy'), labels=c('seq','phy'))])#
	set(dfa, NULL, 'INT_T', dfa[, factor(INT_T, levels=c('fast','slow','none'), labels=c('fast','slow','none'))])#
	set(dfa, NULL, 'AC_T', dfa[, factor(AC_T, levels=c('low','high'), labels=c('low','high'))])#
	set(dfa, NULL, 'IMPRT', dfa[, factor(IMPRT*100, levels=c(0,2,5,20), labels=paste(c(0,2,5,20),'%',sep=''))])#
	set(dfa, NULL, 'SMPL_C', dfa[, factor(SMPL_C*100, levels=c(8, 16, 30, 60), labels=paste(c(8, 16, 30, 60),'%',sep=''))])#
	set(dfa, NULL, 'SMPL_D', dfa[, factor(SMPL_D, levels=c(5,3), labels=c(5,3))])	#
	set(dfa, dfa[, which(SMPL_M=='overs')], 'SMPL_M', 'much')#
	set(dfa, dfa[, which(SMPL_M=='extrs')], 'SMPL_M', 'extreme')#
	set(dfa, dfa[, which(is.na(SMPL_M))], 'SMPL_M', 'extreme')#
	set(dfa, NULL, 'SMPL_M', dfa[, factor(SMPL_M, levels=c('much','extreme'), labels=c('much','extreme'))])	#
	tmp		<- unique(subset( dfa, select=c(DATAT_L, SC_RND, DATA_T, SC, AC_T, INT_T, IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D) ))#
	setkey(tmp, DATAT_L, AC_T, INT_T, DATA_T, IMPRT, SMPL_C, SMPL_D, SMPL_M)#
	tmp[, SCENARIO_L:= paste('%AC=',AC_T,' ARTup=',INT_T,' EXT=',IMPRT,'\n',DATA_T,' ',SMPL_N,' ',SMPL_C,' ',SMPL_D,' ',SMPL_M, ' (',SC_RND,')',sep='')]#
	dfa		<- merge(dfa, subset(tmp, select=c(SC_RND, SCENARIO_L)), by='SC_RND')#
	#	add intervention legend#
	dfa[, INT_L:= dfa[, paste('ART scale up\n',as.character(INT_T),sep='')]]#
	setkey(dfa, INT_T)#
	set(dfa, NULL, 'INT_L', dfa[, factor(INT_L, levels=dfa[, unique(INT_L)], labels=dfa[, unique(INT_L)])])#
	#	add %Acute legend#
	dfa[, AC_L:= dfa[, paste('%Acute\n',as.character(AC_T),sep='')]]#
	setkey(dfa, AC_T)#
	set(dfa, NULL, 'AC_L', dfa[, factor(AC_L, levels=dfa[, unique(AC_L)], labels=dfa[, unique(AC_L)])])#
	#	get data.table of data sets ~ all primary and secondary objectives#
	dfd		<- subset(dfa, select=c(SC_RND, DATA_T, DATAT_L, AC_T, INT_T, IMPRT, SMPL_N, SMPL_C,  SMPL_M, SMPL_D))#
	setkey(dfd, DATAT_L, INT_T, AC_T, DATA_T, IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D)#
	dfd		<- unique(dfd)#
	#	Primary Objectives, on sequences #
	tmp		<- data.table(expand.grid(ANA='Pr_Seq', SC_RND=subset(dfd, DATA_T=='seq')[, SC_RND], stringsAsFactors=FALSE))#
	dfr		<- copy(tmp)#
	#	Primary Objectives, on trees#
	tmp		<- subset(dfd, DATA_T=='phy' & SMPL_D==5 & (DATAT_L=='Regional' & IMPRT=='5%' & SMPL_M=='much' & SMPL_N==1600 | DATAT_L=='Village' & SMPL_C=='30%')  )#
	dfr		<- rbind(dfr, data.table(expand.grid(ANA='Pr_Phy', SC_RND=tmp[, SC_RND], stringsAsFactors=FALSE)))#
	#	Secondary: sequence coverage#
	tmp		<- subset(dfd, DATA_T=='phy' & SMPL_D==5 & INT_T!='none' & (DATAT_L=='Regional' & IMPRT=='5%' & SMPL_M=='much' | DATAT_L=='Village')  )#
	dfr		<- rbind(dfr, data.table(expand.grid(ANA='Sc_SeqCoverage_Phy', SC_RND=tmp[, SC_RND], stringsAsFactors=FALSE)))#
	#	Secondary: imports#
	tmp		<- subset(dfd, DATA_T=='phy' & SMPL_D==5 & INT_T!='none' & AC_T=='high' & (DATAT_L=='Regional' & SMPL_M=='much' & SMPL_C=='8%')  )#
	dfr		<- rbind(dfr, data.table(expand.grid(ANA='Sc_Imports_Phy', SC_RND=tmp[, SC_RND], stringsAsFactors=FALSE)))#
	#	Secondary: focussed sampling#
	tmp		<- subset(dfd, DATA_T=='phy' & SMPL_D==5 & INT_T!='none' & AC_T=='low' & SMPL_C=='8%' & IMPRT=='5%' & DATAT_L=='Regional'  )#
	dfr		<- rbind(dfr, data.table(expand.grid(ANA='Sc_SmplFc_Phy', SC_RND=tmp[, SC_RND], stringsAsFactors=FALSE)))#
	#	Secondary: sampling duration#
	tmp		<- subset(dfd, DATA_T=='phy' & INT_T!='none' & DATAT_L=='Regional' & SMPL_M=='much' & SMPL_C=='8%' & IMPRT=='5%' & INT_T=='fast')#
	dfr		<- rbind(dfr, data.table(expand.grid(ANA='Sc_SmplD_Phy', SC_RND=tmp[, SC_RND], stringsAsFactors=FALSE)))#
	#	merge with dfa#
	dfr		<- dcast.data.table(dfr, SC_RND~ANA, value.var='SC_RND')#
	set(dfr, NULL, 'Pr_Phy', dfr[, as.numeric(!is.na(Pr_Phy))])	#
	set(dfr, NULL, 'Pr_Seq', dfr[, as.numeric(!is.na(Pr_Seq))])	#
	set(dfr, NULL, 'Sc_Imports_Phy', dfr[, as.numeric(!is.na(Sc_Imports_Phy))])#
	set(dfr, NULL, 'Sc_SeqCoverage_Phy', dfr[, as.numeric(!is.na(Sc_SeqCoverage_Phy))])#
	set(dfr, NULL, 'Sc_SmplD_Phy', dfr[, as.numeric(!is.na(Sc_SmplD_Phy))])#
	set(dfr, NULL, 'Sc_SmplFc_Phy', dfr[, as.numeric(!is.na(Sc_SmplFc_Phy))])	#
	dfr		<- merge(unique(subset(dfa, select=c(DATAT_L,SC_RND))), dfr, by='SC_RND')#
	dfa		<- merge(dfa, dfr, by=c('SC_RND','DATAT_L'))
set( dfa, dfa[, which(TEAM=='Vancouver')], 'TEAM', 'British Columbia' )	#
	##
	#	set team color#
	##
	tmp				<- c('Cambridge','Cambridge/Imperial','ETH Zurich','Imperial','British Columbia','True','Cambridge/Imperial (chronos)','Cambridge/Imperial (lsd)','Cambridge/Imperial (mh15)','Cambridge/Imperial (mh30)','Cambridge/Imperial (merged)')#
	TEAM_CL			<- c( brewer.pal(5, 'Set1'), 'black', brewer.pal(5, 'Set2') )#
	names(TEAM_CL)	<- tmp
dfa
require(plsdepot)#
	require(pls)#
	require(outliers)#
	dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
	set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))#
	#dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii:= log(OBJ_ii)-log(INC_t)]#
	#dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v:= OBJ_v-ACS_t]#
	#dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi:= OBJ_vi-ACE_t]#
	#dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	dfo			<- subset(dfo, !is.na(RESID))#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')
plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO')#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO')#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		plsms5[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO')#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO')#
	}
plsms2[[1]]
str(plsms2[[1]])
names(plsms2[[1]])
plsms2[[1]][["coefficients"]]
plot(plsms2[[1]], plottype='coef', ncomp=1:4)
summary(plsms2[[1]])
plsms2[[1]][["model"]]
dfo
str(dfo)
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')
dfo
str(dfo)
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')
dfo
str(dfo)
set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])
dfo[, table(IMPRT)]
dfo[, table(SMPL_C)]
set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
	set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')
dfo
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
	set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
	set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
	set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
	set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])
dfo[, table(SMPL_C)]
setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))#
	#dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii:= log(OBJ_ii)-log(INC_t)]#
	#dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v:= OBJ_v-ACS_t]#
	#dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi:= OBJ_vi-ACE_t]#
	#dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	dfo			<- subset(dfo, !is.na(RESID))#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')
dfo
plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO')#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO')#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		plsms5[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO')#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(RESID~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO')#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])
dfl		<- do.call('rbind',lapply(paste('Comp',1:5), function(x){#
						do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms2[[TEAM]]$loading.weights[, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
										data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms3[[TEAM]]$loading.weights[, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
										data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms5[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
										data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms6[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
					}))#
	set(dfl, NULL, 'LATENT', dfl[, gsub('Comp ','LV',LATENT)])		#
	dfl		<- subset(dfl, !is.nan(LOAD))#
	# use variable influence projection (Wold et al 1993)#
	# https://books.google.co.uk/books?id=QhHdGt8TG80C&pg=PA2&lpg=PA2&dq=PLS+contribution+of+each+variable&source=bl&ots=vWaqNtCTYz&sig=RT9STQ3SzXk1tU2ZNYlRycgxIQ8&hl=en&sa=X&ved=0ahUKEwiH1eHmirvJAhXK7hoKHcBXC_YQ6AEILzAC#v=onepage&q=PLS%20contribution%20of%20each%20variable&f=false#
	dfl		<- merge(dfl, dfl[, list(X=X, LOADstd=LOAD^2/sum(LOAD^2)), by=c('TEAM','OBJ','LATENT')], by=c('TEAM','OBJ','LATENT','X'))#
	dfl		<- merge(dfl, dfr, by=c('TEAM','OBJ','LATENT'))#
	set(dfl, NULL, 'X', dfl[, factor(X, 	levels=c("INC_t","INCR_t","ACS_t","ACE_t","DATAT_L","DATA_T","IMPRT","SMPL_N","SMPL_C","SMPL_M","SMPL_D"),#
							labels=c('True % incidence','True incidence ratio','True % early transmissions just before intervention','True % early transmissions after intervention','Simulation model','Data provided', 'Frequency of viral introductions','Sequences (#)','Sequence coverage','Proportion of sequences from after intervention start','Sampling duration after intervention start'))])#
	set(dfl, NULL, 'OBJ', dfl[, factor(OBJ, levels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	setkey(dfl, TEAM, OBJ, LATENTO)#
	dfl		<- merge(dfl, dfl[, list( LATENTO=LATENTO, LOADcm=cumsum(LOADstd*R2each)), by=c('TEAM','OBJ','X')], by=c('TEAM','OBJ','LATENTO','X'))#
	#do barplot	#
	ggplot(subset(dfl, LATENTO%in%paste('lv',1:4,sep='')), aes(x=LATENTO, y=100*LOADcm, fill=X, alpha= factor(LATENTO%in%paste('lv',1:4,sep=''),levels=c(TRUE,FALSE),labels=c(1,0)) )) + #
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			scale_alpha_manual(values=c(1,0.2)) +#
			scale_x_discrete(labels=c("1","1-2","1-3","1-4")) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(TEAM~OBJ) +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom',panel.grid.major.y=element_line(colour='grey70', size=1), panel.grid.minor.y=element_line(colour='grey70', size=0.4)) +#
			labs(x='\nfirst n PLS latent factors',fill='Variable',y='variance in error explained\n(%)\n') +#
			guides(fill=guide_legend(ncol=3), alpha=FALSE)
ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Errors_PLSbyLatentFactors_v2.pdf',sep=''), width=12, height=12)	#
	#do influence plot#
	tmp2	<- dfl[, length(unique(X))]#
	tmp2	<- dfl[, list(VIP= sqrt(tmp2*sum(R2each*LOADstd)) ), by=c('TEAM','OBJ','X')]#
	ggplot(tmp2, aes(x=X, y=VIP, fill=X))	+ geom_bar(stat="identity", colour='black') + #
			scale_y_continuous(expand=c(0,0), limit=c(0,2.9), breaks=seq(0.5,5,0.5), minor_breaks=seq(0,5,0.1)) +#
			theme_bw() + coord_flip() + facet_grid(TEAM~OBJ) + #
			theme(legend.position='bottom', axis.text.y=element_blank(), axis.ticks.y=element_blank(), panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='', y='\nVariable influence projection', fill='Variable') +#
			guides(fill=guide_legend(ncol=3))#
	ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Outliers_PLSvip_v2.pdf',sep=''), width=12, height=12)
require(plsdepot)#
	require(pls)#
	require(outliers)#
	dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	if(1)#
	{#
		set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
		set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
		set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])		#
	}#
	if(0)#
	{#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])		#
	}#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))	#
	dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii_2:= log(OBJ_ii)-log(INC_t)]#
	dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii_2:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v_1:= OBJ_v-ACS_t]#
	dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi_1:= OBJ_vi-ACE_t]#
	dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]	#
	##
	#	Calculate outliers#
	##
	set(dfo, NULL, c('R_ii_1','R_iii_1','R_v_2','R_vi_2'), NULL)#
	setnames(dfo, c('R_ii_2','R_iii_2','R_v_1','R_vi_1'), c('R_ii','R_iii','R_v','R_vi'))	#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	dfo			<- subset(dfo, !is.na(RESID))#
	tmp			<- dfo[, {#
				z	<- 1.5*diff(quantile(RESID, p=c(0.25,0.75)))#
				z	<- c(quantile(RESID, p=0.25)-z, quantile(RESID, p=0.25)+z)				#
				list(TEAM=TEAM, SC_RND=SC_RND, OU_GR= as.data.table(grubbs.flag( RESID ))[, OUTLIER], OU_TK= RESID<z[1] | RESID>z[2] )#
			}, by='OBJ']#
	dfo			<- merge(dfo, tmp, by=c('TEAM','OBJ','SC_RND'))#
	dfo[, OUTLIER:=0]#
	set(dfo, dfo[, which(OU_TK)], 'OUTLIER', 1)#
	set(dfo, dfo[, which(OU_GR)], 'OUTLIER', 2)#
	set(dfo, NULL, 'OUTLIER', dfo[, factor(OUTLIER, levels=c(0,1,2), labels=c('No','Mild','Extreme'))])#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	##
	#	do PLS on OU_TK as in http://link.springer.com/article/10.1007/s00439-003-0921-9#/page-1 or http://bib.oxfordjournals.org/content/8/1/32.full#
	##
	set(dfo, NULL, 'OU_TK', dfo[, as.numeric(OU_TK)])#
	set(dfo, NULL, 'OU_GR', dfo[, as.numeric(OU_GR)])#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')#
	##
	plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		if(x=='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=TRUE)#
		if(x!='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO', scale=FALSE)#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])
dfl		<- do.call('rbind',lapply(paste('Comp',1:5), function(x){#
						do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms2[[TEAM]]$loading.weights[, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms3[[TEAM]]$loading.weights[, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms5[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms6[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
					}))#
	set(dfl, NULL, 'LATENT', dfl[, gsub('Comp ','LV',LATENT)])		#
	dfl		<- subset(dfl, !is.nan(LOAD))#
	# use variable influence projection (Wold et al 1993)#
	# https://books.google.co.uk/books?id=QhHdGt8TG80C&pg=PA2&lpg=PA2&dq=PLS+contribution+of+each+variable&source=bl&ots=vWaqNtCTYz&sig=RT9STQ3SzXk1tU2ZNYlRycgxIQ8&hl=en&sa=X&ved=0ahUKEwiH1eHmirvJAhXK7hoKHcBXC_YQ6AEILzAC#v=onepage&q=PLS%20contribution%20of%20each%20variable&f=false#
	dfl		<- merge(dfl, dfl[, list(X=X, LOADstd=LOAD^2/sum(LOAD^2)), by=c('TEAM','OBJ','LATENT')], by=c('TEAM','OBJ','LATENT','X'))#
	dfl		<- merge(dfl, dfr, by=c('TEAM','OBJ','LATENT'))#
	set(dfl, NULL, 'X', dfl[, factor(X, 	levels=c("INC_t","INCR_t","ACS_t","ACE_t","DATAT_L","DATA_T","IMPRT","SMPL_N","SMPL_C","SMPL_M","SMPL_D"),#
							labels=c('True % incidence','True incidence ratio','True % early transmissions just before intervention','True % early transmissions after intervention','Simulation model','Data provided', 'Frequency of viral introductions','Sequences (#)','Sequence coverage','Proportion of sequences from after intervention start','Sampling duration after intervention start'))])#
	set(dfl, NULL, 'OBJ', dfl[, factor(OBJ, levels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	setkey(dfl, TEAM, OBJ, LATENTO)#
	dfl		<- merge(dfl, dfl[, list( LATENTO=LATENTO, LOADcm=cumsum(LOADstd*R2each)), by=c('TEAM','OBJ','X')], by=c('TEAM','OBJ','LATENTO','X'))#
	#do barplot	#
	ggplot(subset(dfl, LATENTO%in%paste('lv',1:4,sep='')), aes(x=LATENTO, y=100*LOADcm, fill=X)) + #
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(TEAM~OBJ) +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.y=element_line(colour='grey70', size=1), panel.grid.minor.y=element_line(colour='grey70', size=0.4)) +#
			labs(x='\nfirst n PLS latent factors',fill='Strong error\npredictor',y='variance in outlier presence explained\n(%)\n') +#
			guides(fill=guide_legend(ncol=3))#
	ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Outliers_PLSbyLatentFactors_v2.pdf',sep=''), width=12, height=12)
dfl
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.y=element_line(colour='grey70', size=1), panel.grid.minor.y=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='variance in outlier presence explained\n(%)\n') +#
			guides(fill=guide_legend(ncol=3))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.y=element_line(colour='grey70', size=1), panel.grid.minor.y=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='variance in outlier presence explained\n(%)\n') +#
			guides(fill=guide_legend(ncol=3))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.y=element_line(colour='grey70', size=1), panel.grid.minor.y=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='variance in outlier presence explained\n(%)\n') +#
			guides(fill=guide_legend(ncol=3))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='variance in outlier presence explained\n(%)\n') +#
			guides(fill=guide_legend(ncol=3))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=3))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	if(1)#
	{#
		set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
		set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
		set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])		#
	}#
	if(0)#
	{#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])		#
	}#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))	#
	dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii_2:= log(OBJ_ii)-log(INC_t)]#
	dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii_2:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v_1:= OBJ_v-ACS_t]#
	dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi_1:= OBJ_vi-ACE_t]#
	dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]	#
	##
	#	Calculate outliers#
	##
	set(dfo, NULL, c('R_ii_1','R_iii_1','R_v_2','R_vi_2'), NULL)#
	setnames(dfo, c('R_ii_2','R_iii_2','R_v_1','R_vi_1'), c('R_ii','R_iii','R_v','R_vi'))	#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	dfo			<- subset(dfo, !is.na(RESID))#
	tmp			<- dfo[, {#
				z	<- 1.5*diff(quantile(RESID, p=c(0.25,0.75)))#
				z	<- c(quantile(RESID, p=0.25)-z, quantile(RESID, p=0.25)+z)				#
				list(TEAM=TEAM, SC_RND=SC_RND, OU_GR= as.data.table(grubbs.flag( RESID ))[, OUTLIER], OU_TK= RESID<z[1] | RESID>z[2] )#
			}, by='OBJ']#
	dfo			<- merge(dfo, tmp, by=c('TEAM','OBJ','SC_RND'))#
	dfo[, OUTLIER:=0]#
	set(dfo, dfo[, which(OU_TK)], 'OUTLIER', 1)#
	set(dfo, dfo[, which(OU_GR)], 'OUTLIER', 2)#
	set(dfo, NULL, 'OUTLIER', dfo[, factor(OUTLIER, levels=c(0,1,2), labels=c('No','Mild','Extreme'))])#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	##
	#	do PLS on OU_TK as in http://link.springer.com/article/10.1007/s00439-003-0921-9#/page-1 or http://bib.oxfordjournals.org/content/8/1/32.full#
	##
	set(dfo, NULL, 'OU_TK', dfo[, as.numeric(OU_TK)])#
	set(dfo, NULL, 'OU_GR', dfo[, as.numeric(OU_GR)])#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')#
	##
	plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		if(x=='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=TRUE)#
		if(x!='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO', scale=FALSE)#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])#
	#collect key X variables with high latent variable weights#
	dfl		<- do.call('rbind',lapply(paste('Comp',1:5), function(x){#
						do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms2[[TEAM]]$loading.weights[, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms3[[TEAM]]$loading.weights[, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms5[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms6[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
					}))#
	set(dfl, NULL, 'LATENT', dfl[, gsub('Comp ','LV',LATENT)])		#
	dfl		<- subset(dfl, !is.nan(LOAD))#
	# use variable influence projection (Wold et al 1993)#
	# https://books.google.co.uk/books?id=QhHdGt8TG80C&pg=PA2&lpg=PA2&dq=PLS+contribution+of+each+variable&source=bl&ots=vWaqNtCTYz&sig=RT9STQ3SzXk1tU2ZNYlRycgxIQ8&hl=en&sa=X&ved=0ahUKEwiH1eHmirvJAhXK7hoKHcBXC_YQ6AEILzAC#v=onepage&q=PLS%20contribution%20of%20each%20variable&f=false#
	dfl		<- merge(dfl, dfl[, list(X=X, LOADstd=LOAD^2/sum(LOAD^2)), by=c('TEAM','OBJ','LATENT')], by=c('TEAM','OBJ','LATENT','X'))#
	dfl		<- merge(dfl, dfr, by=c('TEAM','OBJ','LATENT'))#
	set(dfl, NULL, 'X', dfl[, factor(X, 	levels=c("INC_t","INCR_t","ACS_t","ACE_t","DATAT_L","DATA_T","IMPRT","SMPL_N","SMPL_C","SMPL_M","SMPL_D"),#
							labels=c('True % incidence','True incidence ratio','True % early transmissions just before intervention','True % early transmissions after intervention',#
										'Simulation model','Data provided', 'Frequency of viral introductions 20%/year','Sequences (#)','High sequence coverage (80% for Village, 16% for Regional)','Proportion of sequences from after intervention start >80%','Sampling duration after intervention start'))])#
	set(dfl, NULL, 'OBJ', dfl[, factor(OBJ, levels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	setkey(dfl, TEAM, OBJ, LATENTO)#
	dfl		<- merge(dfl, dfl[, list( LATENTO=LATENTO, LOADcm=cumsum(LOADstd*R2each)), by=c('TEAM','OBJ','X')], by=c('TEAM','OBJ','LATENTO','X'))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))
ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Outliers_PLSvip_v2.pdf',sep=''), width=12, height=5)
outdir
ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Outliers_PLSbyLatentFactors_v2.pdf',sep=''), width=12, height=5)
plot(plsms2[[1]], plottype='coef', ncomp=1:4)
plsms2[[1]]
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	if(1)#
	{#
		set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
		set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
		set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])		#
	}#
	if(0)#
	{#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])		#
	}#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))	#
	dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii_2:= log(OBJ_ii)-log(INC_t)]#
	dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii_2:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v_1:= OBJ_v-ACS_t]#
	dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi_1:= OBJ_vi-ACE_t]#
	dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]	#
	##
	#	Calculate outliers#
	##
	set(dfo, NULL, c('R_ii_1','R_iii_1','R_v_2','R_vi_2'), NULL)#
	setnames(dfo, c('R_ii_2','R_iii_2','R_v_1','R_vi_1'), c('R_ii','R_iii','R_v','R_vi'))	#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	dfo			<- subset(dfo, !is.na(RESID))#
	tmp			<- dfo[, {#
				z	<- 1.5*diff(quantile(RESID, p=c(0.25,0.75)))#
				z	<- c(quantile(RESID, p=0.25)-z, quantile(RESID, p=0.25)+z)				#
				list(TEAM=TEAM, SC_RND=SC_RND, OU_GR= as.data.table(grubbs.flag( RESID ))[, OUTLIER], OU_TK= RESID<z[1] | RESID>z[2] )#
			}, by='OBJ']#
	dfo			<- merge(dfo, tmp, by=c('TEAM','OBJ','SC_RND'))#
	dfo[, OUTLIER:=0]#
	set(dfo, dfo[, which(OU_TK)], 'OUTLIER', 1)#
	set(dfo, dfo[, which(OU_GR)], 'OUTLIER', 2)#
	set(dfo, NULL, 'OUTLIER', dfo[, factor(OUTLIER, levels=c(0,1,2), labels=c('No','Mild','Extreme'))])#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	##
	#	do PLS on OU_TK as in http://link.springer.com/article/10.1007/s00439-003-0921-9#/page-1 or http://bib.oxfordjournals.org/content/8/1/32.full#
	##
	set(dfo, NULL, 'OU_TK', dfo[, as.numeric(OU_TK)])#
	set(dfo, NULL, 'OU_GR', dfo[, as.numeric(OU_GR)])#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')#
	##
	plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		if(x=='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=TRUE)#
		if(x!='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO', scale=FALSE)#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])
plsms2[[1]]
summary(plsms2[[1]])
summary(plsms2[[2]])
plot(plsms2[[2]], plottype='coef', ncomp=1:4)
plot(plsms2[[2]], plottype='coef', ncomp=1:4, legend='bottomleft')
plot(plsms2[[2]], plottype='coef', ncomp=4)
names(plsms2[[2]])
names(plsms2[[2]])[['coefficients']]
plsms2[[2]][['coefficients']]
plot(plsms2[[2]], plottype='coef', ncomp=1:4, legend='bottomleft')
tmp
plsms2[[TEAM]]$loading.weights[, '1 comps']
plsms2[[2]]$loading.weights[, '1 comps']
plsms2[[2]]$coefficients[, '1 comps']
plsms2[[2]]$coefficients[, ,'1 comps']
str( plsms2[[2]]$coefficients[, ,'1 comps'] )
do.call('rbind',lapply(paste(1:5,'comps'), function(x){#
					do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, LOAD=plsms2[[TEAM]]$coefficients[,, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, LOAD=plsms3[[TEAM]]$coefficients[,, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, LOAD=plsms5[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, LOAD=plsms6[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
				}))
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	if(1)#
	{#
		set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
		set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
		set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])		#
	}#
	if(0)#
	{#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])		#
	}#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))	#
	dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii_2:= log(OBJ_ii)-log(INC_t)]#
	dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii_2:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v_1:= OBJ_v-ACS_t]#
	dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi_1:= OBJ_vi-ACE_t]#
	dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]	#
	##
	#	Calculate outliers#
	##
	set(dfo, NULL, c('R_ii_1','R_iii_1','R_v_2','R_vi_2'), NULL)#
	setnames(dfo, c('R_ii_2','R_iii_2','R_v_1','R_vi_1'), c('R_ii','R_iii','R_v','R_vi'))	#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	dfo			<- subset(dfo, !is.na(RESID))#
	tmp			<- dfo[, {#
				z	<- 1.5*diff(quantile(RESID, p=c(0.25,0.75)))#
				z	<- c(quantile(RESID, p=0.25)-z, quantile(RESID, p=0.25)+z)				#
				list(TEAM=TEAM, SC_RND=SC_RND, OU_GR= as.data.table(grubbs.flag( RESID ))[, OUTLIER], OU_TK= RESID<z[1] | RESID>z[2] )#
			}, by='OBJ']#
	dfo			<- merge(dfo, tmp, by=c('TEAM','OBJ','SC_RND'))#
	dfo[, OUTLIER:=0]#
	set(dfo, dfo[, which(OU_TK)], 'OUTLIER', 1)#
	set(dfo, dfo[, which(OU_GR)], 'OUTLIER', 2)#
	set(dfo, NULL, 'OUTLIER', dfo[, factor(OUTLIER, levels=c(0,1,2), labels=c('No','Mild','Extreme'))])#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	##
	#	do PLS on OU_TK as in http://link.springer.com/article/10.1007/s00439-003-0921-9#/page-1 or http://bib.oxfordjournals.org/content/8/1/32.full#
	##
	set(dfo, NULL, 'OU_TK', dfo[, as.numeric(OU_TK)])#
	set(dfo, NULL, 'OU_GR', dfo[, as.numeric(OU_GR)])#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')#
	##
	plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		if(x=='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=TRUE)#
		if(x!='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO', scale=FALSE)#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])#
	#collect coefficients of first x latent factors#
	tmp		<- do.call('rbind',lapply(paste(1:5,'comps'), function(x){#
					do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms2[[TEAM]]$coefficients[,, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms3[[TEAM]]$coefficients[,, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms5[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms6[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
				}))#
	tmp		<- subset(tmp, !is.nan(LOAD))
tmp		<- subset(tmp, !is.nan(CBETA))
tmp
dfr
tmp
set(tmp, NULL, 'LATENT', tmp[, paste('LV',gsub(' comps','',LATENT),sep='')])
tmp
dfr		<- merge(tmp, dfr, by=c('TEAM','OBJ','LATENT'))
dfr
dfl		<- do.call('rbind',lapply(paste('Comp',1:5), function(x){#
						do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms2[[TEAM]]$loading.weights[, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms3[[TEAM]]$loading.weights[, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms5[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms6[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
					}))#
	set(dfl, NULL, 'LATENT', dfl[, gsub('Comp ','LV',LATENT)])		#
	dfl		<- subset(dfl, !is.nan(LOAD))#
	# use variable influence projection (Wold et al 1993)#
	# https://books.google.co.uk/books?id=QhHdGt8TG80C&pg=PA2&lpg=PA2&dq=PLS+contribution+of+each+variable&source=bl&ots=vWaqNtCTYz&sig=RT9STQ3SzXk1tU2ZNYlRycgxIQ8&hl=en&sa=X&ved=0ahUKEwiH1eHmirvJAhXK7hoKHcBXC_YQ6AEILzAC#v=onepage&q=PLS%20contribution%20of%20each%20variable&f=false#
	dfl		<- merge(dfl, dfl[, list(X=X, LOADstd=LOAD^2/sum(LOAD^2)), by=c('TEAM','OBJ','LATENT')], by=c('TEAM','OBJ','LATENT','X'))
dfl
dfr
merge(dfl, dfr, by=c('TEAM','OBJ','LATENT','X'), all=1)
dfl		<- merge(dfl, dfr, by=c('TEAM','OBJ','LATENT','X'), all=1)
set(dfl, NULL, 'X', dfl[, factor(X, 	levels=c("INC_t","INCR_t","ACS_t","ACE_t","DATAT_L","DATA_T","IMPRT","SMPL_N","SMPL_C","SMPL_M","SMPL_D"),#
							labels=c('True % incidence','True incidence ratio','True % early transmissions just before intervention','True % early transmissions after intervention',#
										'Simulation model','Data provided', 'Frequency of viral introductions 20%/year','Sequences (#)','High sequence coverage (80% for Village, 16% for Regional)','Proportion of sequences from after intervention start >80%','Sampling duration after intervention start'))])#
	set(dfl, NULL, 'OBJ', dfl[, factor(OBJ, levels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	setkey(dfl, TEAM, OBJ, LATENTO)#
	dfl		<- merge(dfl, dfl[, list( LATENTO=LATENTO, LOADcm=cumsum(LOADstd*R2each)), by=c('TEAM','OBJ','X')], by=c('TEAM','OBJ','LATENTO','X'))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM, y=100*LOADcm, fill=X)) +#
			geom_bar(stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))
subset(dfl, LATENTO=='lv4')
?sgn
sign
dfl[, CBS:= sign(CBETA)]
dfl
dfl[, CBS:= factor(sign(CBETA), levels=c(-1,0,1),labels=c('+','','-'))]
dfl
setkey(dfl, OBJ, TEAM, LATENTO, X)
dfl[, list(POS= cumsum(LOADcm)+0.5*LOADcm), by=c('OBJ','TEAM','LATENTO')]
dfl[, list(X=X, POS= cumsum(LOADcm)+0.5*LOADcm), by=c('OBJ','TEAM','LATENTO')]
dfl[, list(X=X, POS= cumsum(LOADcm)-0.5*LOADcm), by=c('OBJ','TEAM','LATENTO')]
dfl		<- merge(dfl, dfl[, list(X=X, POS= cumsum(LOADcm)-0.5*LOADcm), by=c('OBJ','TEAM','LATENTO')],by=c('OBJ','TEAM','LATENTO','X'))
dfl
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM)) +#
			geom_bar(aes(y=100*LOADcm, fill=X), stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			geom_text(aes(y=POS, label=CBS)) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM)) +#
			geom_bar(aes(y=100*LOADcm, fill=X), stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			geom_text(aes(y=100*POS, label=CBS)) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	if(1)#
	{#
		set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
		set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
		set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])		#
	}#
	if(0)#
	{#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])		#
	}#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))	#
	dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii_2:= log(OBJ_ii)-log(INC_t)]#
	dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii_2:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v_1:= OBJ_v-ACS_t]#
	dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi_1:= OBJ_vi-ACE_t]#
	dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]	#
	##
	#	Calculate outliers#
	##
	set(dfo, NULL, c('R_ii_1','R_iii_1','R_v_2','R_vi_2'), NULL)#
	setnames(dfo, c('R_ii_2','R_iii_2','R_v_1','R_vi_1'), c('R_ii','R_iii','R_v','R_vi'))	#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	dfo			<- subset(dfo, !is.na(RESID))#
	tmp			<- dfo[, {#
				z	<- 1.5*diff(quantile(RESID, p=c(0.25,0.75)))#
				z	<- c(quantile(RESID, p=0.25)-z, quantile(RESID, p=0.25)+z)				#
				list(TEAM=TEAM, SC_RND=SC_RND, OU_GR= as.data.table(grubbs.flag( RESID ))[, OUTLIER], OU_TK= RESID<z[1] | RESID>z[2] )#
			}, by='OBJ']#
	dfo			<- merge(dfo, tmp, by=c('TEAM','OBJ','SC_RND'))#
	dfo[, OUTLIER:=0]#
	set(dfo, dfo[, which(OU_TK)], 'OUTLIER', 1)#
	set(dfo, dfo[, which(OU_GR)], 'OUTLIER', 2)#
	set(dfo, NULL, 'OUTLIER', dfo[, factor(OUTLIER, levels=c(0,1,2), labels=c('No','Mild','Extreme'))])#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	##
	#	do PLS on OU_TK as in http://link.springer.com/article/10.1007/s00439-003-0921-9#/page-1 or http://bib.oxfordjournals.org/content/8/1/32.full#
	##
	set(dfo, NULL, 'OU_TK', dfo[, as.numeric(OU_TK)])#
	set(dfo, NULL, 'OU_GR', dfo[, as.numeric(OU_GR)])#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')#
	##
	plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		if(x=='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=TRUE)#
		if(x!='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO', scale=FALSE)#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])#
	#collect coefficients of first x latent factors#
	tmp		<- do.call('rbind',lapply(paste(1:5,'comps'), function(x){#
					do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms2[[TEAM]]$coefficients[,, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms3[[TEAM]]$coefficients[,, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms5[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms6[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
				}))#
	tmp		<- subset(tmp, !is.nan(CBETA))#
	set(tmp, NULL, 'LATENT', tmp[, paste('LV',gsub(' comps','',LATENT),sep='')])		#
	dfr		<- merge(tmp, dfr, by=c('TEAM','OBJ','LATENT'))	#
	#collect key X variables with high latent variable weights#
	dfl		<- do.call('rbind',lapply(paste('Comp',1:5), function(x){#
						do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms2[[TEAM]]$loading.weights[, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms3[[TEAM]]$loading.weights[, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms5[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms6[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
					}))#
	set(dfl, NULL, 'LATENT', dfl[, gsub('Comp ','LV',LATENT)])		#
	dfl		<- subset(dfl, !is.nan(LOAD))#
	# use variable influence projection (Wold et al 1993)#
	# https://books.google.co.uk/books?id=QhHdGt8TG80C&pg=PA2&lpg=PA2&dq=PLS+contribution+of+each+variable&source=bl&ots=vWaqNtCTYz&sig=RT9STQ3SzXk1tU2ZNYlRycgxIQ8&hl=en&sa=X&ved=0ahUKEwiH1eHmirvJAhXK7hoKHcBXC_YQ6AEILzAC#v=onepage&q=PLS%20contribution%20of%20each%20variable&f=false#
	dfl		<- merge(dfl, dfl[, list(X=X, LOADstd=LOAD^2/sum(LOAD^2)), by=c('TEAM','OBJ','LATENT')], by=c('TEAM','OBJ','LATENT','X'))#
	dfl		<- merge(dfl, dfr, by=c('TEAM','OBJ','LATENT','X'), all=1)#
	set(dfl, NULL, 'X', dfl[, factor(X, 	levels=c("INC_t","INCR_t","ACS_t","ACE_t","DATAT_L","DATA_T","IMPRT","SMPL_N","SMPL_C","SMPL_M","SMPL_D"),#
							labels=c('True % incidence','True incidence ratio','True % early transmissions just before intervention','True % early transmissions after intervention',#
										'Village simulation model','Data provided', 'Frequency of viral introductions 20%/year','Sequences (#)','High sequence coverage (80% for Village, 16% for Regional)','Proportion of sequences from after intervention start >80%','Sampling duration after intervention start'))])#
	set(dfl, NULL, 'OBJ', dfl[, factor(OBJ, levels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	setkey(dfl, TEAM, OBJ, LATENTO)#
	dfl		<- merge(dfl, dfl[, list( LATENTO=LATENTO, LOADcm=cumsum(LOADstd*R2each)), by=c('TEAM','OBJ','X')], by=c('TEAM','OBJ','LATENTO','X'))#
	dfl[, CBS:= factor(sign(CBETA), levels=c(-1,0,1),labels=c('+','','-'))]#
	setkey(dfl, OBJ, TEAM, LATENTO, X)#
	dfl		<- merge(dfl, dfl[, list(X=X, POS= cumsum(LOADcm)-0.5*LOADcm), by=c('OBJ','TEAM','LATENTO')],by=c('OBJ','TEAM','LATENTO','X'))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM)) +#
			geom_bar(aes(y=100*LOADcm, fill=X), stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			geom_text(aes(y=100*POS, label=CBS)) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))
ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Outliers_PLSbyLatentFactors_v3.pdf',sep=''), width=12, height=5)
dfo		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & USED_GENES=='all' & TEAM!='True' & !grepl('(', TEAM,fixed=1), c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	dfo		<- dcast.data.table(dfo, SC_RND+TEAM+DATAT_L+DATA_T+IMPRT+SMPL_N+SMPL_C+SMPL_M+SMPL_D~OBJ, value.var='central')			#
	tmp		<- subset(dfa, OBJ%in%c('OBJ_ii','OBJ_iii','OBJ_v','OBJ_vi') & TEAM=='True', c(SC_RND, TEAM, DATAT_L, central, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, OBJ))#
	set(tmp, NULL, 'OBJ', tmp[, paste(OBJ,'_t',sep='')])#
	tmp		<- dcast.data.table(tmp, SC_RND~OBJ, value.var='central')#
	dfo		<- merge(dfo, tmp, by='SC_RND')	#
	set(dfo, NULL, 'DATAT_L', dfo[, as.numeric(factor(DATAT_L, levels=c("Regional","Village"), labels=c("Regional","Village")))])#
	set(dfo, NULL, 'SMPL_M', dfo[, as.numeric(SMPL_M)])#
	set(dfo, NULL, 'SMPL_D', dfo[, as.numeric(SMPL_D)])	#
	set(dfo, NULL, 'DATA_T', dfo[, as.numeric(DATA_T)])#
	if(1)#
	{#
		set(dfo, dfo[, which(IMPRT!='20%')], 'IMPRT', '<=5%')	#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(factor(as.character(IMPRT), levels=c('<=5%','20%'), labels=c('<=5%','20%')))])	#
		set(dfo, dfo[, which(SMPL_C%in%c('8%','30%'))], 'SMPL_C', '1x')#
		set(dfo, dfo[, which(SMPL_C%in%c('16%','60%'))], 'SMPL_C', '2x')#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(factor(as.character(SMPL_C), levels=c('1x','2x'), labels=c('1x','2x')))])		#
	}#
	if(0)#
	{#
		set(dfo, NULL, 'SMPL_C', dfo[, as.numeric(gsub('%','',as.character(SMPL_C)))/100])#
		set(dfo, NULL, 'IMPRT', dfo[, as.numeric(gsub('%','',as.character(IMPRT)))/100])		#
	}#
	setnames(dfo, c('OBJ_ii_t','OBJ_iii_t','OBJ_v_t','OBJ_vi_t'), c('INC_t','INCR_t','ACS_t','ACE_t'))	#
	dfo[, R_ii_1:= OBJ_ii-INC_t]#
	dfo[, R_ii_2:= log(OBJ_ii)-log(INC_t)]#
	dfo[, R_iii_1:= OBJ_iii-INCR_t]#
	dfo[, R_iii_2:= log(OBJ_iii)-log(INCR_t)]	#
	dfo[, R_v_1:= OBJ_v-ACS_t]#
	dfo[, R_v_2:= log(OBJ_v)-log(ACS_t)]#
	dfo[, R_vi_1:= OBJ_vi-ACE_t]#
	dfo[, R_vi_2:= log(OBJ_vi)-log(ACE_t)]	#
	##
	#	Calculate outliers#
	##
	set(dfo, NULL, c('R_ii_1','R_iii_1','R_v_2','R_vi_2'), NULL)#
	setnames(dfo, c('R_ii_2','R_iii_2','R_v_1','R_vi_1'), c('R_ii','R_iii','R_v','R_vi'))	#
	dfo			<- subset(dfo, select=c(SC_RND, TEAM, DATAT_L, DATA_T,IMPRT, SMPL_N, SMPL_C, SMPL_M, SMPL_D, INC_t, INCR_t, ACS_t, ACE_t, R_ii, R_iii, R_v, R_vi))#
	dfo			<- melt(dfo, measure.vars=c('R_ii','R_iii','R_v','R_vi'), variable.name='OBJ', value.name='RESID')#
	dfo			<- subset(dfo, !is.na(RESID))#
	tmp			<- dfo[, {#
				z	<- 1.5*diff(quantile(RESID, p=c(0.25,0.75)))#
				z	<- c(quantile(RESID, p=0.25)-z, quantile(RESID, p=0.25)+z)				#
				list(TEAM=TEAM, SC_RND=SC_RND, OU_GR= as.data.table(grubbs.flag( RESID ))[, OUTLIER], OU_TK= RESID<z[1] | RESID>z[2] )#
			}, by='OBJ']#
	dfo			<- merge(dfo, tmp, by=c('TEAM','OBJ','SC_RND'))#
	dfo[, OUTLIER:=0]#
	set(dfo, dfo[, which(OU_TK)], 'OUTLIER', 1)#
	set(dfo, dfo[, which(OU_GR)], 'OUTLIER', 2)#
	set(dfo, NULL, 'OUTLIER', dfo[, factor(OUTLIER, levels=c(0,1,2), labels=c('No','Mild','Extreme'))])#
	set(dfo, NULL, 'OBJ', dfo[, factor(OBJ, levels=c('R_ii','R_iii','R_v','R_vi'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	##
	#	do PLS on OU_TK as in http://link.springer.com/article/10.1007/s00439-003-0921-9#/page-1 or http://bib.oxfordjournals.org/content/8/1/32.full#
	##
	set(dfo, NULL, 'OU_TK', dfo[, as.numeric(OU_TK)])#
	set(dfo, NULL, 'OU_GR', dfo[, as.numeric(OU_GR)])#
	#	restrict to not Cambridge#
	dfo				<- subset(dfo, TEAM!='Cambridge')#
	##
	plsms2			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms3			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms5			<- vector('list', dfo[, length(unique(TEAM))])#
	plsms6			<- vector('list', dfo[, length(unique(TEAM))])#
	names(plsms2)	<- names(plsms3)	<- names(plsms5)	<- names(plsms6)	<- dfo[, unique(TEAM)]#
	for(x in names(plsms2))#
	{#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence\nafter intervention')	#
		plsms2[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INC_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Incidence reduction\nduring intervention')	#
		plsms3[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+INCR_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\njust before intervention')	#
		if(x=='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=TRUE)#
		if(x!='ETH Zurich')#
			plsms5[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACS_t, data=df, validation='LOO', scale=FALSE)#
		df			<- subset(dfo, TEAM==x & OBJ=='Proportion of early transmissions\nafter intervention')	#
		plsms6[[x]]	<- plsr(OU_TK~DATAT_L+IMPRT+SMPL_C+SMPL_M+ACE_t, data=df, validation='LOO', scale=FALSE)#
	}		#
	# get variance explained#
	dfr		<- as.data.table(melt(sapply(plsms2, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	dfr[, OBJ:='Incidence\nafter intervention']#
	tmp		<- as.data.table(melt(sapply(plsms3, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Incidence reduction\nduring intervention']#
	dfr		<- rbind(dfr, tmp)#
	tmp		<- as.data.table(melt(sapply(plsms5, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\njust before intervention']#
	dfr		<- rbind(dfr, tmp)	#
	tmp		<- as.data.table(melt(sapply(plsms6, function(x) drop((R2(x, intercept=FALSE, estimate='train'))$val) ), varnames=c('LATENT','TEAM'), value.name='R2'))#
	tmp[, OBJ:='Proportion of early transmissions\nafter intervention']#
	dfr		<- rbind(dfr, tmp)#
	set(dfr, NULL, 'LATENT', dfr[, paste('LV',gsub(' comps','',LATENT),sep='')])#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, R2each= c(R2[1],diff(R2))), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	#oh wow! the variance explained by the various latent variables is quite different from each other!!	#
	dfr		<- dfr[order(TEAM, OBJ, -R2each)]#
	dfr		<- merge(dfr, dfr[, list(LATENT=LATENT, LATENTO= paste('lv',seq_along(LATENT),sep='')), by=c('TEAM','OBJ')], by=c('TEAM','OBJ','LATENT'))#
	set(dfr, NULL, 'LATENTO', dfr[, factor(LATENTO, levels=paste('lv',1:10,sep=''), labels=paste('lv',1:10,sep=''))])#
	#collect coefficients of first x latent factors#
	tmp		<- do.call('rbind',lapply(paste(1:5,'comps'), function(x){#
					do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms2[[TEAM]]$coefficients[,, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms3[[TEAM]]$coefficients[,, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms5[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
												data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$coefficients[,, '1 comps']), LATENT=x, CBETA=plsms6[[TEAM]]$coefficients[,, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
				}))#
	tmp		<- subset(tmp, !is.nan(CBETA))#
	set(tmp, NULL, 'LATENT', tmp[, paste('LV',gsub(' comps','',LATENT),sep='')])		#
	dfr		<- merge(tmp, dfr, by=c('TEAM','OBJ','LATENT'))	#
	#collect key X variables with high latent variable weights#
	dfl		<- do.call('rbind',lapply(paste('Comp',1:5), function(x){#
						do.call('rbind', 	list(	data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms2[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms2[[TEAM]]$loading.weights[, x], OBJ='Incidence\nafter intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms3[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms3[[TEAM]]$loading.weights[, x], OBJ='Incidence reduction\nduring intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms5[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms5[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\njust before intervention'), by='TEAM'],#
													data.table(TEAM=tmp[, as.character(unique(TEAM))])[, list( X=names(plsms6[[TEAM]]$loading.weights[, 'Comp 1']), LATENT=x, LOAD=plsms6[[TEAM]]$loading.weights[, x], OBJ='Proportion of early transmissions\nafter intervention'), by='TEAM'] 	))						#
					}))#
	set(dfl, NULL, 'LATENT', dfl[, gsub('Comp ','LV',LATENT)])		#
	dfl		<- subset(dfl, !is.nan(LOAD))#
	# use variable influence projection (Wold et al 1993)#
	# https://books.google.co.uk/books?id=QhHdGt8TG80C&pg=PA2&lpg=PA2&dq=PLS+contribution+of+each+variable&source=bl&ots=vWaqNtCTYz&sig=RT9STQ3SzXk1tU2ZNYlRycgxIQ8&hl=en&sa=X&ved=0ahUKEwiH1eHmirvJAhXK7hoKHcBXC_YQ6AEILzAC#v=onepage&q=PLS%20contribution%20of%20each%20variable&f=false#
	dfl		<- merge(dfl, dfl[, list(X=X, LOADstd=LOAD^2/sum(LOAD^2)), by=c('TEAM','OBJ','LATENT')], by=c('TEAM','OBJ','LATENT','X'))#
	dfl		<- merge(dfl, dfr, by=c('TEAM','OBJ','LATENT','X'), all=1)#
	set(dfl, NULL, 'X', dfl[, factor(X, 	levels=c("INC_t","INCR_t","ACS_t","ACE_t","DATAT_L","DATA_T","IMPRT","SMPL_N","SMPL_C","SMPL_M","SMPL_D"),#
							labels=c('True % incidence','True incidence ratio','True % early transmissions just before intervention','True % early transmissions after intervention',#
										'Village simulation model vs. Regional model','Data provided', 'Frequency of viral introductions 20%/year vs. <=5%/year','Sequences (#)','High sequence coverage (80% for Village, 16% for Regional) vs. lower coverage (40% for Village, 8% for Regional)','Proportion of sequences from after intervention start >80% vs. 50%','Sampling duration after intervention start'))])#
	set(dfl, NULL, 'OBJ', dfl[, factor(OBJ, levels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'), labels=c('Incidence\nafter intervention','Incidence reduction\nduring intervention','Proportion of early transmissions\njust before intervention','Proportion of early transmissions\nafter intervention'))])#
	setkey(dfl, TEAM, OBJ, LATENTO)#
	dfl		<- merge(dfl, dfl[, list( LATENTO=LATENTO, LOADcm=cumsum(LOADstd*R2each)), by=c('TEAM','OBJ','X')], by=c('TEAM','OBJ','LATENTO','X'))#
	dfl[, CBS:= factor(sign(CBETA), levels=c(-1,0,1),labels=c('+','','-'))]#
	setkey(dfl, OBJ, TEAM, LATENTO, X)#
	dfl		<- merge(dfl, dfl[, list(X=X, POS= cumsum(LOADcm)-0.5*LOADcm), by=c('OBJ','TEAM','LATENTO')],by=c('OBJ','TEAM','LATENTO','X'))
ggplot(subset(dfl, LATENTO=='lv4'), aes(x=TEAM)) +#
			geom_bar(aes(y=100*LOADcm, fill=X), stat="identity", colour='black') +#
			scale_fill_manual(values=c("#762A83","#9970AB","#C2A5CF","#E7D4E8", "#80B1D3", "#FDB462", "#A6DBA0","#5AAE61","#1B7837")) +#
			geom_text(aes(y=100*POS, label=CBS)) +#
			#scale_fill_brewer(palette='PRGn') +#
			#scale_x_discrete(labels=c('1','1-2','1-3','1-4')) +#
			scale_y_continuous(expand=c(0,0), limit=c(0,100), breaks=seq(0,100,20), minor_breaks=seq(0,100,10)) +#
			facet_grid(~OBJ) +#
			coord_flip() +#
			theme_bw() + theme(panel.margin = unit(0.8, "lines"), legend.position='bottom', panel.grid.major.x=element_line(colour='grey70', size=1), panel.grid.minor.x=element_line(colour='grey70', size=0.4)) +#
			labs(x='',fill='Strong error\npredictor',y='\nvariance in outlier presence explained\n(%)') +#
			guides(fill=guide_legend(ncol=2))	#
	ggsave(file=paste(outdir,'/res_acrossTEAM_Secondary_Outliers_PLSbyLatentFactors_v3.pdf',sep=''), width=12, height=5)
plsms2[[2]][['coefficients']]
65-6*2.50

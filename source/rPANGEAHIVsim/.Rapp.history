pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, #
												seed=42, s.PREV.min=0.03, s.PREV.max=0.70, #
												epi.model='DSPS', epi.dt=1/48, epi.import=0.25)
suppressWarnings( df.trm[, YR:= df.trm[, floor(TIME_TR)]] )#
	df.epi		<- df.trm[, list(INC=length(IDREC), IMPORT=length(which(IDTR<0))), by='YR']#
	tmp			<- df.epi[, 	{#
				alive		<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR )#
				infected	<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR  &  floor(df.ind[['TIME_TR']])<=YR )#
				list(POP=length(alive), PREV=length(infected))				#
			},by='YR']#
	df.epi		<- merge( tmp, df.epi, by='YR' )	#
	set(df.epi, NULL, 'PREVp', df.epi[, PREV/POP])	#
	set(df.epi, NULL, 'INCp', df.epi[, INC/POP])#
	set(df.epi, NULL, 'IMPORTp', df.epi[, IMPORT/INC])#
	# 	SAMPLING PROBABILITIES and TOTALS PER YEAR#
	##
	#	Can we detect a 25% or 50% reduction in HIV incidence in the most recent 2 or 3 years #
	#	with 1%, 5%, 10% of all recent incident cases sampled?#
	##
	#	suppose exponentially increasing sampling over time#
	#	the number of incident cases sampled is the total sampled in that year * the proportion of incident cases out of all non-sampled cases to date#
	#	TODO this needs to be changed to fix the proportion of sequences sampled from incident#
	df.sample	<- subset( df.epi, YR>= pipeline.args['yr.start',][, as.numeric(v)] & YR<pipeline.args['yr.end',][, as.numeric(v)] )#
	#	exponential rate of increasing s.TOTAL (total sampling rate) per year#
	tmp			<- log( 1+pipeline.args['s.PREV.max',][, as.numeric(v)]-pipeline.args['s.PREV.min',][, as.numeric(v)] ) / df.sample[, diff(range(YR))]#
	tmp			<- df.sample[, exp( tmp*(YR-min(YR)) ) - 1 + pipeline.args['s.PREV.min',][, as.numeric(v)] ]#
	set(df.sample, NULL, 's.CUMTOTAL', tmp)		#
	set(df.sample, NULL, 's.n.CUMTOTAL', df.sample[, round(PREV*s.CUMTOTAL)])#
	set(df.sample, NULL, 's.n.TOTAL', c(df.sample[1, s.n.CUMTOTAL], df.sample[, diff(s.n.CUMTOTAL)]))	#
	set(df.sample, NULL, 's.n.INC', df.sample[, round(INC/(PREV-s.n.CUMTOTAL) * s.n.TOTAL)])#
	set(df.sample, NULL, 's.n.notINC', df.sample[, round(s.n.TOTAL-s.n.INC)])	#
	cat(paste('\n total number of sequences sampled=', df.sample[, sum( s.n.TOTAL )]))#
	cat(paste('\n prop of sequences sampled among HIV+=', df.sample[, sum( s.n.TOTAL )] / df.sample[, rev(PREV)[1]]))		#
	cat(paste('\n total number of incident sequences to sample=', df.sample[, sum( s.n.INC )]))#
	cat(paste('\n total number of non-incident sequences to sample=', df.sample[, sum( s.n.notINC )]))
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
indir			<- ifelse(indir=='','/Users/Oliver/git/HPTN071sim/raw_trchain',indir)#
#	re-name the following:#
tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140910'#
dir.create(tmpdir, showWarnings=FALSE)#
tmpdir.HPTN071	<- paste(tmpdir,'/HPTN071parser',sep='')#
dir.create(tmpdir.HPTN071, showWarnings=FALSE)#
#	simulation input files from the epi-simulator#
infile.ind		<- '140716_RUN001_IND.csv'#
infile.trm		<- '140716_RUN001_TRM.csv'#
#	input arguments for the pipeline#
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.25, epi.dt=1/48, epi.import=0.1)#
infile.args		<- paste(tmpdir,'/',substr(infile.ind, 1, nchar(infile.ind)-7), 'PipeArgs.R',sep='')#
save(pipeline.args, file=infile.args)#
#	get input into 'argv'. this is needed because the input parser is usually called from the command line, and 'argv' mimics the way input is provided when the parser is called from the command line#
cmd				<- cmd.HPTN071.input.parser.v2(indir, infile.trm, infile.ind, infile.args, tmpdir.HPTN071,  infile.trm, infile.ind)				 #
argv			<<- unlist(strsplit(cmd,' '))
require(data.table)#
	verbose			<- 1#
	with.plot		<- 1	#
	pipeline.args	<- NULL#
	indir			<- system.file(package="rPANGEAHIVsim", "misc")#
	indir			<- ifelse(indir=='','/Users/Oliver/git/HPTN071sim/raw_trchain',indir)#
	outdir			<- '/Users/Oliver/git/HPTN071sim/tmp140908'#
	infile.ind		<- '140716_RUN001_IND.csv'#
	infile.trm		<- '140716_RUN001_TRM.csv'#
	infile.args		<- NA#
	outfile.ind		<- '140716_RUN001_IND.csv'#
	outfile.trm		<- '140716_RUN001_TRM.csv'#
	##
	if(exists("argv"))#
	{#
		#	args input#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,6),#
									indir= return(substr(arg,8,nchar(arg))),NA)	}))#
		if(length(tmp)>0) indir<- tmp[1]		#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,11),#
									infile.ind= return(substr(arg,13,nchar(arg))),NA)	}))#
		if(length(tmp)>0) infile.ind<- tmp[1]#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,11),#
									infile.trm= return(substr(arg,13,nchar(arg))),NA)	}))#
		if(length(tmp)>0) infile.trm<- tmp[1]#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,12),#
									infile.args= return(substr(arg,14,nchar(arg))),NA)	}))#
		if(length(tmp)>0) infile.args<- tmp[1]#
		#	args output#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,7),#
									outdir= return(substr(arg,9,nchar(arg))),NA)	}))#
		if(length(tmp)>0) outdir<- tmp[1]		#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,12),#
									outfile.ind= return(substr(arg,14,nchar(arg))),NA)	}))#
		if(length(tmp)>0) outfile.ind<- tmp[1]#
		tmp<- na.omit(sapply(argv,function(arg)#
						{	switch(substr(arg,2,12),#
									outfile.trm= return(substr(arg,14,nchar(arg))),NA)	}))#
		if(length(tmp)>0) outfile.trm<- tmp[1]		#
	}#
	if(verbose)#
	{#
		cat('\ninput args\n',paste(indir, infile.ind, infile.trm, outdir, outfile.ind, outfile.trm, sep='\n'))#
	}	#
	if(!is.na(infile.args))#
	{#
		load(infile.args)	#expect 'pipeline.args'#
	}#
	if(is.null(pipeline.args))#
	{#
		cat('\nCould not find pipeline.args, generating default')#
		pipeline.args	<- rPANGEAHIVsim.pipeline.args()#
	}#
	stopifnot( all( c('yr.start', 'yr.end', 's.seed', 's.PREV.min', 's.PREV.max', 'epi.dt', 'epi.import')%in%pipeline.args[, stat] ) )#
	##
	infile.ind	<- paste(indir, '/', infile.ind, sep='')#
	infile.trm	<- paste(indir, '/', infile.trm, sep='')#
	outfile.ind	<- paste(outdir, '/', outfile.ind, sep='')#
	outfile.trm	<- paste(outdir, '/', outfile.trm, sep='')#
	#	set seed#
	set.seed( pipeline.args['s.seed',][, as.numeric(v)] )#
	##
	df.trm	<- as.data.table(read.csv(infile.trm, stringsAsFactors=FALSE, sep=' ', dec='.'))#
	setnames(df.trm, c("IdInfector","IdInfected","TimeOfInfection","IsInfectorAcute"), c('IDTR','IDREC','TIME_TR','TR_ACUTE'))		#
	#	transmissions happen either at baseline, or at unique times.#
	#	the epi simulation allocates transmissions in 1/48 of a year, so draw a uniform number if there are more transmission per TIME_TR#
	df.trm	<- df.trm[, {#
				z<- TIME_TR#
				if(TIME_TR>pipeline.args['yr.start',][, as.numeric(v)] & length(IDTR)>1)#
					z<- sort(runif(length(IDTR), z, min(pipeline.args['yr.end',][, as.numeric(v)], z+pipeline.args['epi.dt',][, as.numeric(v)])))#
				list(IDTR=IDTR, IDREC=IDREC, TIME_TR.new=z, TR_ACUTE=TR_ACUTE, l=length(IDTR))#
			}, by='TIME_TR']#
	df.trm[, TIME_TR:=NULL]#
	setnames(df.trm, 'TIME_TR.new', 'TIME_TR')
tmp		<- subset(df.trm, TIME_TR>pipeline.args['yr.start',][, as.numeric(v)])#
	stopifnot( nrow(tmp)==tmp[,length(unique(TIME_TR))] )
df.trm
tmp		<- df.trm[, which(IDTR=='-1')]
set(df.trm, tmp, 'IDTR', rev(-seq_along(trm)))
set(df.trm, tmp, 'IDTR', rev(-seq_along(tmp)))
df.trm
df.ind	<- as.data.table(read.csv(infile.ind, stringsAsFactors=FALSE))		#
	setnames(df.ind, c("Id","Gender","DoB","DateOfDeath","RiskGroup","Circumcised"), c('IDPOP','GENDER','DOB','DOD','RISK','CIRCM'))#
	set(df.ind, df.ind[, which(CIRCM=='')], 'CIRCM', NA_character_)#
	set(df.ind, NULL, 'CIRCM', df.ind[, factor(CIRCM)])#
	set(df.ind, NULL, 'GENDER', df.ind[, factor(GENDER)])#
	set(df.ind, NULL, 'RISK', df.ind[, factor(RISK)])
df.ind
set(df.ind, df.ind[, which(DOD==-1)], 'DOD', pipeline.args['yr.end',][, as.numeric(v)]+1.)#
	tmp			<- subset(df.trm, select=c(IDREC, TIME_TR))#
	setnames(tmp, 'IDREC','IDPOP')#
	df.ind		<- merge(df.ind, tmp, by='IDPOP', all.x=TRUE)
df.ind
cat(paste('\nFound individuals with a valid record, n=', nrow(df.ind)))#
	cat(paste('\nFound individuals with an infection event, n=', nrow(subset(df.ind,!is.na(TIME_TR)))))#
	cat(paste('\nFound index cases, n=', nrow(subset(df.ind,IDPOP<0))))
cat(paste('\nFound transmissions, n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))
df.trm
tmp		<- subset( df.trm, TIME_TR>=as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )[, IDREC]#
	df.trm	<- subset( df.trm, TIME_TR<as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )
df.trm
tmp
df.ind	<- subset(df.ind, !IDPOP%in%tmp)#
	df.ind	<- subset(df.ind, is.na(DOB) | DOB<pipeline.args['yr.end',][, as.numeric(v)] )#
	cat(paste('\nFound individuals born before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.ind)))#
	cat(paste('\nFound transmissions before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))		#
	stopifnot( length(setdiff( df.trm[, IDTR], df.ind[, IDPOP] ))==0 )#
	stopifnot( length(setdiff( df.trm[, IDREC], df.ind[, IDPOP] ))==0 )
stopifnot( length(setdiff( subset(df.trm, IDTR>0)[, IDTR], df.ind[, IDPOP] ))==0 )
tmp		<- PANGEA.ImportSimulator(df.ind, df.trm, epi.import= pipeline.args['epi.import',][,as.numeric(v)])
tmp		<- subset(df.ind, select=c(IDPOP, TIME_TR))#
	setnames(tmp, c('IDPOP','TIME_TR'), c('IDTR','IDTR_TIME_INFECTED') )#
	setkey(tmp, IDTR)
tmp
df.ind
df.ind[, range(TIME_TR,na.rm=TRUE)]
merge(df.trm, unique(tmp), by='IDTR', all.x=TRUE)
df.trm	<- merge(df.trm, unique(tmp), by='IDTR', all.x=TRUE)
df.trm
df.ind
tmp		<- PANGEA.ImportSimulator(df.ind, df.trm, epi.import= pipeline.args['epi.import',][,as.numeric(v)])
set.seed( pipeline.args['s.seed',][, as.numeric(v)] )#
	##
	df.trm	<- as.data.table(read.csv(infile.trm, stringsAsFactors=FALSE, sep=' ', dec='.'))#
	setnames(df.trm, c("IdInfector","IdInfected","TimeOfInfection","IsInfectorAcute"), c('IDTR','IDREC','TIME_TR','TR_ACUTE'))		#
	#	transmissions happen either at baseline, or at unique times.#
	#	the epi simulation allocates transmissions in 1/48 of a year, so draw a uniform number if there are more transmission per TIME_TR#
	df.trm	<- df.trm[, {#
				z<- TIME_TR#
				if(TIME_TR>pipeline.args['yr.start',][, as.numeric(v)] & length(IDTR)>1)#
					z<- sort(runif(length(IDTR), z, min(pipeline.args['yr.end',][, as.numeric(v)], z+pipeline.args['epi.dt',][, as.numeric(v)])))#
				list(IDTR=IDTR, IDREC=IDREC, TIME_TR.new=z, TR_ACUTE=TR_ACUTE, l=length(IDTR))#
			}, by='TIME_TR']#
	df.trm[, TIME_TR:=NULL]#
	setnames(df.trm, 'TIME_TR.new', 'TIME_TR')	#
	#	set baseline cases as negative ID#
	tmp		<- df.trm[, which(IDTR=='-1')]#
	cat(paste('\nFound index cases, n=', length(tmp)))
rev(-seq_along(tmp))
set(df.trm, tmp, 'IDTR', rev(-seq_along(tmp)))#
	#	check that all transmission times except baseline are unique#
	tmp		<- subset(df.trm, TIME_TR>pipeline.args['yr.start',][, as.numeric(v)])#
	stopifnot( nrow(tmp)==tmp[,length(unique(TIME_TR))] )	#
	cat(paste('\nFound transmissions, n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))
df.trm
df.ind	<- as.data.table(read.csv(infile.ind, stringsAsFactors=FALSE))		#
	setnames(df.ind, c("Id","Gender","DoB","DateOfDeath","RiskGroup","Circumcised"), c('IDPOP','GENDER','DOB','DOD','RISK','CIRCM'))#
	set(df.ind, df.ind[, which(CIRCM=='')], 'CIRCM', NA_character_)#
	set(df.ind, NULL, 'CIRCM', df.ind[, factor(CIRCM)])#
	set(df.ind, NULL, 'GENDER', df.ind[, factor(GENDER)])#
	set(df.ind, NULL, 'RISK', df.ind[, factor(RISK)])	#
	set(df.ind, df.ind[, which(DOD==-1)], 'DOD', pipeline.args['yr.end',][, as.numeric(v)]+1.)#
	tmp			<- subset(df.trm, select=c(IDREC, TIME_TR))#
	setnames(tmp, 'IDREC','IDPOP')#
	df.ind		<- merge(df.ind, tmp, by='IDPOP', all.x=TRUE)#
	cat(paste('\nFound individuals with a valid record, n=', nrow(df.ind)))#
	cat(paste('\nFound individuals with an infection event, n=', nrow(subset(df.ind,!is.na(TIME_TR)))))#
	cat(paste('\nFound index cases, n=', nrow(subset(df.ind,IDPOP<0))))#
	#	add time of infection of transmitter to df.trm	#
	tmp		<- subset(df.ind, select=c(IDPOP, TIME_TR))#
	setnames(tmp, c('IDPOP','TIME_TR'), c('IDTR','IDTR_TIME_INFECTED') )#
	setkey(tmp, IDTR)
tmp
df.trm	<- merge(df.trm, unique(tmp), by='IDTR', all.x=TRUE)		#
	##
	#	reduce to time frame of interest#
	##
	tmp		<- subset( df.trm, TIME_TR>=as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )[, IDREC]
tmp
df.trm
subset( df.trm, TIME_TR<as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )
df.trm	<- subset( df.trm, TIME_TR<as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )#
	df.ind	<- subset(df.ind, !IDPOP%in%tmp)#
	df.ind	<- subset(df.ind, is.na(DOB) | DOB<pipeline.args['yr.end',][, as.numeric(v)] )#
	cat(paste('\nFound individuals born before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.ind)))#
	cat(paste('\nFound transmissions before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))		#
	stopifnot( length(setdiff( subset(df.trm, IDTR>0)[, IDTR], df.ind[, IDPOP] ))==0 )#
	stopifnot( length(setdiff( df.trm[, IDREC], df.ind[, IDPOP] ))==0 )
epi.import= pipeline.args['epi.import',][,as.numeric(v)]
epi.import
tmp		<- df.trm[, which(IDTR>0)]	  #
	cat(paste('\nFound transmissions within population, n=', length(tmp)))
tmp2	<- round(nrow(df.trm)*epi.import) - ( nrow(df.trm)-length(tmp)-1 )#
	tmp2	<- max(tmp2, 0)#
	cat(paste('\nRe-setting infecteds as index cases after imports, n=', tmp2))
stopifnot(length(tmp)>1)#
	stopifnot(length(tmp2)>=0)#
	tmp2	<- as.integer(sample( tmp, tmp2, replace=FALSE ))	#
	#	update df.trm#
	setkey(df.trm, TIME_TR)#
	set(df.trm, tmp2, 'IDTR', df.trm[, min(IDTR)]-rev(seq_along(tmp2)) )
df.trm
tmp		<- subset(df.trm, select=c(IDTR, IDTR_TIME_INFECTED))#
	setnames(tmp, c('IDTR', 'IDTR_TIME_INFECTED'), c('IDPOP', 'TIME_TR'))#
	tmp2	<- subset(df.trm, select=c(IDREC, TIME_TR))#
	setnames(tmp2, 'IDREC', 'IDPOP')#
	tmp		<- rbind( tmp, tmp2 )#
	setkey(tmp, IDPOP)
tmp
df.ind	<- merge( df.ind, unique(tmp), by=c('IDPOP','TIME_TR'), all.x=TRUE, all.y=TRUE )#
	#	#
	cat(paste('\nProportion of imported transmissions, p=', (nrow(subset(df.trm, IDTR<0))-1)/nrow(df.trm) ))#
	stopifnot( length(setdiff(df.trm[, IDTR], df.ind[, IDPOP]))==0 )#
	stopifnot( length(setdiff(df.trm[, IDREC], df.ind[, IDPOP]))==0 )
tmp<- list(df.ind=df.ind, df.trm=df.trm)
df.trm	<- tmp$df.trm#
	df.ind	<- tmp$df.ind
df.trm
tmp		<- df.trm[, which(is.na(IDTR_TIME_INFECTED))]	#
	set( df.trm, tmp, 'IDTR_TIME_INFECTED', df.trm[tmp, runif(1, TIME_TR-5, TIME_TR)] )
df.trm
set( df.trm, tmp, 'IDTR_TIME_INFECTED', df.trm[tmp, runif(length(tmp), TIME_TR-5, TIME_TR)] )
df.trm
tmp			<- subset( df.trm, IDTR<0, select=IDTR )#
	tmp2		<- rnorm(2*nrow(tmp), 1960, 7)#
	tmp2		<- tmp2[ tmp2>1940 & tmp2<1980]#
	stopifnot( nrow(tmp)<=length(tmp2) )#
	length(tmp2)<- nrow(tmp)	#
	set(tmp, NULL, 'IDTR_TIME_INFECTED.new', tmp2 )
tmp
df.trm		<- merge( df.trm, tmp, by='IDTR', all.x=TRUE )#
	tmp2		<- df.trm[, which(!is.na(IDTR_TIME_INFECTED.new) & IDTR_TIME_INFECTED<IDTR_TIME_INFECTED.new)]#
	set(df.trm, tmp2, 'IDTR_TIME_INFECTED.new', df.trm[tmp2, IDTR_TIME_INFECTED])#
	#	#
	tmp2		<- df.trm[, which(!is.na(IDTR_TIME_INFECTED.new))]#
	set(df.trm, tmp2, 'IDTR_TIME_INFECTED', df.trm[tmp2, IDTR_TIME_INFECTED.new])#
	df.trm[, IDTR_TIME_INFECTED.new:=NULL]#
	#	#
	stopifnot( nrow(subset(df.trm, TIME_TR<IDTR_TIME_INFECTED))==0 )#
	stopifnot( nrow(subset(df.trm, is.na(TIME_TR)))==0 )#
	stopifnot( nrow(subset(df.trm, is.na(IDTR_TIME_INFECTED)))==0 )
tmp			<- subset( df.trm, IDTR<0, select=c(IDTR, IDTR_TIME_INFECTED) )#
	setnames(tmp, c('IDTR','IDTR_TIME_INFECTED'), c('IDPOP','IDTR_TIME_INFECTED.new'))#
	df.ind		<- merge(df.ind, tmp, by='IDPOP', all.x=TRUE)#
	tmp2		<- df.ind[, which(!is.na(IDTR_TIME_INFECTED.new))]#
	set(df.ind, tmp2, 'TIME_TR', df.ind[tmp2, IDTR_TIME_INFECTED.new])#
	df.ind[, IDTR_TIME_INFECTED.new:=NULL]
PANGEA.ImportSimulator.SimulateStartingTimeOfIndexCase<- function(df.ind, df.trm)#
{#
	#	add transmission time for index case -- this is 40 years back in time so we can sample a starting sequence #
	#	and then generate a long branch to the transmission chain in the population. No hack. :-)#
	tmp			<- subset( df.trm, IDTR<0, select=IDTR )#
	tmp2		<- rnorm(2*nrow(tmp), 1960, 7)#
	tmp2		<- tmp2[ tmp2>1940 & tmp2<1980]#
	stopifnot( nrow(tmp)<=length(tmp2) )#
	length(tmp2)<- nrow(tmp)	#
	set(tmp, NULL, 'IDTR_TIME_INFECTED.new', tmp2 )#
	##
	df.trm		<- merge( df.trm, tmp, by='IDTR', all.x=TRUE )#
	tmp2		<- df.trm[, which(!is.na(IDTR_TIME_INFECTED.new) & IDTR_TIME_INFECTED<IDTR_TIME_INFECTED.new)]#
	set(df.trm, tmp2, 'IDTR_TIME_INFECTED.new', df.trm[tmp2, IDTR_TIME_INFECTED])#
	#	#
	tmp2		<- df.trm[, which(!is.na(IDTR_TIME_INFECTED.new))]#
	set(df.trm, tmp2, 'IDTR_TIME_INFECTED', df.trm[tmp2, IDTR_TIME_INFECTED.new])#
	df.trm[, IDTR_TIME_INFECTED.new:=NULL]#
	#	#
	stopifnot( nrow(subset(df.trm, TIME_TR<IDTR_TIME_INFECTED))==0 )#
	stopifnot( nrow(subset(df.trm, is.na(TIME_TR)))==0 )#
	stopifnot( nrow(subset(df.trm, is.na(IDTR_TIME_INFECTED)))==0 )#
	##
	tmp			<- subset( df.trm, IDTR<0, select=c(IDTR, IDTR_TIME_INFECTED) )#
	setnames(tmp, c('IDTR','IDTR_TIME_INFECTED'), c('IDPOP','IDTR_TIME_INFECTED.new'))#
	df.ind		<- merge(df.ind, tmp, by='IDPOP', all.x=TRUE)#
	tmp2		<- df.ind[, which(!is.na(IDTR_TIME_INFECTED.new))]#
	set(df.ind, tmp2, 'TIME_TR', df.ind[tmp2, IDTR_TIME_INFECTED.new])#
	df.ind[, IDTR_TIME_INFECTED.new:=NULL]#
	list(df.ind=df.ind, df.trm=df.trm)#
}#
##--------------------------------------------------------------------------------------------------------#
#	simulate imports during the epidemic	#
#	olli originally written 11-09-2014#
##--------------------------------------------------------------------------------------------------------#
PANGEA.ImportSimulator.SimulateIndexCase<- function(df.ind, df.trm, epi.import)#
{	#
	#	model imports by re-assigning a fraction of infecteds as 'index cases'#
	#	assume there are no imports at the moment, and that we know the time of infection of the imports#
	tmp		<- df.trm[, which(IDTR>0)]	  #
	cat(paste('\nFound transmissions within population, n=', length(tmp)))#
	tmp2	<- round(nrow(df.trm)*epi.import) - ( nrow(df.trm)-length(tmp)-1 )#
	tmp2	<- max(tmp2, 0)#
	cat(paste('\nRe-setting infecteds as index cases after imports, n=', tmp2))#
	stopifnot(length(tmp)>1)#
	stopifnot(length(tmp2)>=0)#
	tmp2	<- as.integer(sample( tmp, tmp2, replace=FALSE ))	#
	#	update df.trm#
	setkey(df.trm, TIME_TR)#
	set(df.trm, tmp2, 'IDTR', df.trm[, min(IDTR)]-rev(seq_along(tmp2)) )#
	#	update df.ind#
	tmp		<- subset(df.trm, select=c(IDTR, IDTR_TIME_INFECTED))#
	setnames(tmp, c('IDTR', 'IDTR_TIME_INFECTED'), c('IDPOP', 'TIME_TR'))#
	tmp2	<- subset(df.trm, select=c(IDREC, TIME_TR))#
	setnames(tmp2, 'IDREC', 'IDPOP')#
	tmp		<- rbind( tmp, tmp2 )#
	setkey(tmp, IDPOP)#
	df.ind	<- merge( df.ind, unique(tmp), by=c('IDPOP','TIME_TR'), all.x=TRUE, all.y=TRUE )#
	#	#
	cat(paste('\nProportion of imported transmissions, p=', (nrow(subset(df.trm, IDTR<0))-1)/nrow(df.trm) ))#
	stopifnot( length(setdiff(df.trm[, IDTR], df.ind[, IDPOP]))==0 )#
	stopifnot( length(setdiff(df.trm[, IDREC], df.ind[, IDPOP]))==0 )#
	list(df.ind=df.ind, df.trm=df.trm)#
}
set.seed( pipeline.args['s.seed',][, as.numeric(v)] )#
	##
	#	prepare transmissions#
	#	#
	df.trm	<- as.data.table(read.csv(infile.trm, stringsAsFactors=FALSE, sep=' ', dec='.'))#
	setnames(df.trm, c("IdInfector","IdInfected","TimeOfInfection","IsInfectorAcute"), c('IDTR','IDREC','TIME_TR','TR_ACUTE'))		#
	#	transmissions happen either at baseline, or at unique times.#
	#	the epi simulation allocates transmissions in 1/48 of a year, so draw a uniform number if there are more transmission per TIME_TR#
	df.trm	<- df.trm[, {#
				z<- TIME_TR#
				if(TIME_TR>pipeline.args['yr.start',][, as.numeric(v)] & length(IDTR)>1)#
					z<- sort(runif(length(IDTR), z, min(pipeline.args['yr.end',][, as.numeric(v)], z+pipeline.args['epi.dt',][, as.numeric(v)])))#
				list(IDTR=IDTR, IDREC=IDREC, TIME_TR.new=z, TR_ACUTE=TR_ACUTE, l=length(IDTR))#
			}, by='TIME_TR']#
	df.trm[, TIME_TR:=NULL]#
	setnames(df.trm, 'TIME_TR.new', 'TIME_TR')	#
	#	set baseline cases as negative ID#
	tmp		<- df.trm[, which(IDTR=='-1')]#
	cat(paste('\nFound index cases, n=', length(tmp)))#
	set(df.trm, tmp, 'IDTR', rev(-seq_along(tmp)))#
	#	check that all transmission times except baseline are unique#
	tmp		<- subset(df.trm, TIME_TR>pipeline.args['yr.start',][, as.numeric(v)])#
	stopifnot( nrow(tmp)==tmp[,length(unique(TIME_TR))] )	#
	cat(paste('\nFound transmissions, n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))#
	##
	#	prepare patient metavariables#
	##
	df.ind	<- as.data.table(read.csv(infile.ind, stringsAsFactors=FALSE))		#
	setnames(df.ind, c("Id","Gender","DoB","DateOfDeath","RiskGroup","Circumcised"), c('IDPOP','GENDER','DOB','DOD','RISK','CIRCM'))#
	set(df.ind, df.ind[, which(CIRCM=='')], 'CIRCM', NA_character_)#
	set(df.ind, NULL, 'CIRCM', df.ind[, factor(CIRCM)])#
	set(df.ind, NULL, 'GENDER', df.ind[, factor(GENDER)])#
	set(df.ind, NULL, 'RISK', df.ind[, factor(RISK)])	#
	set(df.ind, df.ind[, which(DOD==-1)], 'DOD', pipeline.args['yr.end',][, as.numeric(v)]+1.)#
	tmp			<- subset(df.trm, select=c(IDREC, TIME_TR))#
	setnames(tmp, 'IDREC','IDPOP')#
	df.ind		<- merge(df.ind, tmp, by='IDPOP', all.x=TRUE)#
	cat(paste('\nFound individuals with a valid record, n=', nrow(df.ind)))#
	cat(paste('\nFound individuals with an infection event, n=', nrow(subset(df.ind,!is.na(TIME_TR)))))#
	cat(paste('\nFound index cases, n=', nrow(subset(df.ind,IDPOP<0))))#
	#	add time of infection of transmitter to df.trm	#
	tmp		<- subset(df.ind, select=c(IDPOP, TIME_TR))#
	setnames(tmp, c('IDPOP','TIME_TR'), c('IDTR','IDTR_TIME_INFECTED') )#
	setkey(tmp, IDTR)#
	df.trm	<- merge(df.trm, unique(tmp), by='IDTR', all.x=TRUE)		#
	##
	#	reduce to time frame of interest#
	##
	tmp		<- subset( df.trm, TIME_TR>=as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )[, IDREC]#
	df.trm	<- subset( df.trm, TIME_TR<as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )#
	df.ind	<- subset(df.ind, !IDPOP%in%tmp)#
	df.ind	<- subset(df.ind, is.na(DOB) | DOB<pipeline.args['yr.end',][, as.numeric(v)] )#
	cat(paste('\nFound individuals born before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.ind)))#
	cat(paste('\nFound transmissions before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))		#
	stopifnot( length(setdiff( subset(df.trm, IDTR>0)[, IDTR], df.ind[, IDPOP] ))==0 )#
	stopifnot( length(setdiff( df.trm[, IDREC], df.ind[, IDPOP] ))==0 )#
	#	simulate a fraction of transmissions to be imports#
	tmp		<- PANGEA.ImportSimulator.SimulateIndexCase(df.ind, df.trm, epi.import= pipeline.args['epi.import',][,as.numeric(v)])#
	df.trm	<- tmp$df.trm#
	df.ind	<- tmp$df.ind#
	##
	#	set infection times for index case#
	##
	#	add IDTR_TIME_INFECTED for baseline cases#
	tmp		<- df.trm[, which(is.na(IDTR_TIME_INFECTED))]	#
	set( df.trm, tmp, 'IDTR_TIME_INFECTED', df.trm[tmp, runif(length(tmp), TIME_TR-5, TIME_TR)] )#
	tmp		<- PANGEA.ImportSimulator.SimulateStartingTimeOfIndexCase(df.ind, df.trm)#
	df.trm	<- tmp$df.trm#
	df.ind	<- tmp$df.ind
df.ind
suppressWarnings( df.trm[, YR:= df.trm[, floor(TIME_TR)]] )#
	df.epi		<- df.trm[, list(INC=length(IDREC), IMPORT=length(which(IDTR<0))), by='YR']#
	tmp			<- df.epi[, 	{#
				alive		<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR )#
				infected	<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR  &  floor(df.ind[['TIME_TR']])<=YR )#
				list(POP=length(alive), PREV=length(infected))				#
			},by='YR']#
	df.epi		<- merge( tmp, df.epi, by='YR' )	#
	set(df.epi, NULL, 'PREVp', df.epi[, PREV/POP])	#
	set(df.epi, NULL, 'INCp', df.epi[, INC/POP])#
	set(df.epi, NULL, 'IMPORTp', df.epi[, IMPORT/INC])#
	# 	SAMPLING PROBABILITIES and TOTALS PER YEAR#
	##
	#	Can we detect a 25% or 50% reduction in HIV incidence in the most recent 2 or 3 years #
	#	with 1%, 5%, 10% of all recent incident cases sampled?#
	##
	#	suppose exponentially increasing sampling over time#
	#	the number of incident cases sampled is the total sampled in that year * the proportion of incident cases out of all non-sampled cases to date#
	#	TODO this needs to be changed to fix the proportion of sequences sampled from incident#
	df.sample	<- subset( df.epi, YR>= pipeline.args['yr.start',][, as.numeric(v)] & YR<pipeline.args['yr.end',][, as.numeric(v)] )#
	#	exponential rate of increasing s.TOTAL (total sampling rate) per year#
	tmp			<- log( 1+pipeline.args['s.PREV.max',][, as.numeric(v)]-pipeline.args['s.PREV.min',][, as.numeric(v)] ) / df.sample[, diff(range(YR))]#
	tmp			<- df.sample[, exp( tmp*(YR-min(YR)) ) - 1 + pipeline.args['s.PREV.min',][, as.numeric(v)] ]#
	set(df.sample, NULL, 's.CUMTOTAL', tmp)		#
	set(df.sample, NULL, 's.n.CUMTOTAL', df.sample[, round(PREV*s.CUMTOTAL)])#
	set(df.sample, NULL, 's.n.TOTAL', c(df.sample[1, s.n.CUMTOTAL], df.sample[, diff(s.n.CUMTOTAL)]))	#
	set(df.sample, NULL, 's.n.INC', df.sample[, round(INC/(PREV-s.n.CUMTOTAL) * s.n.TOTAL)])#
	set(df.sample, NULL, 's.n.notINC', df.sample[, round(s.n.TOTAL-s.n.INC)])	#
	cat(paste('\n total number of sequences sampled=', df.sample[, sum( s.n.TOTAL )]))#
	cat(paste('\n prop of sequences sampled among HIV+=', df.sample[, sum( s.n.TOTAL )] / df.sample[, rev(PREV)[1]]))		#
	cat(paste('\n total number of incident sequences to sample=', df.sample[, sum( s.n.INC )]))#
	cat(paste('\n total number of non-incident sequences to sample=', df.sample[, sum( s.n.notINC )]))	#
	#	SAMPLE INFECTED INDIVIDUALS BASED ON NUMBERS PER YEAR#
	##
	#	sample incident cases by year#
	df.inds	<- copy(df.ind)#
	tmp		<- subset(df.trm, YR>= pipeline.args['yr.start',][, as.numeric(v)])#
	tmp		<- tmp[, {#
							z	<- df.sample[['s.n.INC']][ which(df.sample[['YR']]==YR) ]#
							z	<- sample(seq_along(IDREC), z)#
							list( 	IDPOP=IDREC[z], TIME_TR=TIME_TR[z], #
									TIME_SEQ=TIME_TR[z]+rexp(length(z), rate=1/(3*30))/365, #
									INCIDENT_SEQ=rep('Y',length(z) ) )#
						}, by='YR']#
	df.inds	<- merge(df.inds, subset(tmp, select=c(IDPOP, TIME_SEQ, INCIDENT_SEQ)), by='IDPOP', all.x=1)#
	cat(paste('\n total number of incident sequences sampled=', df.inds[, length(which(!is.na(TIME_SEQ)))] ))	#
	#	sample non-incident cases by year#
	for(yr in df.sample[, YR])		#TODO took out [-1] because there are s.n.notINC for DSPS in 1980#
	{#
		#	of all infected and not incident and not yet sampled, sample#
		cat(paste('\nadd non-incident samples in year',yr))#
		tmp		<- subset(df.inds, is.na(TIME_SEQ) & floor(DOB)<=yr & ceiling(DOD)>yr & floor(TIME_TR)<yr)#
		cat(paste('\navailable non-sampled non-incident cases in year=',nrow(tmp)))#
		tmp2	<- df.sample[['s.n.notINC']][ which(df.sample[['YR']]==yr) ]#
		tmp2	<- sample(seq_len(nrow(tmp)), tmp2)#
		#	set variables in df.inds#
		tmp		<- data.table(IDPOP= tmp[tmp2, IDPOP], TIME_SEQ=runif(length(tmp2), min=yr, max=yr+1), INCIDENT_SEQ=rep('N',length(tmp2) ))#
		cat(paste('\nsampled non-incident cases in year=',nrow(tmp)))#
		tmp2	<- sapply(tmp[,IDPOP], function(x) df.inds[,which(IDPOP==x)])#
		set(df.inds, tmp2, 'TIME_SEQ', tmp[,TIME_SEQ])#
		set(df.inds, tmp2, 'INCIDENT_SEQ', tmp[,INCIDENT_SEQ])		#
	}#
	cat(paste('\n total number of HIV+ in df.inds=', nrow(subset(df.inds, !is.na(TIME_TR)))))#
	cat(paste('\n total number of sampled HIV+ in df.inds=', nrow(subset(df.inds, !is.na(TIME_TR) & !is.na(TIME_SEQ)))))
df.epi
pipeline.args
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.2, epi.dt=1/48, epi.import=0.1)
suppressWarnings( df.trm[, YR:= df.trm[, floor(TIME_TR)]] )#
	df.epi		<- df.trm[, list(INC=length(IDREC), IMPORT=length(which(IDTR<0))), by='YR']#
	tmp			<- df.epi[, 	{#
				alive		<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR )#
				infected	<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR  &  floor(df.ind[['TIME_TR']])<=YR )#
				list(POP=length(alive), PREV=length(infected))				#
			},by='YR']#
	df.epi		<- merge( tmp, df.epi, by='YR' )	#
	set(df.epi, NULL, 'PREVp', df.epi[, PREV/POP])	#
	set(df.epi, NULL, 'INCp', df.epi[, INC/POP])#
	set(df.epi, NULL, 'IMPORTp', df.epi[, IMPORT/INC])#
	# 	SAMPLING PROBABILITIES and TOTALS PER YEAR#
	##
	#	Can we detect a 25% or 50% reduction in HIV incidence in the most recent 2 or 3 years #
	#	with 1%, 5%, 10% of all recent incident cases sampled?#
	##
	#	suppose exponentially increasing sampling over time#
	#	the number of incident cases sampled is the total sampled in that year * the proportion of incident cases out of all non-sampled cases to date#
	#	TODO this needs to be changed to fix the proportion of sequences sampled from incident#
	df.sample	<- subset( df.epi, YR>= pipeline.args['yr.start',][, as.numeric(v)] & YR<pipeline.args['yr.end',][, as.numeric(v)] )#
	#	exponential rate of increasing s.TOTAL (total sampling rate) per year#
	tmp			<- log( 1+pipeline.args['s.PREV.max',][, as.numeric(v)]-pipeline.args['s.PREV.min',][, as.numeric(v)] ) / df.sample[, diff(range(YR))]#
	tmp			<- df.sample[, exp( tmp*(YR-min(YR)) ) - 1 + pipeline.args['s.PREV.min',][, as.numeric(v)] ]#
	set(df.sample, NULL, 's.CUMTOTAL', tmp)		#
	set(df.sample, NULL, 's.n.CUMTOTAL', df.sample[, round(PREV*s.CUMTOTAL)])#
	set(df.sample, NULL, 's.n.TOTAL', c(df.sample[1, s.n.CUMTOTAL], df.sample[, diff(s.n.CUMTOTAL)]))	#
	set(df.sample, NULL, 's.n.INC', df.sample[, round(INC/(PREV-s.n.CUMTOTAL) * s.n.TOTAL)])#
	set(df.sample, NULL, 's.n.notINC', df.sample[, round(s.n.TOTAL-s.n.INC)])	#
	cat(paste('\n total number of sequences sampled=', df.sample[, sum( s.n.TOTAL )]))#
	cat(paste('\n prop of sequences sampled among HIV+=', df.sample[, sum( s.n.TOTAL )] / df.sample[, rev(PREV)[1]]))		#
	cat(paste('\n total number of incident sequences to sample=', df.sample[, sum( s.n.INC )]))#
	cat(paste('\n total number of non-incident sequences to sample=', df.sample[, sum( s.n.notINC )]))
df.inds	<- copy(df.ind)#
	tmp		<- subset(df.trm, YR>= pipeline.args['yr.start',][, as.numeric(v)])#
	tmp		<- tmp[, {#
							z	<- df.sample[['s.n.INC']][ which(df.sample[['YR']]==YR) ]#
							z	<- sample(seq_along(IDREC), z)#
							list( 	IDPOP=IDREC[z], TIME_TR=TIME_TR[z], #
									TIME_SEQ=TIME_TR[z]+rexp(length(z), rate=1/(3*30))/365, #
									INCIDENT_SEQ=rep('Y',length(z) ) )#
						}, by='YR']#
	df.inds	<- merge(df.inds, subset(tmp, select=c(IDPOP, TIME_SEQ, INCIDENT_SEQ)), by='IDPOP', all.x=1)#
	cat(paste('\n total number of incident sequences sampled=', df.inds[, length(which(!is.na(TIME_SEQ)))] ))	#
	#	sample non-incident cases by year#
	for(yr in df.sample[, YR])		#TODO took out [-1] because there are s.n.notINC for DSPS in 1980#
	{#
		#	of all infected and not incident and not yet sampled, sample#
		cat(paste('\nadd non-incident samples in year',yr))#
		tmp		<- subset(df.inds, is.na(TIME_SEQ) & floor(DOB)<=yr & ceiling(DOD)>yr & floor(TIME_TR)<yr)#
		cat(paste('\navailable non-sampled non-incident cases in year=',nrow(tmp)))#
		tmp2	<- df.sample[['s.n.notINC']][ which(df.sample[['YR']]==yr) ]#
		tmp2	<- sample(seq_len(nrow(tmp)), tmp2)#
		#	set variables in df.inds#
		tmp		<- data.table(IDPOP= tmp[tmp2, IDPOP], TIME_SEQ=runif(length(tmp2), min=yr, max=yr+1), INCIDENT_SEQ=rep('N',length(tmp2) ))#
		cat(paste('\nsampled non-incident cases in year=',nrow(tmp)))#
		tmp2	<- sapply(tmp[,IDPOP], function(x) df.inds[,which(IDPOP==x)])#
		set(df.inds, tmp2, 'TIME_SEQ', tmp[,TIME_SEQ])#
		set(df.inds, tmp2, 'INCIDENT_SEQ', tmp[,INCIDENT_SEQ])		#
	}#
	cat(paste('\n total number of HIV+ in df.inds=', nrow(subset(df.inds, !is.na(TIME_TR)))))#
	cat(paste('\n total number of sampled HIV+ in df.inds=', nrow(subset(df.inds, !is.na(TIME_TR) & !is.na(TIME_SEQ)))))
set(df.inds, NULL, 'TIME_SEQYR', df.inds[, floor(TIME_SEQ)])#
	tmp	<- subset(df.inds, !is.na(TIME_SEQ))[, list(s.n.TOTAL=length(IDPOP)), by='TIME_SEQYR']#
	setkey(tmp, TIME_SEQYR)#
	set(tmp,NULL,'s.n.CUMTOTAL',tmp[, cumsum(s.n.TOTAL)])#
	stopifnot(  tmp[,tail(s.n.CUMTOTAL,1)]==df.sample[, tail(s.n.CUMTOTAL,1)] ) #
	#	set sampling in df.trm#
	tmp		<- subset( df.inds, !is.na(TIME_SEQ), select=c(IDPOP, TIME_SEQ) )#
	setnames(tmp, c('IDPOP','TIME_SEQ'), c('IDREC','SAMPLED_REC'))#
	df.trms	<- merge(df.trm, tmp, by='IDREC', all.x=TRUE)#
	setnames(tmp, c('IDREC','SAMPLED_REC'), c('IDTR','SAMPLED_TR'))#
	df.trms	<- merge(df.trms, tmp, by='IDTR', all.x=TRUE)
require(igraph)#
	#	cluster with index case#
	tmp			<- subset(df.trms, select=c(IDTR, IDREC))			#
	tmp			<- graph.data.frame(tmp, directed=TRUE, vertices=NULL)#
	tmp			<- data.table(IDPOP=as.integer(V(tmp)$name), CLU=clusters(tmp, mode="weak")$membership)#
	tmp2		<- tmp[, list(CLU_SIZE=length(IDPOP)), by='CLU']#
	setkey(tmp2, CLU_SIZE)#
	tmp2[, IDCLU:=rev(seq_len(nrow(tmp2)))]#
	tmp			<- subset( merge(tmp, tmp2, by='CLU'), select=c(IDPOP, IDCLU) )#
	setnames(tmp, 'IDPOP', 'IDREC')#
	df.trms		<- merge( df.trms, tmp, by='IDREC', all.x=TRUE )#
	stopifnot( nrow(subset(df.trms, is.na(IDCLU)))==0 )#
	cat(paste('\nFound transmission clusters, n=', df.trms[, length(unique(IDCLU))]))#
	#	add IDCLU to df.inds#
	tmp			<- subset( df.trms, select=c(IDREC, IDTR, IDCLU) )#
	tmp			<- subset( melt(tmp, id.var='IDCLU', value.name='IDPOP'), select=c(IDPOP, IDCLU))#
	setkey(tmp, IDPOP, IDCLU)#
	tmp			<- unique(tmp)#
	df.inds		<- merge( df.inds, tmp, by='IDPOP', all.x=TRUE )
df.inds
df.trm
require(ggplot2)#
		require(reshape2)#
		#	plot numbers sampled, prevalent, incident#
		set(df.sample, NULL, 'POP', df.sample[, as.real(POP)])#
		set(df.sample, NULL, 'PREV', df.sample[, as.real(PREV)])#
		set(df.sample, NULL, 'INC', df.sample[, as.real(INC)])#
		tmp	<- data.table(	stat=c('POP','PREV','INC','IMPORTp','s.n.TOTAL','s.n.INC','s.n.notINC'), #
				stat.long=c('population size','HIV infected', 'HIV incident', 'Proportion incident\nimported', 'Total\nsequenced', 'Total\nincident\nsequenced', 'Total\nnon-incident\nsequenced'))#
		tmp	<- merge(	melt(df.sample, id.vars='YR', measure.vars=c('POP','PREV','INC','IMPORTp','s.n.TOTAL','s.n.INC','s.n.notINC'), variable.name='stat', value.name='v'),#
				tmp, by='stat' )#
		ggplot(tmp, aes(x=YR, y=v, group=stat.long)) + geom_point() +#
				scale_x_continuous(name='year', breaks=seq(1980,2020,2)) + scale_y_continuous(name='total')	+#
				facet_grid(stat.long ~ ., scales='free_y', margins=FALSE)#
		file<- paste(substr(outfile.ind, 1, nchar(outfile.ind)-7),'INFO_Totals.pdf',sep='')#
		cat(paste('\nPlotting to file',file))#
		ggsave(file=file, w=16, h=8)#
		#	plot distribution between transmission time and sequencing time#
		tmp	<- subset(df.inds, !is.na(TIME_SEQ))#
		set(tmp, NULL, 'TIME_TO_SEQ', tmp[, TIME_SEQ-TIME_TR])#
		ggplot(tmp, aes(x=TIME_TO_SEQ)) + geom_histogram(binwidth=1) + #
				scale_x_continuous(name='time from transmission to sequence sampling\n(years)', breaks=seq(0,100,2))#
		file<- paste(substr(outfile.ind, 1, nchar(outfile.ind)-7),'INFO_Time2Seq.pdf',sep='')#
		ggsave(file=file, w=8, h=8)
df.inds
df.trms
ggplot(df.trms, aes(x=IDTR)) + geom_histogram(binwidth=1)
ggplot(df.trms, aes(x=IDTR)) + geom_histogram()
df.trms[, list(N= length(IDREC)), by='IDTR']
tmp	<- df.trms[, list(N= length(IDREC)), by='IDTR']#
		ggplot(tmp, aes(x=N)) + geom_histogram(binwidth=1)
ggplot(tmp, aes(x=N)) + geom_histogram(binwidth=1, aes(y= ..density..))
ggplot(tmp, aes(x=N)) + geom_histogram(binwidth=1, aes(y= ..density..)) +#
				scale_x_continuous(name='recipients per source case\n(number)', breaks=seq(0,100,1))
ggplot(tmp, aes(x=N)) + geom_histogram(binwidth=1, aes(y= ..density..)) +#
				scale_x_continuous(name='recipients per source case\n(number)', breaks=seq(1,100,1)+0.5, label=seq(1,100,1))
?geom_histogram
ggplot(tmp, aes(x=N)) + geom_histogram(binwidth=1, aes(y= ..density..)) +#
				scale_x_continuous(name='recipients per source case\n(number)', breaks=seq(1,100,1)+0.5, label=seq(1,100,1)) +#
				scale_y_continuous(breaks=seq(0,1,0.1))
ggplot(tmp, aes(x=N)) + geom_histogram(binwidth=1, aes(y= ..density..)) +#
				scale_x_continuous(name='recipients per source case\n(number)', breaks=seq(1,100,1)+0.5, label=seq(1,100,1)) +#
				scale_y_continuous(breaks=seq(0,1,0.05))
file<- paste(substr(outfile.ind, 1, nchar(outfile.ind)-7),'INFO_RecSource.pdf',sep='')#
		ggsave(file=file, w=8, h=8)
file
df.inds
subset(df.inds, !is.na(TIME_TR) & IDPOP>0)
subset(df.inds, !is.na(TIME_TR) & IDPOP>0, select=c(TIME_TR, DOD))
tmp	<- subset(df.inds, !is.na(TIME_TR) & IDPOP>0, select=c(TIME_TR, DOD))#
		ggplot(tmp, aes(x=DOD-TIME_TR)) + geom_histogram(aes(y= ..density..))
ggplot(tmp, aes(x=DOD-TIME_TR)) + geom_histogram(binwidth=2, aes(y= ..density..))
ggplot(tmp, aes(x=DOD-TIME_TR)) + geom_histogram(binwidth=1, aes(y= ..density..))
ggplot(tmp, aes(x=DOD-TIME_TR)) + geom_histogram(binwidth=1, aes(y= ..density..)) +#
				scale_x_continuous(name='time to death for HIV+\n(years)', breaks=seq(1,100,2)) +
ggplot(tmp, aes(x=DOD-TIME_TR)) + geom_histogram(binwidth=1, aes(y= ..density..)) +#
				scale_x_continuous(name='time to death for HIV+\n(years)', breaks=seq(1,100,2))
file<- paste(substr(outfile.ind, 1, nchar(outfile.ind)-7),'INFO_T2DeathForInf.pdf',sep='')#
		ggsave(file=file, w=8, h=8)
file
set.seed( pipeline.args['s.seed',][, as.numeric(v)] )#
	##
	#	prepare transmissions#
	#	#
	df.trm	<- as.data.table(read.csv(infile.trm, stringsAsFactors=FALSE, sep=' ', dec='.'))#
	setnames(df.trm, c("IdInfector","IdInfected","TimeOfInfection","IsInfectorAcute"), c('IDTR','IDREC','TIME_TR','TR_ACUTE'))		#
	#	transmissions happen either at baseline, or at unique times.#
	#	the epi simulation allocates transmissions in 1/48 of a year, so draw a uniform number if there are more transmission per TIME_TR#
	df.trm	<- df.trm[, {#
				z<- TIME_TR#
				if(TIME_TR>pipeline.args['yr.start',][, as.numeric(v)] & length(IDTR)>1)#
					z<- sort(runif(length(IDTR), z, min(pipeline.args['yr.end',][, as.numeric(v)], z+pipeline.args['epi.dt',][, as.numeric(v)])))#
				list(IDTR=IDTR, IDREC=IDREC, TIME_TR.new=z, TR_ACUTE=TR_ACUTE, l=length(IDTR))#
			}, by='TIME_TR']#
	df.trm[, TIME_TR:=NULL]#
	setnames(df.trm, 'TIME_TR.new', 'TIME_TR')	#
	#	set baseline cases as negative ID#
	tmp		<- df.trm[, which(IDTR=='-1')]#
	cat(paste('\nFound index cases, n=', length(tmp)))#
	set(df.trm, tmp, 'IDTR', rev(-seq_along(tmp)))#
	#	check that all transmission times except baseline are unique#
	tmp		<- subset(df.trm, TIME_TR>pipeline.args['yr.start',][, as.numeric(v)])#
	stopifnot( nrow(tmp)==tmp[,length(unique(TIME_TR))] )	#
	cat(paste('\nFound transmissions, n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))#
	##
	#	prepare patient metavariables#
	##
	df.ind	<- as.data.table(read.csv(infile.ind, stringsAsFactors=FALSE))		#
	setnames(df.ind, c("Id","Gender","DoB","DateOfDeath","RiskGroup","Circumcised"), c('IDPOP','GENDER','DOB','DOD','RISK','CIRCM'))#
	set(df.ind, df.ind[, which(CIRCM=='')], 'CIRCM', NA_character_)#
	set(df.ind, NULL, 'CIRCM', df.ind[, factor(CIRCM)])#
	set(df.ind, NULL, 'GENDER', df.ind[, factor(GENDER)])#
	set(df.ind, NULL, 'RISK', df.ind[, factor(RISK)])	#
	set(df.ind, df.ind[, which(DOD==-1)], 'DOD', pipeline.args['yr.end',][, as.numeric(v)]+1.)#
	tmp			<- subset(df.trm, select=c(IDREC, TIME_TR))#
	setnames(tmp, 'IDREC','IDPOP')#
	df.ind		<- merge(df.ind, tmp, by='IDPOP', all.x=TRUE)#
	cat(paste('\nFound individuals with a valid record, n=', nrow(df.ind)))#
	cat(paste('\nFound individuals with an infection event, n=', nrow(subset(df.ind,!is.na(TIME_TR)))))#
	cat(paste('\nFound index cases, n=', nrow(subset(df.ind,IDPOP<0))))#
	#	add time of infection of transmitter to df.trm	#
	tmp		<- subset(df.ind, select=c(IDPOP, TIME_TR))#
	setnames(tmp, c('IDPOP','TIME_TR'), c('IDTR','IDTR_TIME_INFECTED') )#
	setkey(tmp, IDTR)#
	df.trm	<- merge(df.trm, unique(tmp), by='IDTR', all.x=TRUE)		#
	##
	#	reduce to time frame of interest#
	##
	tmp		<- subset( df.trm, TIME_TR>=as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )[, IDREC]#
	df.trm	<- subset( df.trm, TIME_TR<as.numeric( pipeline.args['yr.end',][, as.numeric(v)] ) )#
	df.ind	<- subset(df.ind, !IDPOP%in%tmp)#
	df.ind	<- subset(df.ind, is.na(DOB) | DOB<pipeline.args['yr.end',][, as.numeric(v)] )#
	cat(paste('\nFound individuals born before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.ind)))#
	cat(paste('\nFound transmissions before',pipeline.args['yr.end',][, as.numeric(v)],', n=', nrow(df.trm)))#
	cat(paste('\nTotal transmitters, n=', df.trm[, length(unique(IDTR))]))		#
	stopifnot( length(setdiff( subset(df.trm, IDTR>0)[, IDTR], df.ind[, IDPOP] ))==0 )#
	stopifnot( length(setdiff( df.trm[, IDREC], df.ind[, IDPOP] ))==0 )
df.trm
df.ind
tmp		<- PANGEA.ImportSimulator.SimulateIndexCase(df.ind, df.trm, epi.import= pipeline.args['epi.import',][,as.numeric(v)])#
	df.trm	<- tmp$df.trm#
	df.ind	<- tmp$df.ind
tmp		<- df.trm[, which(is.na(IDTR_TIME_INFECTED))]	#
	set( df.trm, tmp, 'IDTR_TIME_INFECTED', df.trm[tmp, runif(length(tmp), TIME_TR-5, TIME_TR)] )#
	tmp		<- PANGEA.ImportSimulator.SimulateStartingTimeOfIndexCase(df.ind, df.trm)#
	df.trm	<- tmp$df.trm#
	df.ind	<- tmp$df.ind
suppressWarnings( df.trm[, YR:= df.trm[, floor(TIME_TR)]] )#
	df.epi		<- df.trm[, list(INC=length(IDREC), IMPORT=length(which(IDTR<0))), by='YR']#
	tmp			<- df.epi[, 	{#
				alive		<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR )#
				infected	<- which( floor(df.ind[['DOB']])<=YR  &  ceiling(df.ind[['DOD']])>YR  &  floor(df.ind[['TIME_TR']])<=YR )#
				list(POP=length(alive), PREV=length(infected))				#
			},by='YR']#
	df.epi		<- merge( tmp, df.epi, by='YR' )	#
	set(df.epi, NULL, 'PREVp', df.epi[, PREV/POP])	#
	set(df.epi, NULL, 'INCp', df.epi[, INC/POP])#
	set(df.epi, NULL, 'IMPORTp', df.epi[, IMPORT/INC])#
	# 	SAMPLING PROBABILITIES and TOTALS PER YEAR#
	##
	#	Can we detect a 25% or 50% reduction in HIV incidence in the most recent 2 or 3 years #
	#	with 1%, 5%, 10% of all recent incident cases sampled?#
	##
	#	suppose exponentially increasing sampling over time#
	#	the number of incident cases sampled is the total sampled in that year * the proportion of incident cases out of all non-sampled cases to date#
	#	TODO this needs to be changed to fix the proportion of sequences sampled from incident#
	df.sample	<- subset( df.epi, YR>= pipeline.args['yr.start',][, as.numeric(v)] & YR<pipeline.args['yr.end',][, as.numeric(v)] )#
	#	exponential rate of increasing s.TOTAL (total sampling rate) per year#
	tmp			<- log( 1+pipeline.args['s.PREV.max',][, as.numeric(v)]-pipeline.args['s.PREV.min',][, as.numeric(v)] ) / df.sample[, diff(range(YR))]#
	tmp			<- df.sample[, exp( tmp*(YR-min(YR)) ) - 1 + pipeline.args['s.PREV.min',][, as.numeric(v)] ]#
	set(df.sample, NULL, 's.CUMTOTAL', tmp)		#
	set(df.sample, NULL, 's.n.CUMTOTAL', df.sample[, round(PREV*s.CUMTOTAL)])#
	set(df.sample, NULL, 's.n.TOTAL', c(df.sample[1, s.n.CUMTOTAL], df.sample[, diff(s.n.CUMTOTAL)]))	#
	set(df.sample, NULL, 's.n.INC', df.sample[, round(INC/(PREV-s.n.CUMTOTAL) * s.n.TOTAL)])#
	set(df.sample, NULL, 's.n.notINC', df.sample[, round(s.n.TOTAL-s.n.INC)])	#
	cat(paste('\n total number of sequences sampled=', df.sample[, sum( s.n.TOTAL )]))#
	cat(paste('\n prop of sequences sampled among HIV+=', df.sample[, sum( s.n.TOTAL )] / df.sample[, rev(PREV)[1]]))		#
	cat(paste('\n total number of incident sequences to sample=', df.sample[, sum( s.n.INC )]))#
	cat(paste('\n total number of non-incident sequences to sample=', df.sample[, sum( s.n.notINC )]))
df.sample
6953*0.2
indir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=TRUE)
infile
pwd
CODE.HOME
CODE.HOME	<<- "/Users/Oliver/git/HPTN071sim/source/rPANGEAHIVsim"
roxygenize(CODE.HOME)
library(roxygen2)
roxygenize(CODE.HOME)
require(phytools)#
	tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)#
	stopifnot(length(infile)==1)#
	#	load simulated data#
	file			<- paste(indir, '/', infile, sep='')#
	cat(paste('\nLoading file', file))#
	load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
	#	load aligned HXB2 as outgroup#
	load('/Users/Oliver/git/HPTN071sim/data_rootseq/PANGEA_SSAfg_140806_HXB2outgroup.R')	#
	file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
	cat(paste('\nLoading outgroup seq from file', file))#
	load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"
str(df.seq)
tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.gag		<- as.DNAbin(tmp)#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.pol		<- as.DNAbin(tmp)	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.env		<- as.DNAbin(tmp)#
	#get R2 for df.seq.pol#
	df.seq			<- df.seq.pol#
	df.seq			<- rbind(df.seq, outgroup.seq.pol[, seq_len(ncol(df.seq))])#
	#	get NJ tree	#
	tmp				<- dist.dna(df.seq)#
	nj				<- nj(tmp)#
	tmp				<- which(nj$tip.label=="HXB2")#
	nj				<- reroot(nj, tmp, nj$edge.length[which(nj$edge[,2]==tmp)])#
	nj				<- ladderize(nj)
file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJ.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(nj, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()
nj				<- drop.tip(nj,'HXB2')#
	tmp				<- node.depth.edgelength(nj)#
	nj.info			<- data.table(LABEL=nj$tip.label, ROOT2TIP=tmp[seq_len(Ntip(nj))] )#
	set(nj.info, NULL, 'CALENDAR_TIME', nj.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=nj.info)		 #
	set( nj.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))
ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 pol sequences)') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))
file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_polR2.pdf', sep='' )#
	ggsave(file=file, w=10, h=6)
require(phytools)#
	tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)#
	stopifnot(length(infile)==1)#
	#	load simulated data#
	file			<- paste(indir, '/', infile, sep='')#
	cat(paste('\nLoading file', file))#
	load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
	#	load outgroup sequences#
	file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
	cat(paste('\nLoading outgroup seq from file', file))#
	load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.gag		<- as.DNAbin(tmp)#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.pol		<- as.DNAbin(tmp)	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.env		<- as.DNAbin(tmp)#
	##
	#	get R2 for df.seq.pol#
	##
	seq				<- df.seq.pol#
	seq				<- rbind(seq, outgroup.seq.pol[, seq_len(ncol(seq))])#
	#	get NJ tree	#
	tmp				<- dist.dna(seq)#
	nj				<- nj(tmp)#
	tmp				<- which(nj$tip.label=="HXB2")#
	nj				<- reroot(nj, tmp, nj$edge.length[which(nj$edge[,2]==tmp)])#
	nj				<- ladderize(nj)		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJpol.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(nj, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()			#
	#	get root to tip divergence#
	nj				<- drop.tip(nj,'HXB2')#
	tmp				<- node.depth.edgelength(nj)#
	nj.info			<- data.table(LABEL=nj$tip.label, ROOT2TIP=tmp[seq_len(Ntip(nj))] )#
	set(nj.info, NULL, 'CALENDAR_TIME', nj.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=nj.info)		 #
	set( nj.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 pol sequences)') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJpolR2.pdf', sep='' )#
	ggsave(file=file, w=10, h=6)
seq				<- cbind(df.seq.gag,df.seq.pol,df.seq.env)
df.seq.gag
outgroup.seq.gag
tmp				<- cbind(outgroup.seq.gag[,1:ncol(df.seq.gag)], outgroup.seq.pol, outgroup.seq.env)
tmp
seq				<- rbind(seq,tmp)
tmp				<- dist.dna(seq)#
	nj				<- nj(tmp)#
	tmp				<- which(nj$tip.label=="HXB2")#
	nj				<- reroot(nj, tmp, nj$edge.length[which(nj$edge[,2]==tmp)])#
	nj				<- ladderize(nj)		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJ.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(nj, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()
nj				<- drop.tip(nj,'HXB2')#
	tmp				<- node.depth.edgelength(nj)#
	nj.info			<- data.table(LABEL=nj$tip.label, ROOT2TIP=tmp[seq_len(Ntip(nj))] )#
	set(nj.info, NULL, 'CALENDAR_TIME', nj.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=nj.info)		 #
	set( nj.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 concatenated sequences)') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJR2.pdf', sep='' )
ggsave(file=file, w=10, h=6)
require(phytools)#
	tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)#
	stopifnot(length(infile)==1)#
	#	load simulated data#
	file			<- paste(indir, '/', infile, sep='')#
	cat(paste('\nLoading file', file))#
	load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
	#	load outgroup sequences#
	file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
	cat(paste('\nLoading outgroup seq from file', file))#
	load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.gag		<- as.DNAbin(tmp)#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.pol		<- as.DNAbin(tmp)	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.env		<- as.DNAbin(tmp)#
	##
	#	get R2 for df.seq.pol#
	##
	seq				<- df.seq.pol#
	seq				<- rbind(seq, outgroup.seq.pol[, seq_len(ncol(seq))])
require(hivclust)
indir
seq
infile.seq.sig	<- "Sun_Sep_14_12/59/06_2013"#
#
	infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq_',gsub('/',':',infile.seq.sig),'.R',sep='')
infile.seq
infile.seq.sig	<- "Sun_Sep_14_12/59/06_2013"#
	infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq',sep='')#
	file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )
file
infile.seq
cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)
cat(cmd)
infile.seq.sig	<- "Sun_Sep_14_12/59/06_2013"#
	infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq',sep='')#
	file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )#
	#	run ExaML#
	cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile.seq, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)
cat(cmd)
setwd("/Users/Oliver/git/hivclust/pkg"); source("misc/hivclu.startme.R")
infile.seq.sig	<- "Sun_Sep_14_12/59/06_2013"#
	infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq',sep='')#
	file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )#
	#	run ExaML#
	cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile.seq, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)
cat(cmd)
tmp				<- paste(strsplit(date(),split=' ')[[1]],collapse='_',sep='')#
	outfile			<- paste("exa",tmp,sep='.')
outfile
cmd.hpccaller(outdir, paste("exa",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.'), cmd)
HIVC.CODE.HOME
HIVC.CODE.HOME<- "/Users/Oliver/git/hivclust"
PR.FIRSTSEQ		<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=FIRSTSEQ",sep='/')#
#
#' @export#
PR.GENDISTMAT	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=GENDISTMAT",sep='/')#
#
#' @export#
PR.PRECLUST		<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=PRECLUST",sep='/')#
#
#' @export#
PR.CLUST		<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=CLUST",sep='/')#
#
#' @export#
PR.CLUSTTPTN	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=CLUSTTPTN",sep='/')#
#
#' @export#
PR.CLUSTMSM		<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=CLUSTMSM",sep='/')#
#
#' @export#
PR.EXAML.BSCREATE	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BOOTSTRAPSEQ",sep='/')#
#
#' @export#
PR.RECOMB.3SEQ	<- system.file(package="hivclust", "ext", "3seq") #
#
#' @export#
PR.RECOMB.PROCESS3SEQOUTPUT	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=RECOMB.PROCESS3SEQOUT",sep='/')#
#
#' @export#
PR.RECOMB.CHECKCANDIDATES	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=RECOMB.CHECKCANDIDATES",sep='/')#
#
#' @export#
PR.RECOMB.PLOTINCONGRUENCE	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=RECOMB.PLOTINCONGRUENCE",sep='/')#
#
#' @export#
PR.EXAML.PARSER	<- system.file(package="hivclust", "ext", "ExaML-parser") #
#
#' @export#
PR.EXAML.STARTTREE	<- system.file(package="hivclust", "ext", "ExaML-parsimonator")#
#
#' @export#
PR.EXAML.EXAML	<- system.file(package="hivclust", "ext", "examl")#
#
#' @export#
PR.EXAML.BS		<- system.file(package="hivclust", "ext", "ExaML-raxml")#
#
#' @export#
PR.BEAST		<- {tmp<- c("/Applications/BEAST_1.7.5/bin/beast","beast"); names(tmp)<- c("debug","cx1.hpc.ic.ac.uk"); tmp } #
#
#' @export#
PR.BEASTMCC		<- {tmp<- c("/Applications/BEAST_1.7.5/bin/treeannotator","treeannotator"); names(tmp)<- c("debug","cx1.hpc.ic.ac.uk"); tmp }#
#
#' @export#
PR.BEASTEVALRUN	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEASTEVALRUN",sep='/')#
#
#' @export#
PR.BEASTPOOLRUN	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEASTPOOLRUN",sep='/')#
#
#' @export#
PR.BEAST2		<- system.file(package="hivclust", "ext", "beast2.jar") #
#
#' @export#
PR.BEAST2SA		<- system.file(package="hivclust", "ext", "beast2-SA.jar")#
#
#' @export#
PR.BEAST2.CLUTREES.PIPE	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEAST2.PIPE.CLUTREES",sep='/')#
#
#' @export#
PR.BEAST2CLUTREES	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEAST2.CLUTREES",sep='/')#
#
#' @export#
PR.BEASTPARSER	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEAST.READNEXUS",sep='/')#
#
#' @export#
PR.BEAST2CLUPOSTERIOR	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEAST2.CLUPOSTERIOR",sep='/')#
#
#' @export#
PR.BEAST2.PLOTCLUTREES	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BEAST2.PLOTCLUTREES",sep='/')#
#
#' @export#
PR.PH.DISTTIPS	<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=PH.DISTTIPS",sep='/')#
#
#' @export#
PR.BETAREG.ESTRISK		<- paste(HIVC.CODE.HOME,"pkg/misc/hivclu.startme.R -exe=BETAREG.ESTRISK",sep='/')#
#
#' @export#
HPC.NPROC		<- {tmp<- c(1,4); names(tmp)<- c("debug","cx1.hpc.ic.ac.uk"); tmp}#
#
#' @export#
HPC.MPIRUN		<- {tmp<- c("mpirun","mpiexec"); names(tmp)<- c("debug","cx1.hpc.ic.ac.uk"); tmp}#
#
#' @export#
HPC.CX1.IMPERIAL<- "cx1.hpc.ic.ac.uk"		#this is set to system('domainname',intern=T) for the hpc cluster of choice#
#
#' @export#
HPC.MEM			<- "1750mb"#
#
#' @export#
HPC.LOAD		<- "module load intel-suite mpi R/2.15 raxml examl/2013-05-09 beast/1.8.0 beagle-lib/2014-07-30"
infile.seq.sig	<- "Sun_Sep_14_12/59/06_2013"#
	infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq',sep='')#
	file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )#
	#	run ExaML#
	cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile.seq, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)
cat(cmd)
cmd.hpccaller(outdir, paste("exa",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.'), cmd)
infile.seq.sig	<- "Sun_Sep_14_12:59:06_2013"#
	infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq',sep='')#
	file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )#
	#	run ExaML#
	cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile.seq, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)#
	cmd.hpccaller(outdir, paste("exa",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.'), cmd)
seq
file
save(seq, file=file)
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
indir			<- ifelse(indir=='','/Users/Oliver/git/HPTN071sim/raw_trchain',indir)#
#	re-name the following:#
tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140914'#
dir.create(tmpdir, showWarnings=FALSE)#
#	simulation input files from the epi-simulator#
infile.ind		<- '140716_RUN001_IND.csv'#
infile.trm		<- '140716_RUN001_TRM.csv'#
#	input arguments for the pipeline#
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.2, epi.dt=1/48, epi.import=0.1 )	#
#	#
#	call simulation pipeline#
#	this generates a UNIX batch file if no HPC system is detected, or#
#	this generates and runs a qsub file if an HPC system is detected #
##
file			<- rPANGEAHIVsim.pipeline(indir, infile.ind, infile.trm, tmpdir, pipeline.args=pipeline.args)#
cat(file)
rPANGEAHIVsim.pipeline<- function(indir, infile.ind, infile.trm, outdir, pipeline.args=rPANGEAHIVsim.pipeline.args() )#
{#
	verbose			<- 1#
	infile.args		<- paste(outdir,'/',substr(infile.trm, 1, nchar(infile.trm)-7), 'PipeArgs.R',sep='')#
	save(pipeline.args, file=infile.args)#
	##
	if(verbose)#
	{#
		cat('\ninput args\n',paste(indir, infile.ind, infile.trm, outdir, sep='\n'))#
	}	#
	##
	#	pipeline start#
	#	#
	##	sample sequences and draw imports #
	cmd				<- "########################################################
########################################################
########################################################
##
# start: run rPANGEAHIVsim.pipeline#
##
########################################################
########################################################
#######################################################"		#
	outdir.TrChain	<- paste(outdir,'/TrChains',sep='')#
	cmd				<- paste(cmd, '\nmkdir -p ', outdir.TrChain,sep='')#
	if(pipeline.args['epi.model'][,v]=='HPTN071')#
	{#
		cmd			<- paste(cmd, cmd.HPTN071.input.parser.v2(indir, infile.trm, infile.ind, infile.args, outdir.TrChain,  infile.trm, infile.ind), sep='\n')	#
	}	#
	if(pipeline.args['epi.model'][,v]=='DSPS')#
	{#
		infile.ind	<- gsub('TRM','IND',infile.trm)#
		cmd			<- paste(cmd, cmd.DSPS.input.parser.v2(indir, infile.trm, infile.args, outdir.TrChain,  infile.trm, infile.ind), sep='\n')		#
	}#
	##	run virus tree simulator#
	outdir.VTS		<- paste(outdir,'/VirusTreeSimulator',sep='')#
	cmd				<- paste(cmd, 'mkdir -p ', outdir.VTS,sep='')#
	outfile			<- substr(infile.ind, 1, nchar(infile.ind)-7)#
	prog.args		<- paste('-demoModel Logistic -N0 ',pipeline.args['v.N0tau',][,v] ,' -growthRate ', pipeline.args['v.r',][,v],' -t50 ',pipeline.args['v.T50',][,v], sep='')	#
	cmd				<- paste(cmd, cmd.VirusTreeSimulator(outdir.TrChain, infile.trm, infile.ind, outdir.VTS, outfile, prog.args=prog.args), sep='\n')	#
	##	create seq gen input files #
	outdir.SG		<- paste(outdir,'/SeqGen',sep='')#
	cmd				<- paste(cmd, 'mkdir -p ', outdir.SG,sep='')#
	infile.epi		<- paste( substr(infile.ind, 1, nchar(infile.ind)-7),'SAVE.R', sep='' )#
	infile.vts		<- substr(infile.ind, 1, nchar(infile.ind)-7)#
	cmd				<- paste(cmd, cmd.SeqGen.createInputFiles(outdir.TrChain, infile.epi, outdir.VTS, infile.vts, infile.args, outdir.SG), sep='\n')#
	##	run SeqGen	#
	outfile			<- substr(infile.ind, 1, nchar(infile.ind)-7)#
	cmd				<- paste(cmd, cmd.SeqGen.run(outdir.SG, infile.args, outfile, outdir), sep='')#
	##	clean up#
	cmd				<- paste(cmd,'rm -rf ',outdir.TrChain,' ', outdir.VTS,' ', outdir.SG,'\n',sep='')#
	cmd				<- paste(cmd,"########################################################
########################################################
########################################################
##
# end: run rPANGEAHIVsim.pipeline#
##
########################################################
########################################################
#######################################################\n",sep='')#
	if(verbose)#
		cat(cmd)#
	outfile			<- paste("pngea",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.')	#
	cmd.hpccaller(outdir, outfile, cmd)	#
}
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
indir			<- ifelse(indir=='','/Users/Oliver/git/HPTN071sim/raw_trchain',indir)#
#	re-name the following:#
tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140914'#
dir.create(tmpdir, showWarnings=FALSE)#
#	simulation input files from the epi-simulator#
infile.ind		<- '140716_RUN001_IND.csv'#
infile.trm		<- '140716_RUN001_TRM.csv'#
#	input arguments for the pipeline#
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.2, epi.dt=1/48, epi.import=0.1 )	#
#	#
#	call simulation pipeline#
#	this generates a UNIX batch file if no HPC system is detected, or#
#	this generates and runs a qsub file if an HPC system is detected #
##
file			<- rPANGEAHIVsim.pipeline(indir, infile.ind, infile.trm, tmpdir, pipeline.args=pipeline.args)#
cat(file)
rPANGEAHIVsim.pipeline<- function(indir, infile.ind, infile.trm, outdir, pipeline.args=rPANGEAHIVsim.pipeline.args() )#
{#
	verbose			<- 1#
	infile.args		<- paste(outdir,'/',substr(infile.trm, 1, nchar(infile.trm)-7), 'PipeArgs.R',sep='')#
	save(pipeline.args, file=infile.args)#
	##
	if(verbose)#
	{#
		cat('\ninput args\n',paste(indir, infile.ind, infile.trm, outdir, sep='\n'))#
	}	#
	##
	#	pipeline start#
	#	#
	##	sample sequences and draw imports #
	cmd				<- "########################################################
########################################################
########################################################
##
# start: run rPANGEAHIVsim.pipeline#
##
########################################################
########################################################
#######################################################"		#
	outdir.TrChain	<- paste(outdir,'/TrChains',sep='')#
	cmd				<- paste(cmd, '\nmkdir -p ', outdir.TrChain,sep='')#
	if(pipeline.args['epi.model'][,v]=='HPTN071')#
	{#
		cmd			<- paste(cmd, cmd.HPTN071.input.parser.v2(indir, infile.trm, infile.ind, infile.args, outdir.TrChain,  infile.trm, infile.ind), sep='\n')	#
	}	#
	if(pipeline.args['epi.model'][,v]=='DSPS')#
	{#
		infile.ind	<- gsub('TRM','IND',infile.trm)#
		cmd			<- paste(cmd, cmd.DSPS.input.parser.v2(indir, infile.trm, infile.args, outdir.TrChain,  infile.trm, infile.ind), sep='\n')		#
	}#
	##	run virus tree simulator#
	outdir.VTS		<- paste(outdir,'/VirusTreeSimulator',sep='')#
	cmd				<- paste(cmd, 'mkdir -p ', outdir.VTS,sep='')#
	outfile			<- substr(infile.ind, 1, nchar(infile.ind)-7)#
	prog.args		<- paste('-demoModel Logistic -N0 ',pipeline.args['v.N0tau',][,v] ,' -growthRate ', pipeline.args['v.r',][,v],' -t50 ',pipeline.args['v.T50',][,v], sep='')	#
	cmd				<- paste(cmd, cmd.VirusTreeSimulator(outdir.TrChain, infile.trm, infile.ind, outdir.VTS, outfile, prog.args=prog.args), sep='\n')	#
	##	create seq gen input files #
	outdir.SG		<- paste(outdir,'/SeqGen',sep='')#
	cmd				<- paste(cmd, 'mkdir -p ', outdir.SG,sep='')#
	infile.epi		<- paste( substr(infile.ind, 1, nchar(infile.ind)-7),'SAVE.R', sep='' )#
	infile.vts		<- substr(infile.ind, 1, nchar(infile.ind)-7)#
	cmd				<- paste(cmd, cmd.SeqGen.createInputFiles(outdir.TrChain, infile.epi, outdir.VTS, infile.vts, infile.args, outdir.SG), sep='\n')#
	##	run SeqGen	#
	outfile			<- substr(infile.ind, 1, nchar(infile.ind)-7)#
	cmd				<- paste(cmd, cmd.SeqGen.run(outdir.SG, outfile, infile.args, outdir), sep='')#
	##	clean up#
	cmd				<- paste(cmd,'rm -rf ',outdir.TrChain,' ', outdir.VTS,' ', outdir.SG,'\n',sep='')#
	cmd				<- paste(cmd,"########################################################
########################################################
########################################################
##
# end: run rPANGEAHIVsim.pipeline#
##
########################################################
########################################################
#######################################################\n",sep='')#
	if(verbose)#
		cat(cmd)#
	outfile			<- paste("pngea",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.')	#
	cmd.hpccaller(outdir, outfile, cmd)	#
}
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
indir			<- ifelse(indir=='','/Users/Oliver/git/HPTN071sim/raw_trchain',indir)#
#	re-name the following:#
tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140914'#
dir.create(tmpdir, showWarnings=FALSE)#
#	simulation input files from the epi-simulator#
infile.ind		<- '140716_RUN001_IND.csv'#
infile.trm		<- '140716_RUN001_TRM.csv'#
#	input arguments for the pipeline#
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.2, epi.dt=1/48, epi.import=0.1 )	#
#	#
#	call simulation pipeline#
#	this generates a UNIX batch file if no HPC system is detected, or#
#	this generates and runs a qsub file if an HPC system is detected #
##
file			<- rPANGEAHIVsim.pipeline(indir, infile.ind, infile.trm, tmpdir, pipeline.args=pipeline.args)#
cat(file)
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
#	re-name the following:#
tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140912'#
dir.create(tmpdir, showWarnings=FALSE)#
#	simulation input files from the epi-simulator#
infile.trm		<- '140911_DSPS_RUN002_TRM.csv'#
infile.ind		<- NULL#
#	input arguments for the pipeline#
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.70, epi.model='DSPS', epi.dt=1/48, epi.import=0.1 )	#
infile.args		<- paste(tmpdir,'/',substr(infile.trm, 1, nchar(infile.trm)-7), 'PipeArgs.R',sep='')#
save(pipeline.args, file=infile.args)#
#	#
#	call simulation pipeline#
#	this generates a UNIX batch file if no HPC system is detected, or#
#	this generates and runs a qsub file if an HPC system is detected #
##
file			<- rPANGEAHIVsim.pipeline(indir, infile.ind, infile.trm, tmpdir, pipeline.args=pipeline.args)#
cat(file)
2019.8-1951.4
DATA
HOME		<<- "/Users/Oliver/duke/2013_HIV_NL/ATHENA_2013"#
#HOME		<<- "/Users/Oliver/duke/2013_HIV_Hue/UKCA_1309"#
#HOME		<<- "/work/or105/UKCA_1309"#
#HOME		<<- "/Users/Stephane/Desktop/CASCADE_phylo/hivclust"#
#HOME		<<- "/home/koelle/or7/phylody"#
#HOME		<<- "/work/or105/ATHENA_2013"#
DATA		<<- paste(HOME,"data",sep='/')
DATA
require(phytools)#
	require(hivclust)#
	tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- paste(DATA,'methods_comparison_pipeline/140914',sep='/')	  #
	outdir		<- indir#
	infiles		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)
infiles
indir
DATA		<<- "/work/or105/Gates_2014"#
	indir		<- paste(DATA,'methods_comparison_pipeline/140914',sep='/')	  #
	outdir		<- indir#
	infiles		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)
infiles
indir
DATA		<<- "/Users/Oliver/duke/2014_Gates"#
	indir		<- paste(DATA,'methods_comparison_pipeline/140914',sep='/')	  #
	outdir		<- indir#
	infiles		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)
infiles
i<- 1
infile		<- infiles[i]#
		#	load simulated data#
		file			<- paste(indir, '/', infile, sep='')#
		cat(paste('\nLoading file', file))#
		load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
		#	load outgroup sequences#
		file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
		cat(paste('\nLoading outgroup seq from file', file))#
		load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"#
		tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
		rownames(tmp)	<- df.seq[, LABEL]#
		df.seq.gag		<- as.DNAbin(tmp)#
		tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
		rownames(tmp)	<- df.seq[, LABEL]#
		df.seq.pol		<- as.DNAbin(tmp)	#
		tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
		rownames(tmp)	<- df.seq[, LABEL]#
		df.seq.env		<- as.DNAbin(tmp)#
		##
		#	run ExaML on pol#
		##
		seq				<- df.seq.pol#
		seq				<- rbind(seq, outgroup.seq.pol[, seq_len(ncol(seq))])#
		infile.seq.sig	<- "Sun_Sep_14_12:59:06_2013"#
		infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_polseq',sep='')#
		file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )#
		save(seq, file=file)#
		#	run ExaML#
		cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile.seq, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)#
		cmd				<- hivc.cmd.hpcwrapper(cmd, hpc.walltime=24, hpc.q= NA, hpc.mem="450mb", hpc.nproc=1)#
		cmd.hpccaller(outdir, paste("exa",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.'), cmd)#
		Sys.sleep(1)	#
		##
		#	run ExaML on concatenated#
		##
		seq				<- cbind(df.seq.gag,df.seq.pol,df.seq.env)#
		tmp				<- cbind(outgroup.seq.gag[,1:ncol(df.seq.gag)], outgroup.seq.pol, outgroup.seq.env)#
		seq				<- rbind(seq,tmp)#
		infile.seq.sig	<- "Sun_Sep_14_12:59:06_2013"#
		infile.seq		<- paste(substr(infile,1,nchar(infile)-20),'INFO_simu_concseq',sep='')#
		file			<- paste( outdir, '/', infile.seq,'_',gsub('/',':',infile.seq.sig),'.R', sep='' )#
		save(seq, file=file)#
		#	run ExaML#
		cmd				<- hivc.cmd.examl.bootstrap.on.one.machine(indir, infile.seq, infile.seq.sig, infile.seq.sig, bs.from=0, bs.to=0, verbose=1)#
		cmd				<- hivc.cmd.hpcwrapper(cmd, hpc.walltime=24, hpc.q= NA, hpc.mem="450mb", hpc.nproc=1)#
		cmd.hpccaller(outdir, paste("exa",paste(strsplit(date(),split=' ')[[1]],collapse='_',sep=''),sep='.'), cmd)#
		Sys.sleep(1)
require(phytools)#
	require(hivclust)#
	tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'
infiles		<- list.files(indir, '^ExaML_result.*finaltree.000$', full.names=FALSE)
infiles
i			<- 1#
	infile		<- infiles[i]#
	file		<- paste(indir,'/',infile,sep='')
file
ph			<- read.newick(file)
?read.newick
tree<-"((Human,Chimp),Gorilla),Monkey);"
read.newick(text="((Human,Chimp),Gorilla),Monkey);")
read.newick(text="((Human,Chimp),Gorilla),Monkey);\n")
read.newick(text="((Human,Chimp),Gorilla),Monkey)")
read.newick(text="((Human,Chimp),Gorilla),Monkey))")
read.newick(text="()((Human,Chimp),Gorilla),Monkey)")
file
ph			<- read.newick(file)
read.newick
?read.tree
ph			<- read.tree(file)
ph
system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfgBwhRc-_140902_n390_AncSeq.R')
tmp				<- which(ph$tip.label=="HXB2")
tmp
ph				<- reroot(ph, tmp, ph$edge.length[which(ph$edge[,2]==tmp)])#
	ph				<- ladderize(ph)
infile
infiles			<- list.files(indir, '^ExaML_result.*polseq.*finaltree.000$', full.names=FALSE)#
	i				<- 1#
	infile			<- infiles[i]#
	file			<- paste(indir,'/',infile,sep='')
file
ph				<- read.tree(file)#
	tmp				<- which(ph$tip.label=="HXB2")#
	ph				<- reroot(ph, tmp, ph$edge.length[which(ph$edge[,2]==tmp)])#
	ph				<- ladderize(ph)		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_ExaMLpol.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(ph, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()
ph				<- drop.tip(ph,'HXB2')#
	tmp				<- node.depth.edgelength(ph)#
	ph.info			<- data.table(LABEL=ph$tip.label, ROOT2TIP=tmp[seq_len(Ntip(ph))] )#
	set(ph.info, NULL, 'CALENDAR_TIME', ph.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=ph.info)		 #
	set( ph.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(ph.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 pol sequences)') +#
			annotate("text", x=ph.info[, min(CALENDAR_TIME)], y=ph.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))
file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_ExaMLpolR2.pdf', sep='' )#
	ggsave(file=file, w=10, h=6)
require(phytools)#
	tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140910/140716_RUN001_INTERNAL'#
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140912/140911_DSPS_RUN002_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140912/140911_DSPS_RUN002_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)#
	stopifnot(length(infile)==1)#
	#	load simulated data#
	file			<- paste(indir, '/', infile, sep='')#
	cat(paste('\nLoading file', file))#
	load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
	#	load outgroup sequences#
	file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
	cat(paste('\nLoading outgroup seq from file', file))#
	load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.gag		<- as.DNAbin(tmp)#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.pol		<- as.DNAbin(tmp)	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.env		<- as.DNAbin(tmp)#
	##
	#	get R2 for df.seq.pol#
	##
	seq				<- df.seq.pol#
	seq				<- rbind(seq, outgroup.seq.pol[, seq_len(ncol(seq))])#
	#	get NJ tree	#
	tmp				<- dist.dna(seq)#
	nj				<- nj(tmp)#
	tmp				<- which(nj$tip.label=="HXB2")#
	nj				<- reroot(nj, tmp, nj$edge.length[which(nj$edge[,2]==tmp)])#
	nj				<- ladderize(nj)		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJpol.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(nj, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()
nj				<- drop.tip(nj,'HXB2')#
	tmp				<- node.depth.edgelength(nj)#
	nj.info			<- data.table(LABEL=nj$tip.label, ROOT2TIP=tmp[seq_len(Ntip(nj))] )#
	set(nj.info, NULL, 'CALENDAR_TIME', nj.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=nj.info)		 #
	set( nj.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 pol sequences)') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))
indir			<- system.file(package="rPANGEAHIVsim", "misc")#
#	re-name the following:#
tmpdir			<- '/Users/Oliver/git/HPTN071sim/tmp140912'#
dir.create(tmpdir, showWarnings=FALSE)#
#	simulation input files from the epi-simulator#
infile.trm		<- '140911_DSPS_RUN002_TRM.csv'#
infile.ind		<- NULL#
#	input arguments for the pipeline#
pipeline.args	<- rPANGEAHIVsim.pipeline.args( yr.start=1980, yr.end=2020, seed=42, s.PREV.min=0.01, s.PREV.max=0.70, epi.model='DSPS', epi.dt=1/48, epi.import=0.1 )	#
infile.args		<- paste(tmpdir,'/',substr(infile.trm, 1, nchar(infile.trm)-7), 'PipeArgs.R',sep='')#
save(pipeline.args, file=infile.args)#
#	#
#	call simulation pipeline#
#	this generates a UNIX batch file if no HPC system is detected, or#
#	this generates and runs a qsub file if an HPC system is detected #
##
file			<- rPANGEAHIVsim.pipeline(indir, infile.ind, infile.trm, tmpdir, pipeline.args=pipeline.args)#
cat(file)
tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140914/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140914/140716_RUN001_INTERNAL'#
	#indir		<- '/Users/Oliver/git/HPTN071sim/tmp140912/140911_DSPS_RUN002_INTERNAL'  #
	#outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140912/140911_DSPS_RUN002_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)#
	stopifnot(length(infile)==1)#
	#	load simulated data#
	file			<- paste(indir, '/', infile, sep='')#
	cat(paste('\nLoading file', file))#
	load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
	#	load outgroup sequences#
	file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
	cat(paste('\nLoading outgroup seq from file', file))#
	load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"
tree.id.labelsep		<- '|'#
	tree.id.label.idx.ctime	<- 4 #
	indir		<- '/Users/Oliver/git/HPTN071sim/tmp140914/140716_RUN001_INTERNAL'  #
	outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140914/140716_RUN001_INTERNAL'#
	#indir		<- '/Users/Oliver/git/HPTN071sim/tmp140912/140911_DSPS_RUN002_INTERNAL'  #
	#outdir		<- '/Users/Oliver/git/HPTN071sim/tmp140912/140911_DSPS_RUN002_INTERNAL'#
	infile		<- list.files(indir, '.*INTERNAL.R$', full.names=FALSE)#
	stopifnot(length(infile)==1)#
	#	load simulated data#
	file			<- paste(indir, '/', infile, sep='')#
	cat(paste('\nLoading file', file))#
	load(file)		#expect "df.epi"    "df.trms"   "df.inds"   "df.sample" "df.seq"#
	#	load outgroup sequences#
	file			<- system.file(package="rPANGEAHIVsim", "misc",'PANGEA_SSAfg_HXB2outgroup.R')#
	cat(paste('\nLoading outgroup seq from file', file))#
	load(file)		#expect "outgroup.seq.gag" "outgroup.seq.pol" "outgroup.seq.env"
tmp				<- tolower(do.call('rbind',strsplit(df.seq[, GAG],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.gag		<- as.DNAbin(tmp)#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, POL],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.pol		<- as.DNAbin(tmp)	#
	tmp				<- tolower(do.call('rbind',strsplit(df.seq[, ENV],'')))#
	rownames(tmp)	<- df.seq[, LABEL]#
	df.seq.env		<- as.DNAbin(tmp)#
	##
	#	get R2 for df.seq.pol#
	##
	seq				<- df.seq.pol#
	seq				<- rbind(seq, outgroup.seq.pol[, seq_len(ncol(seq))])#
	#	get NJ tree	#
	tmp				<- dist.dna(seq)#
	nj				<- nj(tmp)#
	tmp				<- which(nj$tip.label=="HXB2")#
	nj				<- reroot(nj, tmp, nj$edge.length[which(nj$edge[,2]==tmp)])#
	nj				<- ladderize(nj)		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJpol.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(nj, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()			#
	#	get root to tip divergence#
	nj				<- drop.tip(nj,'HXB2')#
	tmp				<- node.depth.edgelength(nj)#
	nj.info			<- data.table(LABEL=nj$tip.label, ROOT2TIP=tmp[seq_len(Ntip(nj))] )#
	set(nj.info, NULL, 'CALENDAR_TIME', nj.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=nj.info)		 #
	set( nj.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 pol sequences)') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))
file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJpolR2.pdf', sep='' )#
	ggsave(file=file, w=10, h=6)
seq				<- cbind(df.seq.gag,df.seq.pol,df.seq.env)#
	tmp				<- cbind(outgroup.seq.gag[,1:ncol(df.seq.gag)], outgroup.seq.pol, outgroup.seq.env)#
	seq				<- rbind(seq,tmp)#
	#	get NJ tree	#
	tmp				<- dist.dna(seq)#
	nj				<- nj(tmp)#
	tmp				<- which(nj$tip.label=="HXB2")#
	nj				<- reroot(nj, tmp, nj$edge.length[which(nj$edge[,2]==tmp)])#
	nj				<- ladderize(nj)		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJ.pdf', sep='' )	#
	pdf(file=file, w=10, h=150)#
	plot(nj, show.tip=TRUE, cex=0.5)#
	add.scale.bar()#
	dev.off()		#
	#	get root to tip divergence#
	nj				<- drop.tip(nj,'HXB2')#
	tmp				<- node.depth.edgelength(nj)#
	nj.info			<- data.table(LABEL=nj$tip.label, ROOT2TIP=tmp[seq_len(Ntip(nj))] )#
	set(nj.info, NULL, 'CALENDAR_TIME', nj.info[, as.numeric(sapply(strsplit(LABEL, tree.id.labelsep, fixed=TRUE),'[[',tree.id.label.idx.ctime))] )#
	tmp				<- lm(ROOT2TIP~CALENDAR_TIME, data=nj.info)		 #
	set( nj.info, NULL, 'ROOT2TIP_LM', predict(tmp, type='response') ) 	#
	tmp2			<- c( R2=round(summary(tmp)$r.squared,d=3), SLOPE= as.numeric(round(coef(tmp)['CALENDAR_TIME'],d=4)), TMRCA=as.numeric(round( -coef(tmp)['(Intercept)']/coef(tmp)['CALENDAR_TIME'], d=1 )) )#
	ggplot(nj.info, aes(x=CALENDAR_TIME, y=ROOT2TIP)) + geom_point(alpha=0.5) + geom_line(aes(y=ROOT2TIP_LM)) +#
			#scale_x_continuous(breaks=seq(1980,2020,2)) +						#
			labs(x='Sequence sampling date', y='root-to-tip divergence\n(HIV-1 concatenated sequences)') +#
			annotate("text", x=nj.info[, min(CALENDAR_TIME)], y=nj.info[, 0.9*max(ROOT2TIP)], label=paste("R2=", tmp2['R2'],'\nSlope=',tmp2['SLOPE'],'\nTMRCA=',tmp2['TMRCA'], sep=''), hjust = 0, size = 4) +#
			theme(legend.position=c(0,1), legend.justification=c(0,1))		#
	file			<- paste( outdir, '/', substr(infile,1,nchar(infile)-20),'INFO_simu_NJR2.pdf', sep='' )#
	ggsave(file=file, w=10, h=6)
tree.id.burnin		<- 2e7#
	tree.id.labelsep	<- '|'#
	ancseq.excl.timediff<- 3#
	dir.name			<- '/Users/Oliver/duke/2014_Gates'  	#
	indir				<- paste(dir.name,'methods_comparison_rootseqsim/140907',sep='/')#
	ancseq.label.prefix	<- 'PANGEA_SSApgBwhRc-_140907_n390'#
	outdir				<- indir#
	#	search for BEAST output#
	files				<- list.files(indir)#
	files				<- files[ sapply(files, function(x) grepl('pool[0-9].R$',x) ) ]	#
	if(!length(files))	stop('cannot find files matching criteria')#
	#	load and process BEAST PARSER output#
	#	sampling times are different for each gene, as they come from different trees#
	anc.seq				<- lapply(files, function(file)#
			{#
				cat(paste('\nProcess file=', file  ))#
				load( paste(indir, file, sep='/') )	#	expect tree, node.stat#
				#	compute gag pol env ancestral sequences		#
				anc.seq	<- PANGEA.RootSeqSim.get.ancestral.seq.pg(tree, node.stat, tree.id.sep='_', tree.id.idx.mcmcit=2, tree.id.burnin=tree.id.burnin, label.sep=tree.id.labelsep, label.idx.ctime=5)								#
				anc.seq[, POOL:= regmatches(file, regexpr('pool[0-9]+', file)) ]#
				set(anc.seq, NULL, 'BEAST_MCMC_IT', NULL )#
				anc.seq#
			})#
	anc.seq				<- do.call('rbind',anc.seq)#
	set(anc.seq, NULL, 'POOL', anc.seq[, factor(POOL)])#
	set(anc.seq, NULL, 'GENE', anc.seq[, factor(GENE)])#
	set(anc.seq, NULL, 'TREE_ID', anc.seq[, factor(TREE_ID)])#
	anc.seq[, LABEL:=NULL]
setwd("/Users/Oliver/git/HPTN071sim/source/rPANGEAHIVsim"); source("misc/rPANGEAHIV.startme.R")
tree.id.burnin		<- 2e7#
	tree.id.labelsep	<- '|'#
	ancseq.excl.timediff<- 3#
	dir.name			<- '/Users/Oliver/duke/2014_Gates'  	#
	indir				<- paste(dir.name,'methods_comparison_rootseqsim/140907',sep='/')#
	ancseq.label.prefix	<- 'PANGEA_SSApgBwhRc-_140907_n390'#
	outdir				<- indir#
	#	search for BEAST output#
	files				<- list.files(indir)#
	files				<- files[ sapply(files, function(x) grepl('pool[0-9].R$',x) ) ]	#
	if(!length(files))	stop('cannot find files matching criteria')#
	#	load and process BEAST PARSER output#
	#	sampling times are different for each gene, as they come from different trees#
	anc.seq				<- lapply(files, function(file)#
			{#
				cat(paste('\nProcess file=', file  ))#
				load( paste(indir, file, sep='/') )	#	expect tree, node.stat#
				#	compute gag pol env ancestral sequences		#
				anc.seq	<- PANGEA.RootSeqSim.get.ancestral.seq.pg(tree, node.stat, tree.id.sep='_', tree.id.idx.mcmcit=2, tree.id.burnin=tree.id.burnin, label.sep=tree.id.labelsep, label.idx.ctime=5)								#
				anc.seq[, POOL:= regmatches(file, regexpr('pool[0-9]+', file)) ]#
				set(anc.seq, NULL, 'BEAST_MCMC_IT', NULL )#
				anc.seq#
			})#
	anc.seq				<- do.call('rbind',anc.seq)#
	set(anc.seq, NULL, 'POOL', anc.seq[, factor(POOL)])#
	set(anc.seq, NULL, 'GENE', anc.seq[, factor(GENE)])#
	set(anc.seq, NULL, 'TREE_ID', anc.seq[, factor(TREE_ID)])#
	anc.seq[, LABEL:=NULL]
tmp	<- anc.seq[, list(n=length(GENE)), by=c('POOL','TREE_ID','NODE_ID')]#
	stopifnot(tmp[, all(n==3)])
file				<- paste( outdir, '/', substr(files[1],1,nchar(files[1])-7), 'AncSeq_Raw.R',sep='' )
str(anc.seq)
file
save(anc.seq, file=file)
anc.seq.gag			<- subset(anc.seq, GENE=='GAG')#
	setnames(anc.seq.gag, c('SEQ','CALENDAR_TIME','POOL'), c('GAG','GAG_CALENDAR_TIME','GAG_POOL'))	#
	anc.seq.pol			<- subset(anc.seq, GENE=='POL')#
	setnames(anc.seq.pol, c('SEQ','CALENDAR_TIME','POOL'), c('POL','POL_CALENDAR_TIME','POL_POOL'))#
	anc.seq.env			<- subset(anc.seq, GENE=='ENV')#
	setnames(anc.seq.env, c('SEQ','CALENDAR_TIME','POOL'), c('ENV','ENV_CALENDAR_TIME','ENV_POOL'))#
	setkey(anc.seq.gag, GAG_CALENDAR_TIME)#
	setkey(anc.seq.pol, POL_CALENDAR_TIME)	#
	setkey(anc.seq.env, ENV_CALENDAR_TIME)
anc.seq				<- cbind( subset(anc.seq.gag, select=c(GAG, GAG_CALENDAR_TIME)), subset(anc.seq.pol, select=c(POL, POL_CALENDAR_TIME)) )#
	anc.seq				<- cbind( anc.seq, subset(anc.seq.env, select=c(ENV, ENV_CALENDAR_TIME) ))#
	cat(paste('\nFound starting sequences, n=', nrow(anc.seq)))
anc.seq[, d.gp:= abs(GAG_CALENDAR_TIME-POL_CALENDAR_TIME)]#
	anc.seq[, d.ge:= abs(GAG_CALENDAR_TIME-ENV_CALENDAR_TIME)]#
	anc.seq[, d.pe:= abs(POL_CALENDAR_TIME-ENV_CALENDAR_TIME)]#
	anc.seq				<- subset(anc.seq, d.gp<=ancseq.excl.timediff & d.ge<=ancseq.excl.timediff & d.pe<=ancseq.excl.timediff)#
	cat(paste('\nKeep starting sequences with sufficiently close TIME_SEQ, n=', nrow(anc.seq)))
anc.seq[, d.gp:=NULL]#
	anc.seq[, d.ge:=NULL]#
	anc.seq[, d.pe:=NULL]#
	#	finalize#
	anc.seq[, CALENDAR_TIME:= (GAG_CALENDAR_TIME+POL_CALENDAR_TIME+ENV_CALENDAR_TIME)/3]#
	anc.seq[, GAG_CALENDAR_TIME:=NULL]#
	anc.seq[, POL_CALENDAR_TIME:=NULL]#
	anc.seq[, ENV_CALENDAR_TIME:=NULL]#
	anc.seq[, LABEL:= paste(ancseq.label.prefix, tree.id.labelsep, 'SEQ_', seq_len(nrow(anc.seq)), tree.id.labelsep, round(CALENDAR_TIME, d=4), sep='')]
str(anc.seq)
anc.seq.gag	<- anc.seq.pol	<- anc.seq.env	<- NULL#
	gc()
tmp	<- subset(anc.seq, select=c(CALENDAR_TIME))
tmp
tmp	<- subset(anc.seq, select=c(CALENDAR_TIME))#
	ggplot(tmp, aes(x=CALENDAR_TIME)) + geom_histogram(binwidth=5)
ggplot(tmp, aes(x=CALENDAR_TIME)) + geom_histogram(binwidth=2) + scale_x_continuous(breaks=seq(1900,2020, 5))
ggplot(tmp, aes(x=CALENDAR_TIME)) + geom_histogram(binwidth=2) + scale_x_continuous(breaks=seq(1900,2020, 5), label='estimated inner node time\n(year)')
ggplot(tmp, aes(x=CALENDAR_TIME)) + geom_histogram(binwidth=2) + scale_x_continuous(breaks=seq(1900,2020, 5), name='estimated inner node time\n(year)')
ggplot(tmp, aes(x=CALENDAR_TIME)) + geom_histogram(binwidth=1) + scale_x_continuous(breaks=seq(1900,2020, 5), name='estimated inner node time\n(year)')
anc.seq		<- subset(anc.seq, CALENDAR_TIME>1935)
tmp	<- subset(anc.seq, select=c(CALENDAR_TIME))#
	ggplot(tmp, aes(x=CALENDAR_TIME)) + geom_histogram(binwidth=1) + scale_x_continuous(breaks=seq(1900,2020, 5), name='estimated inner node time\n(year)')
file		<- paste( outdir, '/', substr(files[1],1,nchar(files[1])-7), 'AncSeq_Times.pdf',sep='' )
file
ggsave(file=file, w=10, h=6)
str(anc.seq)
tmp			<- c(seq(1, nrow(anc.seq), 5e4), nrow(anc.seq)+1)#
	anc.seq.gag	<- lapply(seq_along(tmp)[-length(tmp)], function(i)#
			{#
				cat(paste('\nProcess GAG up to',tmp[i+1]-1))#
				anc.seq.gag				<- tolower(do.call('rbind',strsplit(anc.seq[seq.int(tmp[i], tmp[i+1]-1), GAG],'')))#
				rownames(anc.seq.gag)	<- anc.seq[seq.int(tmp[i], tmp[i+1]-1), LABEL]#
				anc.seq.gag				<- as.DNAbin(anc.seq.gag)				#
			})#
	anc.seq.gag	<- do.call('rbind', anc.seq.gag)#
	anc.seq.pol	<- lapply(seq_along(tmp)[-length(tmp)], function(i)#
			{#
				cat(paste('\nProcess POL up to',tmp[i+1]-1))#
				anc.seq.pol				<- tolower(do.call('rbind',strsplit(anc.seq[seq.int(tmp[i], tmp[i+1]-1), POL],'')))#
				rownames(anc.seq.pol)	<- anc.seq[seq.int(tmp[i], tmp[i+1]-1), LABEL]#
				anc.seq.pol				<- as.DNAbin(anc.seq.pol)				#
			})#
	anc.seq.pol	<- do.call('rbind', anc.seq.pol)#
	anc.seq.env	<- lapply(seq_along(tmp)[-length(tmp)], function(i)#
			{#
				cat(paste('\nProcess ENV up to',tmp[i+1]-1))#
				anc.seq.env				<- tolower(do.call('rbind',strsplit(anc.seq[seq.int(tmp[i], tmp[i+1]-1), ENV],'')))#
				rownames(anc.seq.env)	<- anc.seq[seq.int(tmp[i], tmp[i+1]-1), LABEL]#
				anc.seq.env				<- as.DNAbin(anc.seq.env)				#
			})#
	anc.seq.env	<- do.call('rbind', anc.seq.env)
set( anc.seq, NULL, 'GAG', NULL )#
	set( anc.seq, NULL, 'POL', NULL )#
	set( anc.seq, NULL, 'ENV', NULL )#
	anc.seq.info		<- anc.seq#
	#	save#
	file				<- "/Users/Oliver/duke/2014_Gates/methods_comparison_rootseqsim/140907/PANGEA_SSAfgBwhRc-_140907_n390_AncSeq.R"		#
	cat(paste('\nwrite Ancestral Sequences to ',file))
save(file=file, anc.seq.gag, anc.seq.pol, anc.seq.env, anc.seq.info)
